/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./app/components/animation/animation.js":
/*!***********************************************!*\
  !*** ./app/components/animation/animation.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/three.module.js */ \"./app/components/animation/src/three.module.js\");\n/* harmony import */ var _src_OrbitControls_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/OrbitControls.js */ \"./app/components/animation/src/OrbitControls.js\");\n/* harmony import */ var _src_RGBELoader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/RGBELoader.js */ \"./app/components/animation/src/RGBELoader.js\");\n/* harmony import */ var _src_FontLoader_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/FontLoader.js */ \"./app/components/animation/src/FontLoader.js\");\n/* harmony import */ var _src_TextGeometry_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/TextGeometry.js */ \"./app/components/animation/src/TextGeometry.js\");\n// example link: https://threejs.org/examples/#webgl_materials_variations_physical\n\n\n\n// import Stats from './src/stats.module.js';\n\n\n\n\n\n\nlet container, stats;\n\nlet camera, scene, renderer;\nlet particleLight;\n\nconst loader = new _src_FontLoader_js__WEBPACK_IMPORTED_MODULE_3__.FontLoader();\nloader.load( 'animation/gentilis_regular.typeface.json', function ( font ) {\n\n    init( font );\n    animate();\n\n} );\n\nfunction init( font ) {\n\n    container = document.createElement( 'div' );\n    document.querySelector('#container').appendChild( container );\n\n    camera = new _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 1, 2500 );\n    camera.position.set( 0.0, 400, 400 * 3.5 );\n\n    //\n\n    scene = new _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Scene();\n\n    new _src_RGBELoader_js__WEBPACK_IMPORTED_MODULE_2__.RGBELoader()\n        .setPath( 'animation/' )\n        .load( 'pedestrian_overpass_1k.hdr', function ( texture ) {\n\n            texture.mapping = _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.EquirectangularReflectionMapping;\n\n            // Materials\n\n            const cubeWidth = 400;\n            const numberOfSphersPerSide = 5;\n            const sphereRadius = ( cubeWidth / numberOfSphersPerSide ) * 0.8 * 0.5;\n            const stepSize = 1.0 / numberOfSphersPerSide;\n\n            const geometry = new _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.SphereGeometry( sphereRadius, 32, 16 );\n\n            let index = 0;\n\n            for ( let alpha = 0; alpha <= 1.0; alpha += stepSize ) {\n\n                for ( let beta = 0; beta <= 1.0; beta += stepSize ) {\n\n                    for ( let gamma = 0; gamma <= 1.0; gamma += stepSize ) {\n\n                        const diffuseColor = new _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Color().setHSL( alpha, 0.5, 0.25 );\n\n                        const material = new _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.MeshPhysicalMaterial( {\n                            color: diffuseColor,\n                            metalness: 0,\n                            roughness: 0.5,\n                            clearcoat: 1.0 - alpha,\n                            clearcoatRoughness: 1.0 - beta,\n                            reflectivity: 1.0 - gamma,\n                            envMap: ( index % 2 ) == 1 ? texture : null\n                        } );\n\n                        index ++;\n\n                        const mesh = new _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Mesh( geometry, material );\n\n                        mesh.position.x = alpha * 400 - 200;\n                        mesh.position.y = beta * 400 - 200;\n                        mesh.position.z = gamma * 400 - 200;\n\n                        scene.add( mesh );\n\n                    }\n\n                    index ++;\n\n                }\n\n                index ++;\n\n            }\n\n            scene.background = texture;\n\n        } );\n\n    function addLabel( name, location ) {\n\n        const textGeo = new _src_TextGeometry_js__WEBPACK_IMPORTED_MODULE_4__.TextGeometry( name, {\n\n            font: font,\n\n            size: 20,\n            height: 1,\n            curveSegments: 1\n\n        } );\n\n        const textMaterial = new _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial( { color: 0xffffff } );\n        const textMesh = new _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Mesh( textGeo, textMaterial );\n        textMesh.position.copy( location );\n        scene.add( textMesh );\n\n    }\n\n    addLabel( 'MODURE', new _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector3( - 350, 0, 0 ) );\n    addLabel( 'MODURE', new _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector3( 350, 0, 0 ) );\n\n    addLabel( 'META', new _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector3( 0, - 300, 0 ) );\n    addLabel( 'META', new _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector3( 0, 300, 0 ) );\n\n    addLabel( '3D Modeling Bureau', new _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector3( -100, 0, - 300 ) );\n    addLabel( '3D Modeling Bureau', new _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector3( -100, 0, 300 ) );\n\n    particleLight = new _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Mesh( new _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.SphereGeometry( 4, 8, 8 ), new _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial( { color: 0xffffff } ) );\n    scene.add( particleLight );\n\n    // Lights\n\n    scene.add( new _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.AmbientLight( 0x222222 ) );\n\n    const directionalLight = new _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.DirectionalLight( 0xffffff, 1 );\n    directionalLight.position.set( 1, 1, 1 ).normalize();\n    scene.add( directionalLight );\n\n    const pointLight = new _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.PointLight( 0xffffff, 2, 800 );\n    particleLight.add( pointLight );\n\n    //\n\n    renderer = new _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderer( { antialias: true } );\n    renderer.setPixelRatio( window.devicePixelRatio );\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    container.appendChild( renderer.domElement );\n\n    renderer.outputEncoding = _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.sRGBEncoding;\n    renderer.toneMapping = _src_three_module_js__WEBPACK_IMPORTED_MODULE_0__.ACESFilmicToneMapping;\n    renderer.toneMappingExposure = 0.75;\n\n    //\n\n    // stats = new Stats();\n    // container.appendChild( stats.dom );\n\n    const controls = new _src_OrbitControls_js__WEBPACK_IMPORTED_MODULE_1__.OrbitControls( camera, renderer.domElement );\n    controls.minDistance = 200;\n    controls.maxDistance = 2000;\n\n    window.addEventListener( 'resize', onWindowResize );\n\n}\n\nfunction onWindowResize() {\n\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n\n    renderer.setSize( window.innerWidth, window.innerHeight );\n\n}\n\n//\n\nfunction animate() {\n\n    requestAnimationFrame( animate );\n\n    render();\n    // stats.update();\n\n}\n\nfunction render() {\n\n    const timer = Date.now() * 0.00025;\n\n    //camera.position.x = Math.cos( timer ) * 800;\n    //camera.position.z = Math.sin( timer ) * 800;\n\n    camera.lookAt( scene.position );\n\n    particleLight.position.x = Math.sin( timer * 7 ) * 300;\n    particleLight.position.y = Math.cos( timer * 5 ) * 400;\n    particleLight.position.z = Math.cos( timer * 3 ) * 300;\n\n    renderer.render( scene, camera );\n\n}\n\n//# sourceURL=webpack://starter-kit/./app/components/animation/animation.js?");

/***/ }),

/***/ "./app/components/animation/src/FontLoader.js":
/*!****************************************************!*\
  !*** ./app/components/animation/src/FontLoader.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FontLoader\": () => (/* binding */ FontLoader),\n/* harmony export */   \"Font\": () => (/* binding */ Font)\n/* harmony export */ });\n/* harmony import */ var _three_module_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./three.module.js */ \"./app/components/animation/src/three.module.js\");\n\n\nclass FontLoader extends _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tlet json;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t}\n\n\t\t\tconst font = scope.parse( json );\n\n\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\treturn new Font( json );\n\n\t}\n\n}\n\n//\n\nclass Font {\n\n\tconstructor( data ) {\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tgenerateShapes( text, size = 100 ) {\n\n\t\tconst shapes = [];\n\t\tconst paths = createPaths( text, size, this.data );\n\n\t\tfor ( let p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n}\n\nfunction createPaths( text, size, data ) {\n\n\tconst chars = Array.from( text );\n\tconst scale = size / data.resolution;\n\tconst line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\tconst paths = [];\n\n\tlet offsetX = 0, offsetY = 0;\n\n\tfor ( let i = 0; i < chars.length; i ++ ) {\n\n\t\tconst char = chars[ i ];\n\n\t\tif ( char === '\\n' ) {\n\n\t\t\toffsetX = 0;\n\t\t\toffsetY -= line_height;\n\n\t\t} else {\n\n\t\t\tconst ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\toffsetX += ret.offsetX;\n\t\t\tpaths.push( ret.path );\n\n\t\t}\n\n\t}\n\n\treturn paths;\n\n}\n\nfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\tconst glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\tif ( ! glyph ) {\n\n\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\treturn;\n\n\t}\n\n\tconst path = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.ShapePath();\n\n\tlet x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\tif ( glyph.o ) {\n\n\t\tconst outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\tfor ( let i = 0, l = outline.length; i < l; ) {\n\n\t\t\tconst action = outline[ i ++ ];\n\n\t\t\tswitch ( action ) {\n\n\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { offsetX: glyph.ha * scale, path: path };\n\n}\n\nFont.prototype.isFont = true;\n\n\n\n//# sourceURL=webpack://starter-kit/./app/components/animation/src/FontLoader.js?");

/***/ }),

/***/ "./app/components/animation/src/OrbitControls.js":
/*!*******************************************************!*\
  !*** ./app/components/animation/src/OrbitControls.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"OrbitControls\": () => (/* binding */ OrbitControls),\n/* harmony export */   \"MapControls\": () => (/* binding */ MapControls)\n/* harmony export */ });\n/* harmony import */ var _three_module_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./three.module.js */ \"./app/components/animation/src/three.module.js\");\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\n\nclass OrbitControls extends _three_module_js__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher {\n\n\tconstructor( object, domElement ) {\n\n\t\tsuper();\n\n\t\tif ( domElement === undefined ) console.warn( 'THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.' );\n\t\tif ( domElement === document ) console.error( 'THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.' );\n\n\t\tthis.object = object;\n\t\tthis.domElement = domElement;\n\t\tthis.domElement.style.touchAction = 'none'; // disable touch scroll\n\n\t\t// Set to false to disable this control\n\t\tthis.enabled = true;\n\n\t\t// \"target\" sets the location of focus, where the object orbits around\n\t\tthis.target = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n\n\t\t// How far you can dolly in and out ( PerspectiveCamera only )\n\t\tthis.minDistance = 0;\n\t\tthis.maxDistance = Infinity;\n\n\t\t// How far you can zoom in and out ( OrthographicCamera only )\n\t\tthis.minZoom = 0;\n\t\tthis.maxZoom = Infinity;\n\n\t\t// How far you can orbit vertically, upper and lower limits.\n\t\t// Range is 0 to Math.PI radians.\n\t\tthis.minPolarAngle = 0; // radians\n\t\tthis.maxPolarAngle = Math.PI; // radians\n\n\t\t// How far you can orbit horizontally, upper and lower limits.\n\t\t// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n\t\tthis.minAzimuthAngle = - Infinity; // radians\n\t\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t\t// Set to true to enable damping (inertia)\n\t\t// If damping is enabled, you must call controls.update() in your animation loop\n\t\tthis.enableDamping = false;\n\t\tthis.dampingFactor = 0.05;\n\n\t\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t\t// Set to false to disable zooming\n\t\tthis.enableZoom = true;\n\t\tthis.zoomSpeed = 1.0;\n\n\t\t// Set to false to disable rotating\n\t\tthis.enableRotate = true;\n\t\tthis.rotateSpeed = 1.0;\n\n\t\t// Set to false to disable panning\n\t\tthis.enablePan = true;\n\t\tthis.panSpeed = 1.0;\n\t\tthis.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n\t\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t\t// Set to true to automatically rotate around the target\n\t\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\t\tthis.autoRotate = false;\n\t\tthis.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n\t\t// The four arrow keys\n\t\tthis.keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' };\n\n\t\t// Mouse buttons\n\t\tthis.mouseButtons = { LEFT: _three_module_js__WEBPACK_IMPORTED_MODULE_0__.MOUSE.ROTATE, MIDDLE: _three_module_js__WEBPACK_IMPORTED_MODULE_0__.MOUSE.DOLLY, RIGHT: _three_module_js__WEBPACK_IMPORTED_MODULE_0__.MOUSE.PAN };\n\n\t\t// Touch fingers\n\t\tthis.touches = { ONE: _three_module_js__WEBPACK_IMPORTED_MODULE_0__.TOUCH.ROTATE, TWO: _three_module_js__WEBPACK_IMPORTED_MODULE_0__.TOUCH.DOLLY_PAN };\n\n\t\t// for reset\n\t\tthis.target0 = this.target.clone();\n\t\tthis.position0 = this.object.position.clone();\n\t\tthis.zoom0 = this.object.zoom;\n\n\t\t// the target DOM element for key events\n\t\tthis._domElementKeyEvents = null;\n\n\t\t//\n\t\t// public methods\n\t\t//\n\n\t\tthis.getPolarAngle = function () {\n\n\t\t\treturn spherical.phi;\n\n\t\t};\n\n\t\tthis.getAzimuthalAngle = function () {\n\n\t\t\treturn spherical.theta;\n\n\t\t};\n\n\t\tthis.getDistance = function () {\n\n\t\t\treturn this.object.position.distanceTo( this.target );\n\n\t\t};\n\n\t\tthis.listenToKeyEvents = function ( domElement ) {\n\n\t\t\tdomElement.addEventListener( 'keydown', onKeyDown );\n\t\t\tthis._domElementKeyEvents = domElement;\n\n\t\t};\n\n\t\tthis.saveState = function () {\n\n\t\t\tscope.target0.copy( scope.target );\n\t\t\tscope.position0.copy( scope.object.position );\n\t\t\tscope.zoom0 = scope.object.zoom;\n\n\t\t};\n\n\t\tthis.reset = function () {\n\n\t\t\tscope.target.copy( scope.target0 );\n\t\t\tscope.object.position.copy( scope.position0 );\n\t\t\tscope.object.zoom = scope.zoom0;\n\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tscope.dispatchEvent( _changeEvent );\n\n\t\t\tscope.update();\n\n\t\t\tstate = STATE.NONE;\n\n\t\t};\n\n\t\t// this method is exposed, but perhaps it would be better if we can make it private...\n\t\tthis.update = function () {\n\n\t\t\tconst offset = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n\n\t\t\t// so camera.up is the orbit axis\n\t\t\tconst quat = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Quaternion().setFromUnitVectors( object.up, new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector3( 0, 1, 0 ) );\n\t\t\tconst quatInverse = quat.clone().invert();\n\n\t\t\tconst lastPosition = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n\t\t\tconst lastQuaternion = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Quaternion();\n\n\t\t\tconst twoPI = 2 * Math.PI;\n\n\t\t\treturn function update() {\n\n\t\t\t\tconst position = scope.object.position;\n\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t\t// angle from z-axis around y-axis\n\t\t\t\tspherical.setFromVector3( offset );\n\n\t\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scope.enableDamping ) {\n\n\t\t\t\t\tspherical.theta += sphericalDelta.theta * scope.dampingFactor;\n\t\t\t\t\tspherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t\t}\n\n\t\t\t\t// restrict theta to be between desired limits\n\n\t\t\t\tlet min = scope.minAzimuthAngle;\n\t\t\t\tlet max = scope.maxAzimuthAngle;\n\n\t\t\t\tif ( isFinite( min ) && isFinite( max ) ) {\n\n\t\t\t\t\tif ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n\t\t\t\t\tif ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n\t\t\t\t\tif ( min <= max ) {\n\n\t\t\t\t\t\tspherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tspherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n\t\t\t\t\t\t\tMath.max( min, spherical.theta ) :\n\t\t\t\t\t\t\tMath.min( max, spherical.theta );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// restrict phi to be between desired limits\n\t\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\t\tspherical.makeSafe();\n\n\n\t\t\t\tspherical.radius *= scale;\n\n\t\t\t\t// restrict radius to be between desired limits\n\t\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t\t// move target to panned location\n\n\t\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\t\tscope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t\t}\n\n\t\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t\tscale = 1;\n\n\t\t\t\t// update condition is:\n\t\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\t\tif ( zoomChanged ||\n\t\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\t\tscope.dispatchEvent( _changeEvent );\n\n\t\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\t\tzoomChanged = false;\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t};\n\n\t\t}();\n\n\t\tthis.dispose = function () {\n\n\t\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu );\n\n\t\t\tscope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n\t\t\tscope.domElement.removeEventListener( 'pointercancel', onPointerCancel );\n\t\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\n\t\t\tscope.domElement.removeEventListener( 'pointermove', onPointerMove );\n\t\t\tscope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n\n\t\t\tif ( scope._domElementKeyEvents !== null ) {\n\n\t\t\t\tscope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n\n\t\t\t}\n\n\t\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t\t};\n\n\t\t//\n\t\t// internals\n\t\t//\n\n\t\tconst scope = this;\n\n\t\tconst STATE = {\n\t\t\tNONE: - 1,\n\t\t\tROTATE: 0,\n\t\t\tDOLLY: 1,\n\t\t\tPAN: 2,\n\t\t\tTOUCH_ROTATE: 3,\n\t\t\tTOUCH_PAN: 4,\n\t\t\tTOUCH_DOLLY_PAN: 5,\n\t\t\tTOUCH_DOLLY_ROTATE: 6\n\t\t};\n\n\t\tlet state = STATE.NONE;\n\n\t\tconst EPS = 0.000001;\n\n\t\t// current position in spherical coordinates\n\t\tconst spherical = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Spherical();\n\t\tconst sphericalDelta = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Spherical();\n\n\t\tlet scale = 1;\n\t\tconst panOffset = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n\t\tlet zoomChanged = false;\n\n\t\tconst rotateStart = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n\t\tconst rotateEnd = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n\t\tconst rotateDelta = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n\n\t\tconst panStart = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n\t\tconst panEnd = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n\t\tconst panDelta = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n\n\t\tconst dollyStart = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n\t\tconst dollyEnd = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n\t\tconst dollyDelta = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n\n\t\tconst pointers = [];\n\t\tconst pointerPositions = {};\n\n\t\tfunction getAutoRotationAngle() {\n\n\t\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t\t}\n\n\t\tfunction getZoomScale() {\n\n\t\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t\t}\n\n\t\tfunction rotateLeft( angle ) {\n\n\t\t\tsphericalDelta.theta -= angle;\n\n\t\t}\n\n\t\tfunction rotateUp( angle ) {\n\n\t\t\tsphericalDelta.phi -= angle;\n\n\t\t}\n\n\t\tconst panLeft = function () {\n\n\t\t\tconst v = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n\n\t\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\t\tv.multiplyScalar( - distance );\n\n\t\t\t\tpanOffset.add( v );\n\n\t\t\t};\n\n\t\t}();\n\n\t\tconst panUp = function () {\n\n\t\t\tconst v = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n\n\t\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t\t}\n\n\t\t\t\tv.multiplyScalar( distance );\n\n\t\t\t\tpanOffset.add( v );\n\n\t\t\t};\n\n\t\t}();\n\n\t\t// deltaX and deltaY are in pixels; right and down are positive\n\t\tconst pan = function () {\n\n\t\t\tconst offset = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n\n\t\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\t\tconst element = scope.domElement;\n\n\t\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t\t// perspective\n\t\t\t\t\tconst position = scope.object.position;\n\t\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\t\tlet targetDistance = offset.length();\n\n\t\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t\t// orthographic\n\t\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\t\tscope.enablePan = false;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}();\n\n\t\tfunction dollyOut( dollyScale ) {\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\tscale /= dollyScale;\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction dollyIn( dollyScale ) {\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\tscale *= dollyScale;\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\t\t// event callbacks - update the object state\n\t\t//\n\n\t\tfunction handleMouseDownRotate( event ) {\n\n\t\t\trotateStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseDownDolly( event ) {\n\n\t\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseDownPan( event ) {\n\n\t\t\tpanStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseMoveRotate( event ) {\n\n\t\t\trotateEnd.set( event.clientX, event.clientY );\n\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\t\tconst element = scope.domElement;\n\n\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseMoveDolly( event ) {\n\n\t\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseMovePan( event ) {\n\n\t\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseWheel( event ) {\n\n\t\t\tif ( event.deltaY < 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleKeyDown( event ) {\n\n\t\t\tlet needsUpdate = false;\n\n\t\t\tswitch ( event.code ) {\n\n\t\t\t\tcase scope.keys.UP:\n\t\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.LEFT:\n\t\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.RIGHT:\n\t\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\tscope.update();\n\n\t\t\t}\n\n\n\t\t}\n\n\t\tfunction handleTouchStartRotate() {\n\n\t\t\tif ( pointers.length === 1 ) {\n\n\t\t\t\trotateStart.set( pointers[ 0 ].pageX, pointers[ 0 ].pageY );\n\n\t\t\t} else {\n\n\t\t\t\tconst x = 0.5 * ( pointers[ 0 ].pageX + pointers[ 1 ].pageX );\n\t\t\t\tconst y = 0.5 * ( pointers[ 0 ].pageY + pointers[ 1 ].pageY );\n\n\t\t\t\trotateStart.set( x, y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction handleTouchStartPan() {\n\n\t\t\tif ( pointers.length === 1 ) {\n\n\t\t\t\tpanStart.set( pointers[ 0 ].pageX, pointers[ 0 ].pageY );\n\n\t\t\t} else {\n\n\t\t\t\tconst x = 0.5 * ( pointers[ 0 ].pageX + pointers[ 1 ].pageX );\n\t\t\t\tconst y = 0.5 * ( pointers[ 0 ].pageY + pointers[ 1 ].pageY );\n\n\t\t\t\tpanStart.set( x, y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction handleTouchStartDolly() {\n\n\t\t\tconst dx = pointers[ 0 ].pageX - pointers[ 1 ].pageX;\n\t\t\tconst dy = pointers[ 0 ].pageY - pointers[ 1 ].pageY;\n\n\t\t\tconst distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyStart.set( 0, distance );\n\n\t\t}\n\n\t\tfunction handleTouchStartDollyPan() {\n\n\t\t\tif ( scope.enableZoom ) handleTouchStartDolly();\n\n\t\t\tif ( scope.enablePan ) handleTouchStartPan();\n\n\t\t}\n\n\t\tfunction handleTouchStartDollyRotate() {\n\n\t\t\tif ( scope.enableZoom ) handleTouchStartDolly();\n\n\t\t\tif ( scope.enableRotate ) handleTouchStartRotate();\n\n\t\t}\n\n\t\tfunction handleTouchMoveRotate( event ) {\n\n\t\t\tif ( pointers.length == 1 ) {\n\n\t\t\t\trotateEnd.set( event.pageX, event.pageY );\n\n\t\t\t} else {\n\n\t\t\t\tconst position = getSecondPointerPosition( event );\n\n\t\t\t\tconst x = 0.5 * ( event.pageX + position.x );\n\t\t\t\tconst y = 0.5 * ( event.pageY + position.y );\n\n\t\t\t\trotateEnd.set( x, y );\n\n\t\t\t}\n\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\t\tconst element = scope.domElement;\n\n\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t}\n\n\t\tfunction handleTouchMovePan( event ) {\n\n\t\t\tif ( pointers.length === 1 ) {\n\n\t\t\t\tpanEnd.set( event.pageX, event.pageY );\n\n\t\t\t} else {\n\n\t\t\t\tconst position = getSecondPointerPosition( event );\n\n\t\t\t\tconst x = 0.5 * ( event.pageX + position.x );\n\t\t\t\tconst y = 0.5 * ( event.pageY + position.y );\n\n\t\t\t\tpanEnd.set( x, y );\n\n\t\t\t}\n\n\t\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t}\n\n\t\tfunction handleTouchMoveDolly( event ) {\n\n\t\t\tconst position = getSecondPointerPosition( event );\n\n\t\t\tconst dx = event.pageX - position.x;\n\t\t\tconst dy = event.pageY - position.y;\n\n\t\t\tconst distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyEnd.set( 0, distance );\n\n\t\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n\t\t\tdollyOut( dollyDelta.y );\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t}\n\n\t\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\t\tif ( scope.enablePan ) handleTouchMovePan( event );\n\n\t\t}\n\n\t\tfunction handleTouchMoveDollyRotate( event ) {\n\n\t\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\t\tif ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n\t\t}\n\n\t\t//\n\t\t// event handlers - FSM: listen for events and reset state\n\t\t//\n\n\t\tfunction onPointerDown( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tif ( pointers.length === 0 ) {\n\n\t\t\t\tscope.domElement.setPointerCapture( event.pointerId );\n\n\t\t\t\tscope.domElement.addEventListener( 'pointermove', onPointerMove );\n\t\t\t\tscope.domElement.addEventListener( 'pointerup', onPointerUp );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\taddPointer( event );\n\n\t\t\tif ( event.pointerType === 'touch' ) {\n\n\t\t\t\tonTouchStart( event );\n\n\t\t\t} else {\n\n\t\t\t\tonMouseDown( event );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onPointerMove( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tif ( event.pointerType === 'touch' ) {\n\n\t\t\t\tonTouchMove( event );\n\n\t\t\t} else {\n\n\t\t\t\tonMouseMove( event );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onPointerUp( event ) {\n\n\t\t    removePointer( event );\n\n\t\t    if ( pointers.length === 0 ) {\n\n\t\t        scope.domElement.releasePointerCapture( event.pointerId );\n\n\t\t        scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n\t\t        scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n\t\t    }\n\n\t\t    scope.dispatchEvent( _endEvent );\n\n\t\t    state = STATE.NONE;\n\n\t\t}\n\n\t\tfunction onPointerCancel( event ) {\n\n\t\t\tremovePointer( event );\n\n\t\t}\n\n\t\tfunction onMouseDown( event ) {\n\n\t\t\tlet mouseAction;\n\n\t\t\tswitch ( event.button ) {\n\n\t\t\t\tcase 0:\n\n\t\t\t\t\tmouseAction = scope.mouseButtons.LEFT;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\n\t\t\t\t\tmouseAction = scope.mouseButtons.MIDDLE;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\n\t\t\t\t\tmouseAction = scope.mouseButtons.RIGHT;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tmouseAction = - 1;\n\n\t\t\t}\n\n\t\t\tswitch ( mouseAction ) {\n\n\t\t\t\tcase _three_module_js__WEBPACK_IMPORTED_MODULE_0__.MOUSE.DOLLY:\n\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase _three_module_js__WEBPACK_IMPORTED_MODULE_0__.MOUSE.ROTATE:\n\n\t\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase _three_module_js__WEBPACK_IMPORTED_MODULE_0__.MOUSE.PAN:\n\n\t\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t\tif ( state !== STATE.NONE ) {\n\n\t\t\t\tscope.dispatchEvent( _startEvent );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onMouseMove( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tswitch ( state ) {\n\n\t\t\t\tcase STATE.ROTATE:\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase STATE.DOLLY:\n\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase STATE.PAN:\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onMouseWheel( event ) {\n\n\t\t\tif ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\n\n\t\t\tevent.preventDefault();\n\n\t\t\tscope.dispatchEvent( _startEvent );\n\n\t\t\thandleMouseWheel( event );\n\n\t\t\tscope.dispatchEvent( _endEvent );\n\n\t\t}\n\n\t\tfunction onKeyDown( event ) {\n\n\t\t\tif ( scope.enabled === false || scope.enablePan === false ) return;\n\n\t\t\thandleKeyDown( event );\n\n\t\t}\n\n\t\tfunction onTouchStart( event ) {\n\n\t\t\ttrackPointer( event );\n\n\t\t\tswitch ( pointers.length ) {\n\n\t\t\t\tcase 1:\n\n\t\t\t\t\tswitch ( scope.touches.ONE ) {\n\n\t\t\t\t\t\tcase _three_module_js__WEBPACK_IMPORTED_MODULE_0__.TOUCH.ROTATE:\n\n\t\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\t\thandleTouchStartRotate();\n\n\t\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase _three_module_js__WEBPACK_IMPORTED_MODULE_0__.TOUCH.PAN:\n\n\t\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\t\thandleTouchStartPan();\n\n\t\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\n\t\t\t\t\tswitch ( scope.touches.TWO ) {\n\n\t\t\t\t\t\tcase _three_module_js__WEBPACK_IMPORTED_MODULE_0__.TOUCH.DOLLY_PAN:\n\n\t\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\t\t\t\thandleTouchStartDollyPan();\n\n\t\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase _three_module_js__WEBPACK_IMPORTED_MODULE_0__.TOUCH.DOLLY_ROTATE:\n\n\t\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\t\t\t\thandleTouchStartDollyRotate();\n\n\t\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_ROTATE;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t\tif ( state !== STATE.NONE ) {\n\n\t\t\t\tscope.dispatchEvent( _startEvent );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onTouchMove( event ) {\n\n\t\t\ttrackPointer( event );\n\n\t\t\tswitch ( state ) {\n\n\t\t\t\tcase STATE.TOUCH_ROTATE:\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\t\tscope.update();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase STATE.TOUCH_PAN:\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\t\tscope.update();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase STATE.TOUCH_DOLLY_PAN:\n\n\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\t\thandleTouchMoveDollyPan( event );\n\n\t\t\t\t\tscope.update();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase STATE.TOUCH_DOLLY_ROTATE:\n\n\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleTouchMoveDollyRotate( event );\n\n\t\t\t\t\tscope.update();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onContextMenu( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\n\t\t}\n\n\t\tfunction addPointer( event ) {\n\n\t\t\tpointers.push( event );\n\n\t\t}\n\n\t\tfunction removePointer( event ) {\n\n\t\t\tdelete pointerPositions[ event.pointerId ];\n\n\t\t\tfor ( let i = 0; i < pointers.length; i ++ ) {\n\n\t\t\t\tif ( pointers[ i ].pointerId == event.pointerId ) {\n\n\t\t\t\t\tpointers.splice( i, 1 );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction trackPointer( event ) {\n\n\t\t\tlet position = pointerPositions[ event.pointerId ];\n\n\t\t\tif ( position === undefined ) {\n\n\t\t\t\tposition = new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n\t\t\t\tpointerPositions[ event.pointerId ] = position;\n\n\t\t\t}\n\n\t\t\tposition.set( event.pageX, event.pageY );\n\n\t\t}\n\n\t\tfunction getSecondPointerPosition( event ) {\n\n\t\t\tconst pointer = ( event.pointerId === pointers[ 0 ].pointerId ) ? pointers[ 1 ] : pointers[ 0 ];\n\n\t\t\treturn pointerPositions[ pointer.pointerId ];\n\n\t\t}\n\n\t\t//\n\n\t\tscope.domElement.addEventListener( 'contextmenu', onContextMenu );\n\n\t\tscope.domElement.addEventListener( 'pointerdown', onPointerDown );\n\t\tscope.domElement.addEventListener( 'pointercancel', onPointerCancel );\n\t\tscope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\n\n\t\t// force an update at start\n\n\t\tthis.update();\n\n\t}\n\n}\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nclass MapControls extends OrbitControls {\n\n\tconstructor( object, domElement ) {\n\n\t\tsuper( object, domElement );\n\n\t\tthis.screenSpacePanning = false; // pan orthogonal to world-space direction camera.up\n\n\t\tthis.mouseButtons.LEFT = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.MOUSE.PAN;\n\t\tthis.mouseButtons.RIGHT = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.MOUSE.ROTATE;\n\n\t\tthis.touches.ONE = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.TOUCH.PAN;\n\t\tthis.touches.TWO = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.TOUCH.DOLLY_ROTATE;\n\n\t}\n\n}\n\n\n\n//# sourceURL=webpack://starter-kit/./app/components/animation/src/OrbitControls.js?");

/***/ }),

/***/ "./app/components/animation/src/RGBELoader.js":
/*!****************************************************!*\
  !*** ./app/components/animation/src/RGBELoader.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RGBELoader\": () => (/* binding */ RGBELoader)\n/* harmony export */ });\n/* harmony import */ var _three_module_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./three.module.js */ \"./app/components/animation/src/three.module.js\");\n\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends _three_module_js__WEBPACK_IMPORTED_MODULE_0__.DataTextureLoader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.type = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.HalfFloatType;\n\n\t}\n\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\tparse( buffer ) {\n\n\t\tconst\n\t\t\t/* return codes for rgbe routines */\n\t\t\t//RGBE_RETURN_SUCCESS = 0,\n\t\t\tRGBE_RETURN_FAILURE = - 1,\n\n\t\t\t/* default error routine.  change this to change error handling */\n\t\t\trgbe_read_error = 1,\n\t\t\trgbe_write_error = 2,\n\t\t\trgbe_format_error = 3,\n\t\t\trgbe_memory_error = 4,\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\tcase rgbe_read_error: console.error( 'THREE.RGBELoader Read Error: ' + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_write_error: console.error( 'THREE.RGBELoader Write Error: ' + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_format_error: console.error( 'THREE.RGBELoader Bad File Format: ' + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase rgbe_memory_error: console.error( 'THREE.RGBELoader: Error: ' + ( msg || '' ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn RGBE_RETURN_FAILURE;\n\n\t\t\t},\n\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\t\tNEWLINE = '\\n',\n\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\tconst chunkSize = 128;\n\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\tlet p = buffer.pos,\n\t\t\t\t\ti = - 1, len = 0, s = '',\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\t\tp += chunkSize;\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\n\t\t\t\t// regexes to parse header info fields\n\t\t\t\tconst magic_token_re = /^#\\?(\\S+)/,\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\theader = {\n\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t\t};\n\n\t\t\t\tlet line, match;\n\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_read_error, 'no header found' );\n\n\t\t\t\t}\n\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'bad initial token' );\n\n\t\t\t\t}\n\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\twhile ( true ) {\n\n\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\theader.comments += line + '\\n';\n\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'missing format specifier' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'missing image size specifier' );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t},\n\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\tconst scanline_width = w;\n\n\t\t\t\tif (\n\t\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t\t// this file is not run length encoded\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t\t) {\n\n\t\t\t\t\t// return the flat buffer\n\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'wrong scanline width' );\n\n\t\t\t\t}\n\n\t\t\t\tconst data_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\tif ( ! data_rgba.length ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_memory_error, 'unable to allocate buffer space' );\n\n\t\t\t\t}\n\n\t\t\t\tlet offset = 0, pos = 0;\n\n\t\t\t\tconst ptr_end = 4 * scanline_width;\n\t\t\t\tconst rgbeStart = new Uint8Array( 4 );\n\t\t\t\tconst scanline_buffer = new Uint8Array( ptr_end );\n\t\t\t\tlet num_scanlines = h;\n\n\t\t\t\t// read in each successive scanline\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_read_error );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'bad rgbe scanline format' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\t\tlet ptr = 0, count;\n\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\tconst isEncodedRun = count > 128;\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'bad scanline data' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\tconst byteValue = buffer[ pos ++ ];\n\t\t\t\t\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\t\tconst l = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\t\tfor ( let i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\tlet off = 0;\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t}\n\n\t\t\t\treturn data_rgba;\n\n\t\t\t};\n\n\t\tconst RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\n\t\t};\n\n\t\tconst RGBEByteToRGBHalf = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t// clamping to 65504, the maximum representable value in float16\n\t\t\tdestArray[ destOffset + 0 ] = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 0 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 1 ] = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 1 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 2 ] = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 2 ] * scale, 65504 ) );\n\n\t\t};\n\n\t\tconst byteArray = new Uint8Array( buffer );\n\t\tbyteArray.pos = 0;\n\t\tconst rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\tif ( RGBE_RETURN_FAILURE !== rgbe_header_info ) {\n\n\t\t\tconst w = rgbe_header_info.width,\n\t\t\t\th = rgbe_header_info.height,\n\t\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\t\t\tif ( RGBE_RETURN_FAILURE !== image_rgba_data ) {\n\n\t\t\t\tlet data, format, type;\n\t\t\t\tlet numElements;\n\n\t\t\t\tswitch ( this.type ) {\n\n\t\t\t\t\tcase _three_module_js__WEBPACK_IMPORTED_MODULE_0__.UnsignedByteType:\n\n\t\t\t\t\t\tdata = image_rgba_data;\n\t\t\t\t\t\tformat = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.RGBEFormat; // handled as THREE.RGBAFormat in shaders\n\t\t\t\t\t\ttype = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.UnsignedByteType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase _three_module_js__WEBPACK_IMPORTED_MODULE_0__.FloatType:\n\n\t\t\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\t\t\tconst floatArray = new Float32Array( numElements * 3 );\n\n\t\t\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdata = floatArray;\n\t\t\t\t\t\tformat = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.RGBFormat;\n\t\t\t\t\t\ttype = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.FloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase _three_module_js__WEBPACK_IMPORTED_MODULE_0__.HalfFloatType:\n\n\t\t\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\t\t\tconst halfArray = new Uint16Array( numElements * 3 );\n\n\t\t\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdata = halfArray;\n\t\t\t\t\t\tformat = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.RGBFormat;\n\t\t\t\t\t\ttype = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.HalfFloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader: unsupported type: ', this.type );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\twidth: w, height: h,\n\t\t\t\t\tdata: data,\n\t\t\t\t\theader: rgbe_header_info.string,\n\t\t\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\t\t\texposure: rgbe_header_info.exposure,\n\t\t\t\t\tformat: format,\n\t\t\t\t\ttype: type\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\tsetDataType( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase _three_module_js__WEBPACK_IMPORTED_MODULE_0__.UnsignedByteType:\n\n\t\t\t\t\ttexture.encoding = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.RGBEEncoding;\n\t\t\t\t\ttexture.minFilter = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.NearestFilter;\n\t\t\t\t\ttexture.magFilter = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.NearestFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase _three_module_js__WEBPACK_IMPORTED_MODULE_0__.FloatType:\n\n\t\t\t\t\ttexture.encoding = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.LinearEncoding;\n\t\t\t\t\ttexture.minFilter = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.LinearFilter;\n\t\t\t\t\ttexture.magFilter = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase _three_module_js__WEBPACK_IMPORTED_MODULE_0__.HalfFloatType:\n\n\t\t\t\t\ttexture.encoding = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.LinearEncoding;\n\t\t\t\t\ttexture.minFilter = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.LinearFilter;\n\t\t\t\t\ttexture.magFilter = _three_module_js__WEBPACK_IMPORTED_MODULE_0__.LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn super.load( url, onLoadCallback, onProgress, onError );\n\n\t}\n\n}\n\n\n\n//# sourceURL=webpack://starter-kit/./app/components/animation/src/RGBELoader.js?");

/***/ }),

/***/ "./app/components/animation/src/TextGeometry.js":
/*!******************************************************!*\
  !*** ./app/components/animation/src/TextGeometry.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TextGeometry\": () => (/* binding */ TextGeometry)\n/* harmony export */ });\n/* harmony import */ var _three_module_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./three.module.js */ \"./app/components/animation/src/three.module.js\");\n/**\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  height: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n *  bevelOffset: <float> // how far from text outline does bevel start\n * }\n */\n\n \n\nclass TextGeometry extends _three_module_js__WEBPACK_IMPORTED_MODULE_0__.ExtrudeGeometry {\n\n\tconstructor( text, parameters = {} ) {\n\n\t\tconst font = parameters.font;\n\n\t\tif ( ! ( font && font.isFont ) ) {\n\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\t\treturn new _three_module_js__WEBPACK_IMPORTED_MODULE_0__.BufferGeometry();\n\n\t\t}\n\n\t\tconst shapes = font.generateShapes( text, parameters.size );\n\n\t\t// translate parameters to ExtrudeGeometry API\n\n\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\n\n\t\t// defaults\n\n\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\t\tsuper( shapes, parameters );\n\n\t\tthis.type = 'TextGeometry';\n\n\t}\n\n}\n\n\n\n\n//# sourceURL=webpack://starter-kit/./app/components/animation/src/TextGeometry.js?");

/***/ }),

/***/ "./app/components/animation/src/three.module.js":
/*!******************************************************!*\
  !*** ./app/components/animation/src/three.module.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ACESFilmicToneMapping\": () => (/* binding */ ACESFilmicToneMapping),\n/* harmony export */   \"AddEquation\": () => (/* binding */ AddEquation),\n/* harmony export */   \"AddOperation\": () => (/* binding */ AddOperation),\n/* harmony export */   \"AdditiveAnimationBlendMode\": () => (/* binding */ AdditiveAnimationBlendMode),\n/* harmony export */   \"AdditiveBlending\": () => (/* binding */ AdditiveBlending),\n/* harmony export */   \"AlphaFormat\": () => (/* binding */ AlphaFormat),\n/* harmony export */   \"AlwaysDepth\": () => (/* binding */ AlwaysDepth),\n/* harmony export */   \"AlwaysStencilFunc\": () => (/* binding */ AlwaysStencilFunc),\n/* harmony export */   \"AmbientLight\": () => (/* binding */ AmbientLight),\n/* harmony export */   \"AmbientLightProbe\": () => (/* binding */ AmbientLightProbe),\n/* harmony export */   \"AnimationClip\": () => (/* binding */ AnimationClip),\n/* harmony export */   \"AnimationLoader\": () => (/* binding */ AnimationLoader),\n/* harmony export */   \"AnimationMixer\": () => (/* binding */ AnimationMixer),\n/* harmony export */   \"AnimationObjectGroup\": () => (/* binding */ AnimationObjectGroup),\n/* harmony export */   \"AnimationUtils\": () => (/* binding */ AnimationUtils),\n/* harmony export */   \"ArcCurve\": () => (/* binding */ ArcCurve),\n/* harmony export */   \"ArrayCamera\": () => (/* binding */ ArrayCamera),\n/* harmony export */   \"ArrowHelper\": () => (/* binding */ ArrowHelper),\n/* harmony export */   \"Audio\": () => (/* binding */ Audio),\n/* harmony export */   \"AudioAnalyser\": () => (/* binding */ AudioAnalyser),\n/* harmony export */   \"AudioContext\": () => (/* binding */ AudioContext),\n/* harmony export */   \"AudioListener\": () => (/* binding */ AudioListener),\n/* harmony export */   \"AudioLoader\": () => (/* binding */ AudioLoader),\n/* harmony export */   \"AxesHelper\": () => (/* binding */ AxesHelper),\n/* harmony export */   \"AxisHelper\": () => (/* binding */ AxisHelper),\n/* harmony export */   \"BackSide\": () => (/* binding */ BackSide),\n/* harmony export */   \"BasicDepthPacking\": () => (/* binding */ BasicDepthPacking),\n/* harmony export */   \"BasicShadowMap\": () => (/* binding */ BasicShadowMap),\n/* harmony export */   \"BinaryTextureLoader\": () => (/* binding */ BinaryTextureLoader),\n/* harmony export */   \"Bone\": () => (/* binding */ Bone),\n/* harmony export */   \"BooleanKeyframeTrack\": () => (/* binding */ BooleanKeyframeTrack),\n/* harmony export */   \"BoundingBoxHelper\": () => (/* binding */ BoundingBoxHelper),\n/* harmony export */   \"Box2\": () => (/* binding */ Box2),\n/* harmony export */   \"Box3\": () => (/* binding */ Box3),\n/* harmony export */   \"Box3Helper\": () => (/* binding */ Box3Helper),\n/* harmony export */   \"BoxBufferGeometry\": () => (/* binding */ BoxGeometry),\n/* harmony export */   \"BoxGeometry\": () => (/* binding */ BoxGeometry),\n/* harmony export */   \"BoxHelper\": () => (/* binding */ BoxHelper),\n/* harmony export */   \"BufferAttribute\": () => (/* binding */ BufferAttribute),\n/* harmony export */   \"BufferGeometry\": () => (/* binding */ BufferGeometry),\n/* harmony export */   \"BufferGeometryLoader\": () => (/* binding */ BufferGeometryLoader),\n/* harmony export */   \"ByteType\": () => (/* binding */ ByteType),\n/* harmony export */   \"Cache\": () => (/* binding */ Cache),\n/* harmony export */   \"Camera\": () => (/* binding */ Camera),\n/* harmony export */   \"CameraHelper\": () => (/* binding */ CameraHelper),\n/* harmony export */   \"CanvasRenderer\": () => (/* binding */ CanvasRenderer),\n/* harmony export */   \"CanvasTexture\": () => (/* binding */ CanvasTexture),\n/* harmony export */   \"CatmullRomCurve3\": () => (/* binding */ CatmullRomCurve3),\n/* harmony export */   \"CineonToneMapping\": () => (/* binding */ CineonToneMapping),\n/* harmony export */   \"CircleBufferGeometry\": () => (/* binding */ CircleGeometry),\n/* harmony export */   \"CircleGeometry\": () => (/* binding */ CircleGeometry),\n/* harmony export */   \"ClampToEdgeWrapping\": () => (/* binding */ ClampToEdgeWrapping),\n/* harmony export */   \"Clock\": () => (/* binding */ Clock),\n/* harmony export */   \"Color\": () => (/* binding */ Color),\n/* harmony export */   \"ColorKeyframeTrack\": () => (/* binding */ ColorKeyframeTrack),\n/* harmony export */   \"CompressedTexture\": () => (/* binding */ CompressedTexture),\n/* harmony export */   \"CompressedTextureLoader\": () => (/* binding */ CompressedTextureLoader),\n/* harmony export */   \"ConeBufferGeometry\": () => (/* binding */ ConeGeometry),\n/* harmony export */   \"ConeGeometry\": () => (/* binding */ ConeGeometry),\n/* harmony export */   \"CubeCamera\": () => (/* binding */ CubeCamera),\n/* harmony export */   \"CubeReflectionMapping\": () => (/* binding */ CubeReflectionMapping),\n/* harmony export */   \"CubeRefractionMapping\": () => (/* binding */ CubeRefractionMapping),\n/* harmony export */   \"CubeTexture\": () => (/* binding */ CubeTexture),\n/* harmony export */   \"CubeTextureLoader\": () => (/* binding */ CubeTextureLoader),\n/* harmony export */   \"CubeUVReflectionMapping\": () => (/* binding */ CubeUVReflectionMapping),\n/* harmony export */   \"CubeUVRefractionMapping\": () => (/* binding */ CubeUVRefractionMapping),\n/* harmony export */   \"CubicBezierCurve\": () => (/* binding */ CubicBezierCurve),\n/* harmony export */   \"CubicBezierCurve3\": () => (/* binding */ CubicBezierCurve3),\n/* harmony export */   \"CubicInterpolant\": () => (/* binding */ CubicInterpolant),\n/* harmony export */   \"CullFaceBack\": () => (/* binding */ CullFaceBack),\n/* harmony export */   \"CullFaceFront\": () => (/* binding */ CullFaceFront),\n/* harmony export */   \"CullFaceFrontBack\": () => (/* binding */ CullFaceFrontBack),\n/* harmony export */   \"CullFaceNone\": () => (/* binding */ CullFaceNone),\n/* harmony export */   \"Curve\": () => (/* binding */ Curve),\n/* harmony export */   \"CurvePath\": () => (/* binding */ CurvePath),\n/* harmony export */   \"CustomBlending\": () => (/* binding */ CustomBlending),\n/* harmony export */   \"CustomToneMapping\": () => (/* binding */ CustomToneMapping),\n/* harmony export */   \"CylinderBufferGeometry\": () => (/* binding */ CylinderGeometry),\n/* harmony export */   \"CylinderGeometry\": () => (/* binding */ CylinderGeometry),\n/* harmony export */   \"Cylindrical\": () => (/* binding */ Cylindrical),\n/* harmony export */   \"DataTexture\": () => (/* binding */ DataTexture),\n/* harmony export */   \"DataTexture2DArray\": () => (/* binding */ DataTexture2DArray),\n/* harmony export */   \"DataTexture3D\": () => (/* binding */ DataTexture3D),\n/* harmony export */   \"DataTextureLoader\": () => (/* binding */ DataTextureLoader),\n/* harmony export */   \"DataUtils\": () => (/* binding */ DataUtils),\n/* harmony export */   \"DecrementStencilOp\": () => (/* binding */ DecrementStencilOp),\n/* harmony export */   \"DecrementWrapStencilOp\": () => (/* binding */ DecrementWrapStencilOp),\n/* harmony export */   \"DefaultLoadingManager\": () => (/* binding */ DefaultLoadingManager),\n/* harmony export */   \"DepthFormat\": () => (/* binding */ DepthFormat),\n/* harmony export */   \"DepthStencilFormat\": () => (/* binding */ DepthStencilFormat),\n/* harmony export */   \"DepthTexture\": () => (/* binding */ DepthTexture),\n/* harmony export */   \"DirectionalLight\": () => (/* binding */ DirectionalLight),\n/* harmony export */   \"DirectionalLightHelper\": () => (/* binding */ DirectionalLightHelper),\n/* harmony export */   \"DiscreteInterpolant\": () => (/* binding */ DiscreteInterpolant),\n/* harmony export */   \"DodecahedronBufferGeometry\": () => (/* binding */ DodecahedronGeometry),\n/* harmony export */   \"DodecahedronGeometry\": () => (/* binding */ DodecahedronGeometry),\n/* harmony export */   \"DoubleSide\": () => (/* binding */ DoubleSide),\n/* harmony export */   \"DstAlphaFactor\": () => (/* binding */ DstAlphaFactor),\n/* harmony export */   \"DstColorFactor\": () => (/* binding */ DstColorFactor),\n/* harmony export */   \"DynamicBufferAttribute\": () => (/* binding */ DynamicBufferAttribute),\n/* harmony export */   \"DynamicCopyUsage\": () => (/* binding */ DynamicCopyUsage),\n/* harmony export */   \"DynamicDrawUsage\": () => (/* binding */ DynamicDrawUsage),\n/* harmony export */   \"DynamicReadUsage\": () => (/* binding */ DynamicReadUsage),\n/* harmony export */   \"EdgesGeometry\": () => (/* binding */ EdgesGeometry),\n/* harmony export */   \"EdgesHelper\": () => (/* binding */ EdgesHelper),\n/* harmony export */   \"EllipseCurve\": () => (/* binding */ EllipseCurve),\n/* harmony export */   \"EqualDepth\": () => (/* binding */ EqualDepth),\n/* harmony export */   \"EqualStencilFunc\": () => (/* binding */ EqualStencilFunc),\n/* harmony export */   \"EquirectangularReflectionMapping\": () => (/* binding */ EquirectangularReflectionMapping),\n/* harmony export */   \"EquirectangularRefractionMapping\": () => (/* binding */ EquirectangularRefractionMapping),\n/* harmony export */   \"Euler\": () => (/* binding */ Euler),\n/* harmony export */   \"EventDispatcher\": () => (/* binding */ EventDispatcher),\n/* harmony export */   \"ExtrudeBufferGeometry\": () => (/* binding */ ExtrudeGeometry),\n/* harmony export */   \"ExtrudeGeometry\": () => (/* binding */ ExtrudeGeometry),\n/* harmony export */   \"FaceColors\": () => (/* binding */ FaceColors),\n/* harmony export */   \"FileLoader\": () => (/* binding */ FileLoader),\n/* harmony export */   \"FlatShading\": () => (/* binding */ FlatShading),\n/* harmony export */   \"Float16BufferAttribute\": () => (/* binding */ Float16BufferAttribute),\n/* harmony export */   \"Float32Attribute\": () => (/* binding */ Float32Attribute),\n/* harmony export */   \"Float32BufferAttribute\": () => (/* binding */ Float32BufferAttribute),\n/* harmony export */   \"Float64Attribute\": () => (/* binding */ Float64Attribute),\n/* harmony export */   \"Float64BufferAttribute\": () => (/* binding */ Float64BufferAttribute),\n/* harmony export */   \"FloatType\": () => (/* binding */ FloatType),\n/* harmony export */   \"Fog\": () => (/* binding */ Fog),\n/* harmony export */   \"FogExp2\": () => (/* binding */ FogExp2),\n/* harmony export */   \"Font\": () => (/* binding */ Font),\n/* harmony export */   \"FontLoader\": () => (/* binding */ FontLoader),\n/* harmony export */   \"FrontSide\": () => (/* binding */ FrontSide),\n/* harmony export */   \"Frustum\": () => (/* binding */ Frustum),\n/* harmony export */   \"GLBufferAttribute\": () => (/* binding */ GLBufferAttribute),\n/* harmony export */   \"GLSL1\": () => (/* binding */ GLSL1),\n/* harmony export */   \"GLSL3\": () => (/* binding */ GLSL3),\n/* harmony export */   \"GammaEncoding\": () => (/* binding */ GammaEncoding),\n/* harmony export */   \"GreaterDepth\": () => (/* binding */ GreaterDepth),\n/* harmony export */   \"GreaterEqualDepth\": () => (/* binding */ GreaterEqualDepth),\n/* harmony export */   \"GreaterEqualStencilFunc\": () => (/* binding */ GreaterEqualStencilFunc),\n/* harmony export */   \"GreaterStencilFunc\": () => (/* binding */ GreaterStencilFunc),\n/* harmony export */   \"GridHelper\": () => (/* binding */ GridHelper),\n/* harmony export */   \"Group\": () => (/* binding */ Group),\n/* harmony export */   \"HalfFloatType\": () => (/* binding */ HalfFloatType),\n/* harmony export */   \"HemisphereLight\": () => (/* binding */ HemisphereLight),\n/* harmony export */   \"HemisphereLightHelper\": () => (/* binding */ HemisphereLightHelper),\n/* harmony export */   \"HemisphereLightProbe\": () => (/* binding */ HemisphereLightProbe),\n/* harmony export */   \"IcosahedronBufferGeometry\": () => (/* binding */ IcosahedronGeometry),\n/* harmony export */   \"IcosahedronGeometry\": () => (/* binding */ IcosahedronGeometry),\n/* harmony export */   \"ImageBitmapLoader\": () => (/* binding */ ImageBitmapLoader),\n/* harmony export */   \"ImageLoader\": () => (/* binding */ ImageLoader),\n/* harmony export */   \"ImageUtils\": () => (/* binding */ ImageUtils),\n/* harmony export */   \"ImmediateRenderObject\": () => (/* binding */ ImmediateRenderObject),\n/* harmony export */   \"IncrementStencilOp\": () => (/* binding */ IncrementStencilOp),\n/* harmony export */   \"IncrementWrapStencilOp\": () => (/* binding */ IncrementWrapStencilOp),\n/* harmony export */   \"InstancedBufferAttribute\": () => (/* binding */ InstancedBufferAttribute),\n/* harmony export */   \"InstancedBufferGeometry\": () => (/* binding */ InstancedBufferGeometry),\n/* harmony export */   \"InstancedInterleavedBuffer\": () => (/* binding */ InstancedInterleavedBuffer),\n/* harmony export */   \"InstancedMesh\": () => (/* binding */ InstancedMesh),\n/* harmony export */   \"Int16Attribute\": () => (/* binding */ Int16Attribute),\n/* harmony export */   \"Int16BufferAttribute\": () => (/* binding */ Int16BufferAttribute),\n/* harmony export */   \"Int32Attribute\": () => (/* binding */ Int32Attribute),\n/* harmony export */   \"Int32BufferAttribute\": () => (/* binding */ Int32BufferAttribute),\n/* harmony export */   \"Int8Attribute\": () => (/* binding */ Int8Attribute),\n/* harmony export */   \"Int8BufferAttribute\": () => (/* binding */ Int8BufferAttribute),\n/* harmony export */   \"IntType\": () => (/* binding */ IntType),\n/* harmony export */   \"InterleavedBuffer\": () => (/* binding */ InterleavedBuffer),\n/* harmony export */   \"InterleavedBufferAttribute\": () => (/* binding */ InterleavedBufferAttribute),\n/* harmony export */   \"Interpolant\": () => (/* binding */ Interpolant),\n/* harmony export */   \"InterpolateDiscrete\": () => (/* binding */ InterpolateDiscrete),\n/* harmony export */   \"InterpolateLinear\": () => (/* binding */ InterpolateLinear),\n/* harmony export */   \"InterpolateSmooth\": () => (/* binding */ InterpolateSmooth),\n/* harmony export */   \"InvertStencilOp\": () => (/* binding */ InvertStencilOp),\n/* harmony export */   \"JSONLoader\": () => (/* binding */ JSONLoader),\n/* harmony export */   \"KeepStencilOp\": () => (/* binding */ KeepStencilOp),\n/* harmony export */   \"KeyframeTrack\": () => (/* binding */ KeyframeTrack),\n/* harmony export */   \"LOD\": () => (/* binding */ LOD),\n/* harmony export */   \"LatheBufferGeometry\": () => (/* binding */ LatheGeometry),\n/* harmony export */   \"LatheGeometry\": () => (/* binding */ LatheGeometry),\n/* harmony export */   \"Layers\": () => (/* binding */ Layers),\n/* harmony export */   \"LensFlare\": () => (/* binding */ LensFlare),\n/* harmony export */   \"LessDepth\": () => (/* binding */ LessDepth),\n/* harmony export */   \"LessEqualDepth\": () => (/* binding */ LessEqualDepth),\n/* harmony export */   \"LessEqualStencilFunc\": () => (/* binding */ LessEqualStencilFunc),\n/* harmony export */   \"LessStencilFunc\": () => (/* binding */ LessStencilFunc),\n/* harmony export */   \"Light\": () => (/* binding */ Light),\n/* harmony export */   \"LightProbe\": () => (/* binding */ LightProbe),\n/* harmony export */   \"Line\": () => (/* binding */ Line),\n/* harmony export */   \"Line3\": () => (/* binding */ Line3),\n/* harmony export */   \"LineBasicMaterial\": () => (/* binding */ LineBasicMaterial),\n/* harmony export */   \"LineCurve\": () => (/* binding */ LineCurve),\n/* harmony export */   \"LineCurve3\": () => (/* binding */ LineCurve3),\n/* harmony export */   \"LineDashedMaterial\": () => (/* binding */ LineDashedMaterial),\n/* harmony export */   \"LineLoop\": () => (/* binding */ LineLoop),\n/* harmony export */   \"LinePieces\": () => (/* binding */ LinePieces),\n/* harmony export */   \"LineSegments\": () => (/* binding */ LineSegments),\n/* harmony export */   \"LineStrip\": () => (/* binding */ LineStrip),\n/* harmony export */   \"LinearEncoding\": () => (/* binding */ LinearEncoding),\n/* harmony export */   \"LinearFilter\": () => (/* binding */ LinearFilter),\n/* harmony export */   \"LinearInterpolant\": () => (/* binding */ LinearInterpolant),\n/* harmony export */   \"LinearMipMapLinearFilter\": () => (/* binding */ LinearMipMapLinearFilter),\n/* harmony export */   \"LinearMipMapNearestFilter\": () => (/* binding */ LinearMipMapNearestFilter),\n/* harmony export */   \"LinearMipmapLinearFilter\": () => (/* binding */ LinearMipmapLinearFilter),\n/* harmony export */   \"LinearMipmapNearestFilter\": () => (/* binding */ LinearMipmapNearestFilter),\n/* harmony export */   \"LinearToneMapping\": () => (/* binding */ LinearToneMapping),\n/* harmony export */   \"Loader\": () => (/* binding */ Loader),\n/* harmony export */   \"LoaderUtils\": () => (/* binding */ LoaderUtils),\n/* harmony export */   \"LoadingManager\": () => (/* binding */ LoadingManager),\n/* harmony export */   \"LoopOnce\": () => (/* binding */ LoopOnce),\n/* harmony export */   \"LoopPingPong\": () => (/* binding */ LoopPingPong),\n/* harmony export */   \"LoopRepeat\": () => (/* binding */ LoopRepeat),\n/* harmony export */   \"LuminanceAlphaFormat\": () => (/* binding */ LuminanceAlphaFormat),\n/* harmony export */   \"LuminanceFormat\": () => (/* binding */ LuminanceFormat),\n/* harmony export */   \"MOUSE\": () => (/* binding */ MOUSE),\n/* harmony export */   \"Material\": () => (/* binding */ Material),\n/* harmony export */   \"MaterialLoader\": () => (/* binding */ MaterialLoader),\n/* harmony export */   \"Math\": () => (/* binding */ MathUtils),\n/* harmony export */   \"MathUtils\": () => (/* binding */ MathUtils),\n/* harmony export */   \"Matrix3\": () => (/* binding */ Matrix3),\n/* harmony export */   \"Matrix4\": () => (/* binding */ Matrix4),\n/* harmony export */   \"MaxEquation\": () => (/* binding */ MaxEquation),\n/* harmony export */   \"Mesh\": () => (/* binding */ Mesh),\n/* harmony export */   \"MeshBasicMaterial\": () => (/* binding */ MeshBasicMaterial),\n/* harmony export */   \"MeshDepthMaterial\": () => (/* binding */ MeshDepthMaterial),\n/* harmony export */   \"MeshDistanceMaterial\": () => (/* binding */ MeshDistanceMaterial),\n/* harmony export */   \"MeshFaceMaterial\": () => (/* binding */ MeshFaceMaterial),\n/* harmony export */   \"MeshLambertMaterial\": () => (/* binding */ MeshLambertMaterial),\n/* harmony export */   \"MeshMatcapMaterial\": () => (/* binding */ MeshMatcapMaterial),\n/* harmony export */   \"MeshNormalMaterial\": () => (/* binding */ MeshNormalMaterial),\n/* harmony export */   \"MeshPhongMaterial\": () => (/* binding */ MeshPhongMaterial),\n/* harmony export */   \"MeshPhysicalMaterial\": () => (/* binding */ MeshPhysicalMaterial),\n/* harmony export */   \"MeshStandardMaterial\": () => (/* binding */ MeshStandardMaterial),\n/* harmony export */   \"MeshToonMaterial\": () => (/* binding */ MeshToonMaterial),\n/* harmony export */   \"MinEquation\": () => (/* binding */ MinEquation),\n/* harmony export */   \"MirroredRepeatWrapping\": () => (/* binding */ MirroredRepeatWrapping),\n/* harmony export */   \"MixOperation\": () => (/* binding */ MixOperation),\n/* harmony export */   \"MultiMaterial\": () => (/* binding */ MultiMaterial),\n/* harmony export */   \"MultiplyBlending\": () => (/* binding */ MultiplyBlending),\n/* harmony export */   \"MultiplyOperation\": () => (/* binding */ MultiplyOperation),\n/* harmony export */   \"NearestFilter\": () => (/* binding */ NearestFilter),\n/* harmony export */   \"NearestMipMapLinearFilter\": () => (/* binding */ NearestMipMapLinearFilter),\n/* harmony export */   \"NearestMipMapNearestFilter\": () => (/* binding */ NearestMipMapNearestFilter),\n/* harmony export */   \"NearestMipmapLinearFilter\": () => (/* binding */ NearestMipmapLinearFilter),\n/* harmony export */   \"NearestMipmapNearestFilter\": () => (/* binding */ NearestMipmapNearestFilter),\n/* harmony export */   \"NeverDepth\": () => (/* binding */ NeverDepth),\n/* harmony export */   \"NeverStencilFunc\": () => (/* binding */ NeverStencilFunc),\n/* harmony export */   \"NoBlending\": () => (/* binding */ NoBlending),\n/* harmony export */   \"NoColors\": () => (/* binding */ NoColors),\n/* harmony export */   \"NoToneMapping\": () => (/* binding */ NoToneMapping),\n/* harmony export */   \"NormalAnimationBlendMode\": () => (/* binding */ NormalAnimationBlendMode),\n/* harmony export */   \"NormalBlending\": () => (/* binding */ NormalBlending),\n/* harmony export */   \"NotEqualDepth\": () => (/* binding */ NotEqualDepth),\n/* harmony export */   \"NotEqualStencilFunc\": () => (/* binding */ NotEqualStencilFunc),\n/* harmony export */   \"NumberKeyframeTrack\": () => (/* binding */ NumberKeyframeTrack),\n/* harmony export */   \"Object3D\": () => (/* binding */ Object3D),\n/* harmony export */   \"ObjectLoader\": () => (/* binding */ ObjectLoader),\n/* harmony export */   \"ObjectSpaceNormalMap\": () => (/* binding */ ObjectSpaceNormalMap),\n/* harmony export */   \"OctahedronBufferGeometry\": () => (/* binding */ OctahedronGeometry),\n/* harmony export */   \"OctahedronGeometry\": () => (/* binding */ OctahedronGeometry),\n/* harmony export */   \"OneFactor\": () => (/* binding */ OneFactor),\n/* harmony export */   \"OneMinusDstAlphaFactor\": () => (/* binding */ OneMinusDstAlphaFactor),\n/* harmony export */   \"OneMinusDstColorFactor\": () => (/* binding */ OneMinusDstColorFactor),\n/* harmony export */   \"OneMinusSrcAlphaFactor\": () => (/* binding */ OneMinusSrcAlphaFactor),\n/* harmony export */   \"OneMinusSrcColorFactor\": () => (/* binding */ OneMinusSrcColorFactor),\n/* harmony export */   \"OrthographicCamera\": () => (/* binding */ OrthographicCamera),\n/* harmony export */   \"PCFShadowMap\": () => (/* binding */ PCFShadowMap),\n/* harmony export */   \"PCFSoftShadowMap\": () => (/* binding */ PCFSoftShadowMap),\n/* harmony export */   \"PMREMGenerator\": () => (/* binding */ PMREMGenerator),\n/* harmony export */   \"ParametricGeometry\": () => (/* binding */ ParametricGeometry),\n/* harmony export */   \"Particle\": () => (/* binding */ Particle),\n/* harmony export */   \"ParticleBasicMaterial\": () => (/* binding */ ParticleBasicMaterial),\n/* harmony export */   \"ParticleSystem\": () => (/* binding */ ParticleSystem),\n/* harmony export */   \"ParticleSystemMaterial\": () => (/* binding */ ParticleSystemMaterial),\n/* harmony export */   \"Path\": () => (/* binding */ Path),\n/* harmony export */   \"PerspectiveCamera\": () => (/* binding */ PerspectiveCamera),\n/* harmony export */   \"Plane\": () => (/* binding */ Plane),\n/* harmony export */   \"PlaneBufferGeometry\": () => (/* binding */ PlaneGeometry),\n/* harmony export */   \"PlaneGeometry\": () => (/* binding */ PlaneGeometry),\n/* harmony export */   \"PlaneHelper\": () => (/* binding */ PlaneHelper),\n/* harmony export */   \"PointCloud\": () => (/* binding */ PointCloud),\n/* harmony export */   \"PointCloudMaterial\": () => (/* binding */ PointCloudMaterial),\n/* harmony export */   \"PointLight\": () => (/* binding */ PointLight),\n/* harmony export */   \"PointLightHelper\": () => (/* binding */ PointLightHelper),\n/* harmony export */   \"Points\": () => (/* binding */ Points),\n/* harmony export */   \"PointsMaterial\": () => (/* binding */ PointsMaterial),\n/* harmony export */   \"PolarGridHelper\": () => (/* binding */ PolarGridHelper),\n/* harmony export */   \"PolyhedronBufferGeometry\": () => (/* binding */ PolyhedronGeometry),\n/* harmony export */   \"PolyhedronGeometry\": () => (/* binding */ PolyhedronGeometry),\n/* harmony export */   \"PositionalAudio\": () => (/* binding */ PositionalAudio),\n/* harmony export */   \"PropertyBinding\": () => (/* binding */ PropertyBinding),\n/* harmony export */   \"PropertyMixer\": () => (/* binding */ PropertyMixer),\n/* harmony export */   \"QuadraticBezierCurve\": () => (/* binding */ QuadraticBezierCurve),\n/* harmony export */   \"QuadraticBezierCurve3\": () => (/* binding */ QuadraticBezierCurve3),\n/* harmony export */   \"Quaternion\": () => (/* binding */ Quaternion),\n/* harmony export */   \"QuaternionKeyframeTrack\": () => (/* binding */ QuaternionKeyframeTrack),\n/* harmony export */   \"QuaternionLinearInterpolant\": () => (/* binding */ QuaternionLinearInterpolant),\n/* harmony export */   \"REVISION\": () => (/* binding */ REVISION),\n/* harmony export */   \"RGBADepthPacking\": () => (/* binding */ RGBADepthPacking),\n/* harmony export */   \"RGBAFormat\": () => (/* binding */ RGBAFormat),\n/* harmony export */   \"RGBAIntegerFormat\": () => (/* binding */ RGBAIntegerFormat),\n/* harmony export */   \"RGBA_ASTC_10x10_Format\": () => (/* binding */ RGBA_ASTC_10x10_Format),\n/* harmony export */   \"RGBA_ASTC_10x5_Format\": () => (/* binding */ RGBA_ASTC_10x5_Format),\n/* harmony export */   \"RGBA_ASTC_10x6_Format\": () => (/* binding */ RGBA_ASTC_10x6_Format),\n/* harmony export */   \"RGBA_ASTC_10x8_Format\": () => (/* binding */ RGBA_ASTC_10x8_Format),\n/* harmony export */   \"RGBA_ASTC_12x10_Format\": () => (/* binding */ RGBA_ASTC_12x10_Format),\n/* harmony export */   \"RGBA_ASTC_12x12_Format\": () => (/* binding */ RGBA_ASTC_12x12_Format),\n/* harmony export */   \"RGBA_ASTC_4x4_Format\": () => (/* binding */ RGBA_ASTC_4x4_Format),\n/* harmony export */   \"RGBA_ASTC_5x4_Format\": () => (/* binding */ RGBA_ASTC_5x4_Format),\n/* harmony export */   \"RGBA_ASTC_5x5_Format\": () => (/* binding */ RGBA_ASTC_5x5_Format),\n/* harmony export */   \"RGBA_ASTC_6x5_Format\": () => (/* binding */ RGBA_ASTC_6x5_Format),\n/* harmony export */   \"RGBA_ASTC_6x6_Format\": () => (/* binding */ RGBA_ASTC_6x6_Format),\n/* harmony export */   \"RGBA_ASTC_8x5_Format\": () => (/* binding */ RGBA_ASTC_8x5_Format),\n/* harmony export */   \"RGBA_ASTC_8x6_Format\": () => (/* binding */ RGBA_ASTC_8x6_Format),\n/* harmony export */   \"RGBA_ASTC_8x8_Format\": () => (/* binding */ RGBA_ASTC_8x8_Format),\n/* harmony export */   \"RGBA_BPTC_Format\": () => (/* binding */ RGBA_BPTC_Format),\n/* harmony export */   \"RGBA_ETC2_EAC_Format\": () => (/* binding */ RGBA_ETC2_EAC_Format),\n/* harmony export */   \"RGBA_PVRTC_2BPPV1_Format\": () => (/* binding */ RGBA_PVRTC_2BPPV1_Format),\n/* harmony export */   \"RGBA_PVRTC_4BPPV1_Format\": () => (/* binding */ RGBA_PVRTC_4BPPV1_Format),\n/* harmony export */   \"RGBA_S3TC_DXT1_Format\": () => (/* binding */ RGBA_S3TC_DXT1_Format),\n/* harmony export */   \"RGBA_S3TC_DXT3_Format\": () => (/* binding */ RGBA_S3TC_DXT3_Format),\n/* harmony export */   \"RGBA_S3TC_DXT5_Format\": () => (/* binding */ RGBA_S3TC_DXT5_Format),\n/* harmony export */   \"RGBDEncoding\": () => (/* binding */ RGBDEncoding),\n/* harmony export */   \"RGBEEncoding\": () => (/* binding */ RGBEEncoding),\n/* harmony export */   \"RGBEFormat\": () => (/* binding */ RGBEFormat),\n/* harmony export */   \"RGBFormat\": () => (/* binding */ RGBFormat),\n/* harmony export */   \"RGBIntegerFormat\": () => (/* binding */ RGBIntegerFormat),\n/* harmony export */   \"RGBM16Encoding\": () => (/* binding */ RGBM16Encoding),\n/* harmony export */   \"RGBM7Encoding\": () => (/* binding */ RGBM7Encoding),\n/* harmony export */   \"RGB_ETC1_Format\": () => (/* binding */ RGB_ETC1_Format),\n/* harmony export */   \"RGB_ETC2_Format\": () => (/* binding */ RGB_ETC2_Format),\n/* harmony export */   \"RGB_PVRTC_2BPPV1_Format\": () => (/* binding */ RGB_PVRTC_2BPPV1_Format),\n/* harmony export */   \"RGB_PVRTC_4BPPV1_Format\": () => (/* binding */ RGB_PVRTC_4BPPV1_Format),\n/* harmony export */   \"RGB_S3TC_DXT1_Format\": () => (/* binding */ RGB_S3TC_DXT1_Format),\n/* harmony export */   \"RGFormat\": () => (/* binding */ RGFormat),\n/* harmony export */   \"RGIntegerFormat\": () => (/* binding */ RGIntegerFormat),\n/* harmony export */   \"RawShaderMaterial\": () => (/* binding */ RawShaderMaterial),\n/* harmony export */   \"Ray\": () => (/* binding */ Ray),\n/* harmony export */   \"Raycaster\": () => (/* binding */ Raycaster),\n/* harmony export */   \"RectAreaLight\": () => (/* binding */ RectAreaLight),\n/* harmony export */   \"RedFormat\": () => (/* binding */ RedFormat),\n/* harmony export */   \"RedIntegerFormat\": () => (/* binding */ RedIntegerFormat),\n/* harmony export */   \"ReinhardToneMapping\": () => (/* binding */ ReinhardToneMapping),\n/* harmony export */   \"RepeatWrapping\": () => (/* binding */ RepeatWrapping),\n/* harmony export */   \"ReplaceStencilOp\": () => (/* binding */ ReplaceStencilOp),\n/* harmony export */   \"ReverseSubtractEquation\": () => (/* binding */ ReverseSubtractEquation),\n/* harmony export */   \"RingBufferGeometry\": () => (/* binding */ RingGeometry),\n/* harmony export */   \"RingGeometry\": () => (/* binding */ RingGeometry),\n/* harmony export */   \"SRGB8_ALPHA8_ASTC_10x10_Format\": () => (/* binding */ SRGB8_ALPHA8_ASTC_10x10_Format),\n/* harmony export */   \"SRGB8_ALPHA8_ASTC_10x5_Format\": () => (/* binding */ SRGB8_ALPHA8_ASTC_10x5_Format),\n/* harmony export */   \"SRGB8_ALPHA8_ASTC_10x6_Format\": () => (/* binding */ SRGB8_ALPHA8_ASTC_10x6_Format),\n/* harmony export */   \"SRGB8_ALPHA8_ASTC_10x8_Format\": () => (/* binding */ SRGB8_ALPHA8_ASTC_10x8_Format),\n/* harmony export */   \"SRGB8_ALPHA8_ASTC_12x10_Format\": () => (/* binding */ SRGB8_ALPHA8_ASTC_12x10_Format),\n/* harmony export */   \"SRGB8_ALPHA8_ASTC_12x12_Format\": () => (/* binding */ SRGB8_ALPHA8_ASTC_12x12_Format),\n/* harmony export */   \"SRGB8_ALPHA8_ASTC_4x4_Format\": () => (/* binding */ SRGB8_ALPHA8_ASTC_4x4_Format),\n/* harmony export */   \"SRGB8_ALPHA8_ASTC_5x4_Format\": () => (/* binding */ SRGB8_ALPHA8_ASTC_5x4_Format),\n/* harmony export */   \"SRGB8_ALPHA8_ASTC_5x5_Format\": () => (/* binding */ SRGB8_ALPHA8_ASTC_5x5_Format),\n/* harmony export */   \"SRGB8_ALPHA8_ASTC_6x5_Format\": () => (/* binding */ SRGB8_ALPHA8_ASTC_6x5_Format),\n/* harmony export */   \"SRGB8_ALPHA8_ASTC_6x6_Format\": () => (/* binding */ SRGB8_ALPHA8_ASTC_6x6_Format),\n/* harmony export */   \"SRGB8_ALPHA8_ASTC_8x5_Format\": () => (/* binding */ SRGB8_ALPHA8_ASTC_8x5_Format),\n/* harmony export */   \"SRGB8_ALPHA8_ASTC_8x6_Format\": () => (/* binding */ SRGB8_ALPHA8_ASTC_8x6_Format),\n/* harmony export */   \"SRGB8_ALPHA8_ASTC_8x8_Format\": () => (/* binding */ SRGB8_ALPHA8_ASTC_8x8_Format),\n/* harmony export */   \"Scene\": () => (/* binding */ Scene),\n/* harmony export */   \"SceneUtils\": () => (/* binding */ SceneUtils),\n/* harmony export */   \"ShaderChunk\": () => (/* binding */ ShaderChunk),\n/* harmony export */   \"ShaderLib\": () => (/* binding */ ShaderLib),\n/* harmony export */   \"ShaderMaterial\": () => (/* binding */ ShaderMaterial),\n/* harmony export */   \"ShadowMaterial\": () => (/* binding */ ShadowMaterial),\n/* harmony export */   \"Shape\": () => (/* binding */ Shape),\n/* harmony export */   \"ShapeBufferGeometry\": () => (/* binding */ ShapeGeometry),\n/* harmony export */   \"ShapeGeometry\": () => (/* binding */ ShapeGeometry),\n/* harmony export */   \"ShapePath\": () => (/* binding */ ShapePath),\n/* harmony export */   \"ShapeUtils\": () => (/* binding */ ShapeUtils),\n/* harmony export */   \"ShortType\": () => (/* binding */ ShortType),\n/* harmony export */   \"Skeleton\": () => (/* binding */ Skeleton),\n/* harmony export */   \"SkeletonHelper\": () => (/* binding */ SkeletonHelper),\n/* harmony export */   \"SkinnedMesh\": () => (/* binding */ SkinnedMesh),\n/* harmony export */   \"SmoothShading\": () => (/* binding */ SmoothShading),\n/* harmony export */   \"Sphere\": () => (/* binding */ Sphere),\n/* harmony export */   \"SphereBufferGeometry\": () => (/* binding */ SphereGeometry),\n/* harmony export */   \"SphereGeometry\": () => (/* binding */ SphereGeometry),\n/* harmony export */   \"Spherical\": () => (/* binding */ Spherical),\n/* harmony export */   \"SphericalHarmonics3\": () => (/* binding */ SphericalHarmonics3),\n/* harmony export */   \"SplineCurve\": () => (/* binding */ SplineCurve),\n/* harmony export */   \"SpotLight\": () => (/* binding */ SpotLight),\n/* harmony export */   \"SpotLightHelper\": () => (/* binding */ SpotLightHelper),\n/* harmony export */   \"Sprite\": () => (/* binding */ Sprite),\n/* harmony export */   \"SpriteMaterial\": () => (/* binding */ SpriteMaterial),\n/* harmony export */   \"SrcAlphaFactor\": () => (/* binding */ SrcAlphaFactor),\n/* harmony export */   \"SrcAlphaSaturateFactor\": () => (/* binding */ SrcAlphaSaturateFactor),\n/* harmony export */   \"SrcColorFactor\": () => (/* binding */ SrcColorFactor),\n/* harmony export */   \"StaticCopyUsage\": () => (/* binding */ StaticCopyUsage),\n/* harmony export */   \"StaticDrawUsage\": () => (/* binding */ StaticDrawUsage),\n/* harmony export */   \"StaticReadUsage\": () => (/* binding */ StaticReadUsage),\n/* harmony export */   \"StereoCamera\": () => (/* binding */ StereoCamera),\n/* harmony export */   \"StreamCopyUsage\": () => (/* binding */ StreamCopyUsage),\n/* harmony export */   \"StreamDrawUsage\": () => (/* binding */ StreamDrawUsage),\n/* harmony export */   \"StreamReadUsage\": () => (/* binding */ StreamReadUsage),\n/* harmony export */   \"StringKeyframeTrack\": () => (/* binding */ StringKeyframeTrack),\n/* harmony export */   \"SubtractEquation\": () => (/* binding */ SubtractEquation),\n/* harmony export */   \"SubtractiveBlending\": () => (/* binding */ SubtractiveBlending),\n/* harmony export */   \"TOUCH\": () => (/* binding */ TOUCH),\n/* harmony export */   \"TangentSpaceNormalMap\": () => (/* binding */ TangentSpaceNormalMap),\n/* harmony export */   \"TetrahedronBufferGeometry\": () => (/* binding */ TetrahedronGeometry),\n/* harmony export */   \"TetrahedronGeometry\": () => (/* binding */ TetrahedronGeometry),\n/* harmony export */   \"TextGeometry\": () => (/* binding */ TextGeometry),\n/* harmony export */   \"Texture\": () => (/* binding */ Texture),\n/* harmony export */   \"TextureLoader\": () => (/* binding */ TextureLoader),\n/* harmony export */   \"TorusBufferGeometry\": () => (/* binding */ TorusGeometry),\n/* harmony export */   \"TorusGeometry\": () => (/* binding */ TorusGeometry),\n/* harmony export */   \"TorusKnotBufferGeometry\": () => (/* binding */ TorusKnotGeometry),\n/* harmony export */   \"TorusKnotGeometry\": () => (/* binding */ TorusKnotGeometry),\n/* harmony export */   \"Triangle\": () => (/* binding */ Triangle),\n/* harmony export */   \"TriangleFanDrawMode\": () => (/* binding */ TriangleFanDrawMode),\n/* harmony export */   \"TriangleStripDrawMode\": () => (/* binding */ TriangleStripDrawMode),\n/* harmony export */   \"TrianglesDrawMode\": () => (/* binding */ TrianglesDrawMode),\n/* harmony export */   \"TubeBufferGeometry\": () => (/* binding */ TubeGeometry),\n/* harmony export */   \"TubeGeometry\": () => (/* binding */ TubeGeometry),\n/* harmony export */   \"UVMapping\": () => (/* binding */ UVMapping),\n/* harmony export */   \"Uint16Attribute\": () => (/* binding */ Uint16Attribute),\n/* harmony export */   \"Uint16BufferAttribute\": () => (/* binding */ Uint16BufferAttribute),\n/* harmony export */   \"Uint32Attribute\": () => (/* binding */ Uint32Attribute),\n/* harmony export */   \"Uint32BufferAttribute\": () => (/* binding */ Uint32BufferAttribute),\n/* harmony export */   \"Uint8Attribute\": () => (/* binding */ Uint8Attribute),\n/* harmony export */   \"Uint8BufferAttribute\": () => (/* binding */ Uint8BufferAttribute),\n/* harmony export */   \"Uint8ClampedAttribute\": () => (/* binding */ Uint8ClampedAttribute),\n/* harmony export */   \"Uint8ClampedBufferAttribute\": () => (/* binding */ Uint8ClampedBufferAttribute),\n/* harmony export */   \"Uniform\": () => (/* binding */ Uniform),\n/* harmony export */   \"UniformsLib\": () => (/* binding */ UniformsLib),\n/* harmony export */   \"UniformsUtils\": () => (/* binding */ UniformsUtils),\n/* harmony export */   \"UnsignedByteType\": () => (/* binding */ UnsignedByteType),\n/* harmony export */   \"UnsignedInt248Type\": () => (/* binding */ UnsignedInt248Type),\n/* harmony export */   \"UnsignedIntType\": () => (/* binding */ UnsignedIntType),\n/* harmony export */   \"UnsignedShort4444Type\": () => (/* binding */ UnsignedShort4444Type),\n/* harmony export */   \"UnsignedShort5551Type\": () => (/* binding */ UnsignedShort5551Type),\n/* harmony export */   \"UnsignedShort565Type\": () => (/* binding */ UnsignedShort565Type),\n/* harmony export */   \"UnsignedShortType\": () => (/* binding */ UnsignedShortType),\n/* harmony export */   \"VSMShadowMap\": () => (/* binding */ VSMShadowMap),\n/* harmony export */   \"Vector2\": () => (/* binding */ Vector2),\n/* harmony export */   \"Vector3\": () => (/* binding */ Vector3),\n/* harmony export */   \"Vector4\": () => (/* binding */ Vector4),\n/* harmony export */   \"VectorKeyframeTrack\": () => (/* binding */ VectorKeyframeTrack),\n/* harmony export */   \"Vertex\": () => (/* binding */ Vertex),\n/* harmony export */   \"VertexColors\": () => (/* binding */ VertexColors),\n/* harmony export */   \"VideoTexture\": () => (/* binding */ VideoTexture),\n/* harmony export */   \"WebGL1Renderer\": () => (/* binding */ WebGL1Renderer),\n/* harmony export */   \"WebGLCubeRenderTarget\": () => (/* binding */ WebGLCubeRenderTarget),\n/* harmony export */   \"WebGLMultipleRenderTargets\": () => (/* binding */ WebGLMultipleRenderTargets),\n/* harmony export */   \"WebGLMultisampleRenderTarget\": () => (/* binding */ WebGLMultisampleRenderTarget),\n/* harmony export */   \"WebGLRenderTarget\": () => (/* binding */ WebGLRenderTarget),\n/* harmony export */   \"WebGLRenderTargetCube\": () => (/* binding */ WebGLRenderTargetCube),\n/* harmony export */   \"WebGLRenderer\": () => (/* binding */ WebGLRenderer),\n/* harmony export */   \"WebGLUtils\": () => (/* binding */ WebGLUtils),\n/* harmony export */   \"WireframeGeometry\": () => (/* binding */ WireframeGeometry),\n/* harmony export */   \"WireframeHelper\": () => (/* binding */ WireframeHelper),\n/* harmony export */   \"WrapAroundEnding\": () => (/* binding */ WrapAroundEnding),\n/* harmony export */   \"XHRLoader\": () => (/* binding */ XHRLoader),\n/* harmony export */   \"ZeroCurvatureEnding\": () => (/* binding */ ZeroCurvatureEnding),\n/* harmony export */   \"ZeroFactor\": () => (/* binding */ ZeroFactor),\n/* harmony export */   \"ZeroSlopeEnding\": () => (/* binding */ ZeroSlopeEnding),\n/* harmony export */   \"ZeroStencilOp\": () => (/* binding */ ZeroStencilOp),\n/* harmony export */   \"sRGBEncoding\": () => (/* binding */ sRGBEncoding)\n/* harmony export */ });\n/**\n * @license\n * Copyright 2010-2021 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\n const REVISION = '135';\n const MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\n const TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\n const CullFaceNone = 0;\n const CullFaceBack = 1;\n const CullFaceFront = 2;\n const CullFaceFrontBack = 3;\n const BasicShadowMap = 0;\n const PCFShadowMap = 1;\n const PCFSoftShadowMap = 2;\n const VSMShadowMap = 3;\n const FrontSide = 0;\n const BackSide = 1;\n const DoubleSide = 2;\n const FlatShading = 1;\n const SmoothShading = 2;\n const NoBlending = 0;\n const NormalBlending = 1;\n const AdditiveBlending = 2;\n const SubtractiveBlending = 3;\n const MultiplyBlending = 4;\n const CustomBlending = 5;\n const AddEquation = 100;\n const SubtractEquation = 101;\n const ReverseSubtractEquation = 102;\n const MinEquation = 103;\n const MaxEquation = 104;\n const ZeroFactor = 200;\n const OneFactor = 201;\n const SrcColorFactor = 202;\n const OneMinusSrcColorFactor = 203;\n const SrcAlphaFactor = 204;\n const OneMinusSrcAlphaFactor = 205;\n const DstAlphaFactor = 206;\n const OneMinusDstAlphaFactor = 207;\n const DstColorFactor = 208;\n const OneMinusDstColorFactor = 209;\n const SrcAlphaSaturateFactor = 210;\n const NeverDepth = 0;\n const AlwaysDepth = 1;\n const LessDepth = 2;\n const LessEqualDepth = 3;\n const EqualDepth = 4;\n const GreaterEqualDepth = 5;\n const GreaterDepth = 6;\n const NotEqualDepth = 7;\n const MultiplyOperation = 0;\n const MixOperation = 1;\n const AddOperation = 2;\n const NoToneMapping = 0;\n const LinearToneMapping = 1;\n const ReinhardToneMapping = 2;\n const CineonToneMapping = 3;\n const ACESFilmicToneMapping = 4;\n const CustomToneMapping = 5;\n \n const UVMapping = 300;\n const CubeReflectionMapping = 301;\n const CubeRefractionMapping = 302;\n const EquirectangularReflectionMapping = 303;\n const EquirectangularRefractionMapping = 304;\n const CubeUVReflectionMapping = 306;\n const CubeUVRefractionMapping = 307;\n const RepeatWrapping = 1000;\n const ClampToEdgeWrapping = 1001;\n const MirroredRepeatWrapping = 1002;\n const NearestFilter = 1003;\n const NearestMipmapNearestFilter = 1004;\n const NearestMipMapNearestFilter = 1004;\n const NearestMipmapLinearFilter = 1005;\n const NearestMipMapLinearFilter = 1005;\n const LinearFilter = 1006;\n const LinearMipmapNearestFilter = 1007;\n const LinearMipMapNearestFilter = 1007;\n const LinearMipmapLinearFilter = 1008;\n const LinearMipMapLinearFilter = 1008;\n const UnsignedByteType = 1009;\n const ByteType = 1010;\n const ShortType = 1011;\n const UnsignedShortType = 1012;\n const IntType = 1013;\n const UnsignedIntType = 1014;\n const FloatType = 1015;\n const HalfFloatType = 1016;\n const UnsignedShort4444Type = 1017;\n const UnsignedShort5551Type = 1018;\n const UnsignedShort565Type = 1019;\n const UnsignedInt248Type = 1020;\n const AlphaFormat = 1021;\n const RGBFormat = 1022;\n const RGBAFormat = 1023;\n const LuminanceFormat = 1024;\n const LuminanceAlphaFormat = 1025;\n const RGBEFormat = RGBAFormat;\n const DepthFormat = 1026;\n const DepthStencilFormat = 1027;\n const RedFormat = 1028;\n const RedIntegerFormat = 1029;\n const RGFormat = 1030;\n const RGIntegerFormat = 1031;\n const RGBIntegerFormat = 1032;\n const RGBAIntegerFormat = 1033;\n \n const RGB_S3TC_DXT1_Format = 33776;\n const RGBA_S3TC_DXT1_Format = 33777;\n const RGBA_S3TC_DXT3_Format = 33778;\n const RGBA_S3TC_DXT5_Format = 33779;\n const RGB_PVRTC_4BPPV1_Format = 35840;\n const RGB_PVRTC_2BPPV1_Format = 35841;\n const RGBA_PVRTC_4BPPV1_Format = 35842;\n const RGBA_PVRTC_2BPPV1_Format = 35843;\n const RGB_ETC1_Format = 36196;\n const RGB_ETC2_Format = 37492;\n const RGBA_ETC2_EAC_Format = 37496;\n const RGBA_ASTC_4x4_Format = 37808;\n const RGBA_ASTC_5x4_Format = 37809;\n const RGBA_ASTC_5x5_Format = 37810;\n const RGBA_ASTC_6x5_Format = 37811;\n const RGBA_ASTC_6x6_Format = 37812;\n const RGBA_ASTC_8x5_Format = 37813;\n const RGBA_ASTC_8x6_Format = 37814;\n const RGBA_ASTC_8x8_Format = 37815;\n const RGBA_ASTC_10x5_Format = 37816;\n const RGBA_ASTC_10x6_Format = 37817;\n const RGBA_ASTC_10x8_Format = 37818;\n const RGBA_ASTC_10x10_Format = 37819;\n const RGBA_ASTC_12x10_Format = 37820;\n const RGBA_ASTC_12x12_Format = 37821;\n const RGBA_BPTC_Format = 36492;\n const SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\n const SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\n const SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\n const SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\n const SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\n const SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\n const SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\n const SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\n const SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\n const SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\n const SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\n const SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\n const SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\n const SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\n const LoopOnce = 2200;\n const LoopRepeat = 2201;\n const LoopPingPong = 2202;\n const InterpolateDiscrete = 2300;\n const InterpolateLinear = 2301;\n const InterpolateSmooth = 2302;\n const ZeroCurvatureEnding = 2400;\n const ZeroSlopeEnding = 2401;\n const WrapAroundEnding = 2402;\n const NormalAnimationBlendMode = 2500;\n const AdditiveAnimationBlendMode = 2501;\n const TrianglesDrawMode = 0;\n const TriangleStripDrawMode = 1;\n const TriangleFanDrawMode = 2;\n const LinearEncoding = 3000;\n const sRGBEncoding = 3001;\n const GammaEncoding = 3007;\n const RGBEEncoding = 3002;\n const RGBM7Encoding = 3004;\n const RGBM16Encoding = 3005;\n const RGBDEncoding = 3006;\n const BasicDepthPacking = 3200;\n const RGBADepthPacking = 3201;\n const TangentSpaceNormalMap = 0;\n const ObjectSpaceNormalMap = 1;\n \n const ZeroStencilOp = 0;\n const KeepStencilOp = 7680;\n const ReplaceStencilOp = 7681;\n const IncrementStencilOp = 7682;\n const DecrementStencilOp = 7683;\n const IncrementWrapStencilOp = 34055;\n const DecrementWrapStencilOp = 34056;\n const InvertStencilOp = 5386;\n \n const NeverStencilFunc = 512;\n const LessStencilFunc = 513;\n const EqualStencilFunc = 514;\n const LessEqualStencilFunc = 515;\n const GreaterStencilFunc = 516;\n const NotEqualStencilFunc = 517;\n const GreaterEqualStencilFunc = 518;\n const AlwaysStencilFunc = 519;\n \n const StaticDrawUsage = 35044;\n const DynamicDrawUsage = 35048;\n const StreamDrawUsage = 35040;\n const StaticReadUsage = 35045;\n const DynamicReadUsage = 35049;\n const StreamReadUsage = 35041;\n const StaticCopyUsage = 35046;\n const DynamicCopyUsage = 35050;\n const StreamCopyUsage = 35042;\n \n const GLSL1 = '100';\n const GLSL3 = '300 es';\n \n /**\n  * https://github.com/mrdoob/eventdispatcher.js/\n  */\n \n class EventDispatcher {\n \n   addEventListener( type, listener ) {\n \n     if ( this._listeners === undefined ) this._listeners = {};\n \n     const listeners = this._listeners;\n \n     if ( listeners[ type ] === undefined ) {\n \n       listeners[ type ] = [];\n \n     }\n \n     if ( listeners[ type ].indexOf( listener ) === - 1 ) {\n \n       listeners[ type ].push( listener );\n \n     }\n \n   }\n \n   hasEventListener( type, listener ) {\n \n     if ( this._listeners === undefined ) return false;\n \n     const listeners = this._listeners;\n \n     return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n \n   }\n \n   removeEventListener( type, listener ) {\n \n     if ( this._listeners === undefined ) return;\n \n     const listeners = this._listeners;\n     const listenerArray = listeners[ type ];\n \n     if ( listenerArray !== undefined ) {\n \n       const index = listenerArray.indexOf( listener );\n \n       if ( index !== - 1 ) {\n \n         listenerArray.splice( index, 1 );\n \n       }\n \n     }\n \n   }\n \n   dispatchEvent( event ) {\n \n     if ( this._listeners === undefined ) return;\n \n     const listeners = this._listeners;\n     const listenerArray = listeners[ event.type ];\n \n     if ( listenerArray !== undefined ) {\n \n       event.target = this;\n \n       // Make a copy, in case listeners are removed while iterating.\n       const array = listenerArray.slice( 0 );\n \n       for ( let i = 0, l = array.length; i < l; i ++ ) {\n \n         array[ i ].call( this, event );\n \n       }\n \n       event.target = null;\n \n     }\n \n   }\n \n }\n \n const _lut = [];\n \n for ( let i = 0; i < 256; i ++ ) {\n \n   _lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n \n }\n \n let _seed = 1234567;\n \n \n const DEG2RAD = Math.PI / 180;\n const RAD2DEG = 180 / Math.PI;\n \n // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n function generateUUID() {\n \n   const d0 = Math.random() * 0xffffffff | 0;\n   const d1 = Math.random() * 0xffffffff | 0;\n   const d2 = Math.random() * 0xffffffff | 0;\n   const d3 = Math.random() * 0xffffffff | 0;\n   const uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n       _lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n       _lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n       _lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n \n   // .toUpperCase() here flattens concatenated strings to save heap memory space.\n   return uuid.toUpperCase();\n \n }\n \n function clamp( value, min, max ) {\n \n   return Math.max( min, Math.min( max, value ) );\n \n }\n \n // compute euclidian modulo of m % n\n // https://en.wikipedia.org/wiki/Modulo_operation\n function euclideanModulo( n, m ) {\n \n   return ( ( n % m ) + m ) % m;\n \n }\n \n // Linear mapping from range <a1, a2> to range <b1, b2>\n function mapLinear( x, a1, a2, b1, b2 ) {\n \n   return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n \n }\n \n // https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\n function inverseLerp( x, y, value ) {\n \n   if ( x !== y ) {\n \n     return ( value - x ) / ( y - x );\n \n   } else {\n \n     return 0;\n \n   }\n \n }\n \n // https://en.wikipedia.org/wiki/Linear_interpolation\n function lerp( x, y, t ) {\n \n   return ( 1 - t ) * x + t * y;\n \n }\n \n // http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n function damp( x, y, lambda, dt ) {\n \n   return lerp( x, y, 1 - Math.exp( - lambda * dt ) );\n \n }\n \n // https://www.desmos.com/calculator/vcsjnyz7x4\n function pingpong( x, length = 1 ) {\n \n   return length - Math.abs( euclideanModulo( x, length * 2 ) - length );\n \n }\n \n // http://en.wikipedia.org/wiki/Smoothstep\n function smoothstep( x, min, max ) {\n \n   if ( x <= min ) return 0;\n   if ( x >= max ) return 1;\n \n   x = ( x - min ) / ( max - min );\n \n   return x * x * ( 3 - 2 * x );\n \n }\n \n function smootherstep( x, min, max ) {\n \n   if ( x <= min ) return 0;\n   if ( x >= max ) return 1;\n \n   x = ( x - min ) / ( max - min );\n \n   return x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n \n }\n \n // Random integer from <low, high> interval\n function randInt( low, high ) {\n \n   return low + Math.floor( Math.random() * ( high - low + 1 ) );\n \n }\n \n // Random float from <low, high> interval\n function randFloat( low, high ) {\n \n   return low + Math.random() * ( high - low );\n \n }\n \n // Random float from <-range/2, range/2> interval\n function randFloatSpread( range ) {\n \n   return range * ( 0.5 - Math.random() );\n \n }\n \n // Deterministic pseudo-random float in the interval [ 0, 1 ]\n function seededRandom( s ) {\n \n   if ( s !== undefined ) _seed = s % 2147483647;\n \n   // Park-Miller algorithm\n \n   _seed = _seed * 16807 % 2147483647;\n \n   return ( _seed - 1 ) / 2147483646;\n \n }\n \n function degToRad( degrees ) {\n \n   return degrees * DEG2RAD;\n \n }\n \n function radToDeg( radians ) {\n \n   return radians * RAD2DEG;\n \n }\n \n function isPowerOfTwo( value ) {\n \n   return ( value & ( value - 1 ) ) === 0 && value !== 0;\n \n }\n \n function ceilPowerOfTwo( value ) {\n \n   return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n \n }\n \n function floorPowerOfTwo( value ) {\n \n   return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n \n }\n \n function setQuaternionFromProperEuler( q, a, b, c, order ) {\n \n   // Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n \n   // rotations are applied to the axes in the order specified by 'order'\n   // rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n   // angles are in radians\n \n   const cos = Math.cos;\n   const sin = Math.sin;\n \n   const c2 = cos( b / 2 );\n   const s2 = sin( b / 2 );\n \n   const c13 = cos( ( a + c ) / 2 );\n   const s13 = sin( ( a + c ) / 2 );\n \n   const c1_3 = cos( ( a - c ) / 2 );\n   const s1_3 = sin( ( a - c ) / 2 );\n \n   const c3_1 = cos( ( c - a ) / 2 );\n   const s3_1 = sin( ( c - a ) / 2 );\n \n   switch ( order ) {\n \n     case 'XYX':\n       q.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n       break;\n \n     case 'YZY':\n       q.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n       break;\n \n     case 'ZXZ':\n       q.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n       break;\n \n     case 'XZX':\n       q.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n       break;\n \n     case 'YXY':\n       q.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n       break;\n \n     case 'ZYZ':\n       q.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n       break;\n \n     default:\n       console.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );\n \n   }\n \n }\n \n var MathUtils = /*#__PURE__*/Object.freeze({\n   __proto__: null,\n   DEG2RAD: DEG2RAD,\n   RAD2DEG: RAD2DEG,\n   generateUUID: generateUUID,\n   clamp: clamp,\n   euclideanModulo: euclideanModulo,\n   mapLinear: mapLinear,\n   inverseLerp: inverseLerp,\n   lerp: lerp,\n   damp: damp,\n   pingpong: pingpong,\n   smoothstep: smoothstep,\n   smootherstep: smootherstep,\n   randInt: randInt,\n   randFloat: randFloat,\n   randFloatSpread: randFloatSpread,\n   seededRandom: seededRandom,\n   degToRad: degToRad,\n   radToDeg: radToDeg,\n   isPowerOfTwo: isPowerOfTwo,\n   ceilPowerOfTwo: ceilPowerOfTwo,\n   floorPowerOfTwo: floorPowerOfTwo,\n   setQuaternionFromProperEuler: setQuaternionFromProperEuler\n });\n \n class Vector2 {\n \n   constructor( x = 0, y = 0 ) {\n \n     this.x = x;\n     this.y = y;\n \n   }\n \n   get width() {\n \n     return this.x;\n \n   }\n \n   set width( value ) {\n \n     this.x = value;\n \n   }\n \n   get height() {\n \n     return this.y;\n \n   }\n \n   set height( value ) {\n \n     this.y = value;\n \n   }\n \n   set( x, y ) {\n \n     this.x = x;\n     this.y = y;\n \n     return this;\n \n   }\n \n   setScalar( scalar ) {\n \n     this.x = scalar;\n     this.y = scalar;\n \n     return this;\n \n   }\n \n   setX( x ) {\n \n     this.x = x;\n \n     return this;\n \n   }\n \n   setY( y ) {\n \n     this.y = y;\n \n     return this;\n \n   }\n \n   setComponent( index, value ) {\n \n     switch ( index ) {\n \n       case 0: this.x = value; break;\n       case 1: this.y = value; break;\n       default: throw new Error( 'index is out of range: ' + index );\n \n     }\n \n     return this;\n \n   }\n \n   getComponent( index ) {\n \n     switch ( index ) {\n \n       case 0: return this.x;\n       case 1: return this.y;\n       default: throw new Error( 'index is out of range: ' + index );\n \n     }\n \n   }\n \n   clone() {\n \n     return new this.constructor( this.x, this.y );\n \n   }\n \n   copy( v ) {\n \n     this.x = v.x;\n     this.y = v.y;\n \n     return this;\n \n   }\n \n   add( v, w ) {\n \n     if ( w !== undefined ) {\n \n       console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n       return this.addVectors( v, w );\n \n     }\n \n     this.x += v.x;\n     this.y += v.y;\n \n     return this;\n \n   }\n \n   addScalar( s ) {\n \n     this.x += s;\n     this.y += s;\n \n     return this;\n \n   }\n \n   addVectors( a, b ) {\n \n     this.x = a.x + b.x;\n     this.y = a.y + b.y;\n \n     return this;\n \n   }\n \n   addScaledVector( v, s ) {\n \n     this.x += v.x * s;\n     this.y += v.y * s;\n \n     return this;\n \n   }\n \n   sub( v, w ) {\n \n     if ( w !== undefined ) {\n \n       console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n       return this.subVectors( v, w );\n \n     }\n \n     this.x -= v.x;\n     this.y -= v.y;\n \n     return this;\n \n   }\n \n   subScalar( s ) {\n \n     this.x -= s;\n     this.y -= s;\n \n     return this;\n \n   }\n \n   subVectors( a, b ) {\n \n     this.x = a.x - b.x;\n     this.y = a.y - b.y;\n \n     return this;\n \n   }\n \n   multiply( v ) {\n \n     this.x *= v.x;\n     this.y *= v.y;\n \n     return this;\n \n   }\n \n   multiplyScalar( scalar ) {\n \n     this.x *= scalar;\n     this.y *= scalar;\n \n     return this;\n \n   }\n \n   divide( v ) {\n \n     this.x /= v.x;\n     this.y /= v.y;\n \n     return this;\n \n   }\n \n   divideScalar( scalar ) {\n \n     return this.multiplyScalar( 1 / scalar );\n \n   }\n \n   applyMatrix3( m ) {\n \n     const x = this.x, y = this.y;\n     const e = m.elements;\n \n     this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n     this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n \n     return this;\n \n   }\n \n   min( v ) {\n \n     this.x = Math.min( this.x, v.x );\n     this.y = Math.min( this.y, v.y );\n \n     return this;\n \n   }\n \n   max( v ) {\n \n     this.x = Math.max( this.x, v.x );\n     this.y = Math.max( this.y, v.y );\n \n     return this;\n \n   }\n \n   clamp( min, max ) {\n \n     // assumes min < max, componentwise\n \n     this.x = Math.max( min.x, Math.min( max.x, this.x ) );\n     this.y = Math.max( min.y, Math.min( max.y, this.y ) );\n \n     return this;\n \n   }\n \n   clampScalar( minVal, maxVal ) {\n \n     this.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n     this.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n \n     return this;\n \n   }\n \n   clampLength( min, max ) {\n \n     const length = this.length();\n \n     return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n \n   }\n \n   floor() {\n \n     this.x = Math.floor( this.x );\n     this.y = Math.floor( this.y );\n \n     return this;\n \n   }\n \n   ceil() {\n \n     this.x = Math.ceil( this.x );\n     this.y = Math.ceil( this.y );\n \n     return this;\n \n   }\n \n   round() {\n \n     this.x = Math.round( this.x );\n     this.y = Math.round( this.y );\n \n     return this;\n \n   }\n \n   roundToZero() {\n \n     this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n     this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n \n     return this;\n \n   }\n \n   negate() {\n \n     this.x = - this.x;\n     this.y = - this.y;\n \n     return this;\n \n   }\n \n   dot( v ) {\n \n     return this.x * v.x + this.y * v.y;\n \n   }\n \n   cross( v ) {\n \n     return this.x * v.y - this.y * v.x;\n \n   }\n \n   lengthSq() {\n \n     return this.x * this.x + this.y * this.y;\n \n   }\n \n   length() {\n \n     return Math.sqrt( this.x * this.x + this.y * this.y );\n \n   }\n \n   manhattanLength() {\n \n     return Math.abs( this.x ) + Math.abs( this.y );\n \n   }\n \n   normalize() {\n \n     return this.divideScalar( this.length() || 1 );\n \n   }\n \n   angle() {\n \n     // computes the angle in radians with respect to the positive x-axis\n \n     const angle = Math.atan2( - this.y, - this.x ) + Math.PI;\n \n     return angle;\n \n   }\n \n   distanceTo( v ) {\n \n     return Math.sqrt( this.distanceToSquared( v ) );\n \n   }\n \n   distanceToSquared( v ) {\n \n     const dx = this.x - v.x, dy = this.y - v.y;\n     return dx * dx + dy * dy;\n \n   }\n \n   manhattanDistanceTo( v ) {\n \n     return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n \n   }\n \n   setLength( length ) {\n \n     return this.normalize().multiplyScalar( length );\n \n   }\n \n   lerp( v, alpha ) {\n \n     this.x += ( v.x - this.x ) * alpha;\n     this.y += ( v.y - this.y ) * alpha;\n \n     return this;\n \n   }\n \n   lerpVectors( v1, v2, alpha ) {\n \n     this.x = v1.x + ( v2.x - v1.x ) * alpha;\n     this.y = v1.y + ( v2.y - v1.y ) * alpha;\n \n     return this;\n \n   }\n \n   equals( v ) {\n \n     return ( ( v.x === this.x ) && ( v.y === this.y ) );\n \n   }\n \n   fromArray( array, offset = 0 ) {\n \n     this.x = array[ offset ];\n     this.y = array[ offset + 1 ];\n \n     return this;\n \n   }\n \n   toArray( array = [], offset = 0 ) {\n \n     array[ offset ] = this.x;\n     array[ offset + 1 ] = this.y;\n \n     return array;\n \n   }\n \n   fromBufferAttribute( attribute, index, offset ) {\n \n     if ( offset !== undefined ) {\n \n       console.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n \n     }\n \n     this.x = attribute.getX( index );\n     this.y = attribute.getY( index );\n \n     return this;\n \n   }\n \n   rotateAround( center, angle ) {\n \n     const c = Math.cos( angle ), s = Math.sin( angle );\n \n     const x = this.x - center.x;\n     const y = this.y - center.y;\n \n     this.x = x * c - y * s + center.x;\n     this.y = x * s + y * c + center.y;\n \n     return this;\n \n   }\n \n   random() {\n \n     this.x = Math.random();\n     this.y = Math.random();\n \n     return this;\n \n   }\n \n   *[ Symbol.iterator ]() {\n \n     yield this.x;\n     yield this.y;\n \n   }\n \n }\n \n Vector2.prototype.isVector2 = true;\n \n class Matrix3 {\n \n   constructor() {\n \n     this.elements = [\n \n       1, 0, 0,\n       0, 1, 0,\n       0, 0, 1\n \n     ];\n \n     if ( arguments.length > 0 ) {\n \n       console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n \n     }\n \n   }\n \n   set( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n \n     const te = this.elements;\n \n     te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n     te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n     te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n \n     return this;\n \n   }\n \n   identity() {\n \n     this.set(\n \n       1, 0, 0,\n       0, 1, 0,\n       0, 0, 1\n \n     );\n \n     return this;\n \n   }\n \n   copy( m ) {\n \n     const te = this.elements;\n     const me = m.elements;\n \n     te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n     te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n     te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n \n     return this;\n \n   }\n \n   extractBasis( xAxis, yAxis, zAxis ) {\n \n     xAxis.setFromMatrix3Column( this, 0 );\n     yAxis.setFromMatrix3Column( this, 1 );\n     zAxis.setFromMatrix3Column( this, 2 );\n \n     return this;\n \n   }\n \n   setFromMatrix4( m ) {\n \n     const me = m.elements;\n \n     this.set(\n \n       me[ 0 ], me[ 4 ], me[ 8 ],\n       me[ 1 ], me[ 5 ], me[ 9 ],\n       me[ 2 ], me[ 6 ], me[ 10 ]\n \n     );\n \n     return this;\n \n   }\n \n   multiply( m ) {\n \n     return this.multiplyMatrices( this, m );\n \n   }\n \n   premultiply( m ) {\n \n     return this.multiplyMatrices( m, this );\n \n   }\n \n   multiplyMatrices( a, b ) {\n \n     const ae = a.elements;\n     const be = b.elements;\n     const te = this.elements;\n \n     const a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n     const a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n     const a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n \n     const b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n     const b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n     const b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n \n     te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n     te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n     te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n \n     te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n     te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n     te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n \n     te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n     te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n     te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n \n     return this;\n \n   }\n \n   multiplyScalar( s ) {\n \n     const te = this.elements;\n \n     te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n     te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n     te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n \n     return this;\n \n   }\n \n   determinant() {\n \n     const te = this.elements;\n \n     const a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n       d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n       g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n \n     return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n \n   }\n \n   invert() {\n \n     const te = this.elements,\n \n       n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],\n       n12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],\n       n13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],\n \n       t11 = n33 * n22 - n32 * n23,\n       t12 = n32 * n13 - n33 * n12,\n       t13 = n23 * n12 - n22 * n13,\n \n       det = n11 * t11 + n21 * t12 + n31 * t13;\n \n     if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n \n     const detInv = 1 / det;\n \n     te[ 0 ] = t11 * detInv;\n     te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n     te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n \n     te[ 3 ] = t12 * detInv;\n     te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n     te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n \n     te[ 6 ] = t13 * detInv;\n     te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n     te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n \n     return this;\n \n   }\n \n   transpose() {\n \n     let tmp;\n     const m = this.elements;\n \n     tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n     tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n     tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n \n     return this;\n \n   }\n \n   getNormalMatrix( matrix4 ) {\n \n     return this.setFromMatrix4( matrix4 ).invert().transpose();\n \n   }\n \n   transposeIntoArray( r ) {\n \n     const m = this.elements;\n \n     r[ 0 ] = m[ 0 ];\n     r[ 1 ] = m[ 3 ];\n     r[ 2 ] = m[ 6 ];\n     r[ 3 ] = m[ 1 ];\n     r[ 4 ] = m[ 4 ];\n     r[ 5 ] = m[ 7 ];\n     r[ 6 ] = m[ 2 ];\n     r[ 7 ] = m[ 5 ];\n     r[ 8 ] = m[ 8 ];\n \n     return this;\n \n   }\n \n   setUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {\n \n     const c = Math.cos( rotation );\n     const s = Math.sin( rotation );\n \n     this.set(\n       sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n       - sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n       0, 0, 1\n     );\n \n     return this;\n \n   }\n \n   scale( sx, sy ) {\n \n     const te = this.elements;\n \n     te[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n     te[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n \n     return this;\n \n   }\n \n   rotate( theta ) {\n \n     const c = Math.cos( theta );\n     const s = Math.sin( theta );\n \n     const te = this.elements;\n \n     const a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n     const a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n \n     te[ 0 ] = c * a11 + s * a21;\n     te[ 3 ] = c * a12 + s * a22;\n     te[ 6 ] = c * a13 + s * a23;\n \n     te[ 1 ] = - s * a11 + c * a21;\n     te[ 4 ] = - s * a12 + c * a22;\n     te[ 7 ] = - s * a13 + c * a23;\n \n     return this;\n \n   }\n \n   translate( tx, ty ) {\n \n     const te = this.elements;\n \n     te[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n     te[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n \n     return this;\n \n   }\n \n   equals( matrix ) {\n \n     const te = this.elements;\n     const me = matrix.elements;\n \n     for ( let i = 0; i < 9; i ++ ) {\n \n       if ( te[ i ] !== me[ i ] ) return false;\n \n     }\n \n     return true;\n \n   }\n \n   fromArray( array, offset = 0 ) {\n \n     for ( let i = 0; i < 9; i ++ ) {\n \n       this.elements[ i ] = array[ i + offset ];\n \n     }\n \n     return this;\n \n   }\n \n   toArray( array = [], offset = 0 ) {\n \n     const te = this.elements;\n \n     array[ offset ] = te[ 0 ];\n     array[ offset + 1 ] = te[ 1 ];\n     array[ offset + 2 ] = te[ 2 ];\n \n     array[ offset + 3 ] = te[ 3 ];\n     array[ offset + 4 ] = te[ 4 ];\n     array[ offset + 5 ] = te[ 5 ];\n \n     array[ offset + 6 ] = te[ 6 ];\n     array[ offset + 7 ] = te[ 7 ];\n     array[ offset + 8 ] = te[ 8 ];\n \n     return array;\n \n   }\n \n   clone() {\n \n     return new this.constructor().fromArray( this.elements );\n \n   }\n \n }\n \n Matrix3.prototype.isMatrix3 = true;\n \n function arrayMax( array ) {\n \n   if ( array.length === 0 ) return - Infinity;\n \n   let max = array[ 0 ];\n \n   for ( let i = 1, l = array.length; i < l; ++ i ) {\n \n     if ( array[ i ] > max ) max = array[ i ];\n \n   }\n \n   return max;\n \n }\n \n const TYPED_ARRAYS = {\n   Int8Array: Int8Array,\n   Uint8Array: Uint8Array,\n   Uint8ClampedArray: Uint8ClampedArray,\n   Int16Array: Int16Array,\n   Uint16Array: Uint16Array,\n   Int32Array: Int32Array,\n   Uint32Array: Uint32Array,\n   Float32Array: Float32Array,\n   Float64Array: Float64Array\n };\n \n function getTypedArray( type, buffer ) {\n \n   return new TYPED_ARRAYS[ type ]( buffer );\n \n }\n \n function createElementNS( name ) {\n \n   return document.createElementNS( 'http://www.w3.org/1999/xhtml', name );\n \n }\n \n /**\n   * cyrb53 hash for string from: https://stackoverflow.com/a/52171480\n   *\n   * Public Domain, @bryc - https://stackoverflow.com/users/815680/bryc\n   *\n   * It is roughly similar to the well-known MurmurHash/xxHash algorithms. It uses a combination\n   * of multiplication and Xorshift to generate the hash, but not as thorough. As a result it's\n   * faster than either would be in JavaScript and significantly simpler to implement. Keep in\n   * mind this is not a secure algorithm, if privacy/security is a concern, this is not for you.\n   *\n   * @param {string} str\n   * @param {number} seed, default 0\n   * @returns number\n   */\n function hashString( str, seed = 0 ) {\n \n   let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\n \n   for ( let i = 0, ch; i < str.length; i ++ ) {\n \n     ch = str.charCodeAt( i );\n \n     h1 = Math.imul( h1 ^ ch, 2654435761 );\n \n     h2 = Math.imul( h2 ^ ch, 1597334677 );\n \n   }\n \n   h1 = Math.imul( h1 ^ ( h1 >>> 16 ), 2246822507 ) ^ Math.imul( h2 ^ ( h2 >>> 13 ), 3266489909 );\n \n   h2 = Math.imul( h2 ^ ( h2 >>> 16 ), 2246822507 ) ^ Math.imul( h1 ^ ( h1 >>> 13 ), 3266489909 );\n \n   return 4294967296 * ( 2097151 & h2 ) + ( h1 >>> 0 );\n \n }\n \n let _canvas;\n \n class ImageUtils {\n \n   static getDataURL( image ) {\n \n     if ( /^data:/i.test( image.src ) ) {\n \n       return image.src;\n \n     }\n \n     if ( typeof HTMLCanvasElement == 'undefined' ) {\n \n       return image.src;\n \n     }\n \n     let canvas;\n \n     if ( image instanceof HTMLCanvasElement ) {\n \n       canvas = image;\n \n     } else {\n \n       if ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );\n \n       _canvas.width = image.width;\n       _canvas.height = image.height;\n \n       const context = _canvas.getContext( '2d' );\n \n       if ( image instanceof ImageData ) {\n \n         context.putImageData( image, 0, 0 );\n \n       } else {\n \n         context.drawImage( image, 0, 0, image.width, image.height );\n \n       }\n \n       canvas = _canvas;\n \n     }\n \n     if ( canvas.width > 2048 || canvas.height > 2048 ) {\n \n       console.warn( 'THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image );\n \n       return canvas.toDataURL( 'image/jpeg', 0.6 );\n \n     } else {\n \n       return canvas.toDataURL( 'image/png' );\n \n     }\n \n   }\n \n }\n \n let textureId = 0;\n \n class Texture extends EventDispatcher {\n \n   constructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding ) {\n \n     super();\n \n     Object.defineProperty( this, 'id', { value: textureId ++ } );\n \n     this.uuid = generateUUID();\n \n     this.name = '';\n \n     this.image = image;\n     this.mipmaps = [];\n \n     this.mapping = mapping;\n \n     this.wrapS = wrapS;\n     this.wrapT = wrapT;\n \n     this.magFilter = magFilter;\n     this.minFilter = minFilter;\n \n     this.anisotropy = anisotropy;\n \n     this.format = format;\n     this.internalFormat = null;\n     this.type = type;\n \n     this.offset = new Vector2( 0, 0 );\n     this.repeat = new Vector2( 1, 1 );\n     this.center = new Vector2( 0, 0 );\n     this.rotation = 0;\n \n     this.matrixAutoUpdate = true;\n     this.matrix = new Matrix3();\n \n     this.generateMipmaps = true;\n     this.premultiplyAlpha = false;\n     this.flipY = true;\n     this.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n \n     // Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n     //\n     // Also changing the encoding after already used by a Material will not automatically make the Material\n     // update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n     this.encoding = encoding;\n \n     this.userData = {};\n \n     this.version = 0;\n     this.onUpdate = null;\n \n     this.isRenderTargetTexture = false;\n \n   }\n \n   updateMatrix() {\n \n     this.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n \n   }\n \n   clone() {\n \n     return new this.constructor().copy( this );\n \n   }\n \n   copy( source ) {\n \n     this.name = source.name;\n \n     this.image = source.image;\n     this.mipmaps = source.mipmaps.slice( 0 );\n \n     this.mapping = source.mapping;\n \n     this.wrapS = source.wrapS;\n     this.wrapT = source.wrapT;\n \n     this.magFilter = source.magFilter;\n     this.minFilter = source.minFilter;\n \n     this.anisotropy = source.anisotropy;\n \n     this.format = source.format;\n     this.internalFormat = source.internalFormat;\n     this.type = source.type;\n \n     this.offset.copy( source.offset );\n     this.repeat.copy( source.repeat );\n     this.center.copy( source.center );\n     this.rotation = source.rotation;\n \n     this.matrixAutoUpdate = source.matrixAutoUpdate;\n     this.matrix.copy( source.matrix );\n \n     this.generateMipmaps = source.generateMipmaps;\n     this.premultiplyAlpha = source.premultiplyAlpha;\n     this.flipY = source.flipY;\n     this.unpackAlignment = source.unpackAlignment;\n     this.encoding = source.encoding;\n \n     this.userData = JSON.parse( JSON.stringify( source.userData ) );\n \n     return this;\n \n   }\n \n   toJSON( meta ) {\n \n     const isRootObject = ( meta === undefined || typeof meta === 'string' );\n \n     if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n \n       return meta.textures[ this.uuid ];\n \n     }\n \n     const output = {\n \n       metadata: {\n         version: 4.5,\n         type: 'Texture',\n         generator: 'Texture.toJSON'\n       },\n \n       uuid: this.uuid,\n       name: this.name,\n \n       mapping: this.mapping,\n \n       repeat: [ this.repeat.x, this.repeat.y ],\n       offset: [ this.offset.x, this.offset.y ],\n       center: [ this.center.x, this.center.y ],\n       rotation: this.rotation,\n \n       wrap: [ this.wrapS, this.wrapT ],\n \n       format: this.format,\n       type: this.type,\n       encoding: this.encoding,\n \n       minFilter: this.minFilter,\n       magFilter: this.magFilter,\n       anisotropy: this.anisotropy,\n \n       flipY: this.flipY,\n \n       premultiplyAlpha: this.premultiplyAlpha,\n       unpackAlignment: this.unpackAlignment\n \n     };\n \n     if ( this.image !== undefined ) {\n \n       // TODO: Move to THREE.Image\n \n       const image = this.image;\n \n       if ( image.uuid === undefined ) {\n \n         image.uuid = generateUUID(); // UGH\n \n       }\n \n       if ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\n \n         let url;\n \n         if ( Array.isArray( image ) ) {\n \n           // process array of images e.g. CubeTexture\n \n           url = [];\n \n           for ( let i = 0, l = image.length; i < l; i ++ ) {\n \n             // check cube texture with data textures\n \n             if ( image[ i ].isDataTexture ) {\n \n               url.push( serializeImage( image[ i ].image ) );\n \n             } else {\n \n               url.push( serializeImage( image[ i ] ) );\n \n             }\n \n           }\n \n         } else {\n \n           // process single image\n \n           url = serializeImage( image );\n \n         }\n \n         meta.images[ image.uuid ] = {\n           uuid: image.uuid,\n           url: url\n         };\n \n       }\n \n       output.image = image.uuid;\n \n     }\n \n     if ( JSON.stringify( this.userData ) !== '{}' ) output.userData = this.userData;\n \n     if ( ! isRootObject ) {\n \n       meta.textures[ this.uuid ] = output;\n \n     }\n \n     return output;\n \n   }\n \n   dispose() {\n \n     this.dispatchEvent( { type: 'dispose' } );\n \n   }\n \n   transformUv( uv ) {\n \n     if ( this.mapping !== UVMapping ) return uv;\n \n     uv.applyMatrix3( this.matrix );\n \n     if ( uv.x < 0 || uv.x > 1 ) {\n \n       switch ( this.wrapS ) {\n \n         case RepeatWrapping:\n \n           uv.x = uv.x - Math.floor( uv.x );\n           break;\n \n         case ClampToEdgeWrapping:\n \n           uv.x = uv.x < 0 ? 0 : 1;\n           break;\n \n         case MirroredRepeatWrapping:\n \n           if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n \n             uv.x = Math.ceil( uv.x ) - uv.x;\n \n           } else {\n \n             uv.x = uv.x - Math.floor( uv.x );\n \n           }\n \n           break;\n \n       }\n \n     }\n \n     if ( uv.y < 0 || uv.y > 1 ) {\n \n       switch ( this.wrapT ) {\n \n         case RepeatWrapping:\n \n           uv.y = uv.y - Math.floor( uv.y );\n           break;\n \n         case ClampToEdgeWrapping:\n \n           uv.y = uv.y < 0 ? 0 : 1;\n           break;\n \n         case MirroredRepeatWrapping:\n \n           if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n \n             uv.y = Math.ceil( uv.y ) - uv.y;\n \n           } else {\n \n             uv.y = uv.y - Math.floor( uv.y );\n \n           }\n \n           break;\n \n       }\n \n     }\n \n     if ( this.flipY ) {\n \n       uv.y = 1 - uv.y;\n \n     }\n \n     return uv;\n \n   }\n \n   set needsUpdate( value ) {\n \n     if ( value === true ) this.version ++;\n \n   }\n \n }\n \n Texture.DEFAULT_IMAGE = undefined;\n Texture.DEFAULT_MAPPING = UVMapping;\n \n Texture.prototype.isTexture = true;\n \n function serializeImage( image ) {\n \n   if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n     ( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n     ( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n \n     // default images\n \n     return ImageUtils.getDataURL( image );\n \n   } else {\n \n     if ( image.data ) {\n \n       // images of DataTexture\n \n       return {\n         data: Array.prototype.slice.call( image.data ),\n         width: image.width,\n         height: image.height,\n         type: image.data.constructor.name\n       };\n \n     } else {\n \n       console.warn( 'THREE.Texture: Unable to serialize Texture.' );\n       return {};\n \n     }\n \n   }\n \n }\n \n class Vector4 {\n \n   constructor( x = 0, y = 0, z = 0, w = 1 ) {\n \n     this.x = x;\n     this.y = y;\n     this.z = z;\n     this.w = w;\n \n   }\n \n   get width() {\n \n     return this.z;\n \n   }\n \n   set width( value ) {\n \n     this.z = value;\n \n   }\n \n   get height() {\n \n     return this.w;\n \n   }\n \n   set height( value ) {\n \n     this.w = value;\n \n   }\n \n   set( x, y, z, w ) {\n \n     this.x = x;\n     this.y = y;\n     this.z = z;\n     this.w = w;\n \n     return this;\n \n   }\n \n   setScalar( scalar ) {\n \n     this.x = scalar;\n     this.y = scalar;\n     this.z = scalar;\n     this.w = scalar;\n \n     return this;\n \n   }\n \n   setX( x ) {\n \n     this.x = x;\n \n     return this;\n \n   }\n \n   setY( y ) {\n \n     this.y = y;\n \n     return this;\n \n   }\n \n   setZ( z ) {\n \n     this.z = z;\n \n     return this;\n \n   }\n \n   setW( w ) {\n \n     this.w = w;\n \n     return this;\n \n   }\n \n   setComponent( index, value ) {\n \n     switch ( index ) {\n \n       case 0: this.x = value; break;\n       case 1: this.y = value; break;\n       case 2: this.z = value; break;\n       case 3: this.w = value; break;\n       default: throw new Error( 'index is out of range: ' + index );\n \n     }\n \n     return this;\n \n   }\n \n   getComponent( index ) {\n \n     switch ( index ) {\n \n       case 0: return this.x;\n       case 1: return this.y;\n       case 2: return this.z;\n       case 3: return this.w;\n       default: throw new Error( 'index is out of range: ' + index );\n \n     }\n \n   }\n \n   clone() {\n \n     return new this.constructor( this.x, this.y, this.z, this.w );\n \n   }\n \n   copy( v ) {\n \n     this.x = v.x;\n     this.y = v.y;\n     this.z = v.z;\n     this.w = ( v.w !== undefined ) ? v.w : 1;\n \n     return this;\n \n   }\n \n   add( v, w ) {\n \n     if ( w !== undefined ) {\n \n       console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n       return this.addVectors( v, w );\n \n     }\n \n     this.x += v.x;\n     this.y += v.y;\n     this.z += v.z;\n     this.w += v.w;\n \n     return this;\n \n   }\n \n   addScalar( s ) {\n \n     this.x += s;\n     this.y += s;\n     this.z += s;\n     this.w += s;\n \n     return this;\n \n   }\n \n   addVectors( a, b ) {\n \n     this.x = a.x + b.x;\n     this.y = a.y + b.y;\n     this.z = a.z + b.z;\n     this.w = a.w + b.w;\n \n     return this;\n \n   }\n \n   addScaledVector( v, s ) {\n \n     this.x += v.x * s;\n     this.y += v.y * s;\n     this.z += v.z * s;\n     this.w += v.w * s;\n \n     return this;\n \n   }\n \n   sub( v, w ) {\n \n     if ( w !== undefined ) {\n \n       console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n       return this.subVectors( v, w );\n \n     }\n \n     this.x -= v.x;\n     this.y -= v.y;\n     this.z -= v.z;\n     this.w -= v.w;\n \n     return this;\n \n   }\n \n   subScalar( s ) {\n \n     this.x -= s;\n     this.y -= s;\n     this.z -= s;\n     this.w -= s;\n \n     return this;\n \n   }\n \n   subVectors( a, b ) {\n \n     this.x = a.x - b.x;\n     this.y = a.y - b.y;\n     this.z = a.z - b.z;\n     this.w = a.w - b.w;\n \n     return this;\n \n   }\n \n   multiply( v ) {\n \n     this.x *= v.x;\n     this.y *= v.y;\n     this.z *= v.z;\n     this.w *= v.w;\n \n     return this;\n \n   }\n \n   multiplyScalar( scalar ) {\n \n     this.x *= scalar;\n     this.y *= scalar;\n     this.z *= scalar;\n     this.w *= scalar;\n \n     return this;\n \n   }\n \n   applyMatrix4( m ) {\n \n     const x = this.x, y = this.y, z = this.z, w = this.w;\n     const e = m.elements;\n \n     this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n     this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n     this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n     this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n \n     return this;\n \n   }\n \n   divideScalar( scalar ) {\n \n     return this.multiplyScalar( 1 / scalar );\n \n   }\n \n   setAxisAngleFromQuaternion( q ) {\n \n     // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n \n     // q is assumed to be normalized\n \n     this.w = 2 * Math.acos( q.w );\n \n     const s = Math.sqrt( 1 - q.w * q.w );\n \n     if ( s < 0.0001 ) {\n \n       this.x = 1;\n       this.y = 0;\n       this.z = 0;\n \n     } else {\n \n       this.x = q.x / s;\n       this.y = q.y / s;\n       this.z = q.z / s;\n \n     }\n \n     return this;\n \n   }\n \n   setAxisAngleFromRotationMatrix( m ) {\n \n     // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n \n     // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n \n     let angle, x, y, z; // variables for result\n     const epsilon = 0.01,\t\t// margin to allow for rounding errors\n       epsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n \n       te = m.elements,\n \n       m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n       m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n       m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n \n     if ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n          ( Math.abs( m13 - m31 ) < epsilon ) &&\n          ( Math.abs( m23 - m32 ) < epsilon ) ) {\n \n       // singularity found\n       // first check for identity matrix which must have +1 for all terms\n       // in leading diagonal and zero in other terms\n \n       if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n            ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n            ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n            ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n \n         // this singularity is identity matrix so angle = 0\n \n         this.set( 1, 0, 0, 0 );\n \n         return this; // zero angle, arbitrary axis\n \n       }\n \n       // otherwise this singularity is angle = 180\n \n       angle = Math.PI;\n \n       const xx = ( m11 + 1 ) / 2;\n       const yy = ( m22 + 1 ) / 2;\n       const zz = ( m33 + 1 ) / 2;\n       const xy = ( m12 + m21 ) / 4;\n       const xz = ( m13 + m31 ) / 4;\n       const yz = ( m23 + m32 ) / 4;\n \n       if ( ( xx > yy ) && ( xx > zz ) ) {\n \n         // m11 is the largest diagonal term\n \n         if ( xx < epsilon ) {\n \n           x = 0;\n           y = 0.707106781;\n           z = 0.707106781;\n \n         } else {\n \n           x = Math.sqrt( xx );\n           y = xy / x;\n           z = xz / x;\n \n         }\n \n       } else if ( yy > zz ) {\n \n         // m22 is the largest diagonal term\n \n         if ( yy < epsilon ) {\n \n           x = 0.707106781;\n           y = 0;\n           z = 0.707106781;\n \n         } else {\n \n           y = Math.sqrt( yy );\n           x = xy / y;\n           z = yz / y;\n \n         }\n \n       } else {\n \n         // m33 is the largest diagonal term so base result on this\n \n         if ( zz < epsilon ) {\n \n           x = 0.707106781;\n           y = 0.707106781;\n           z = 0;\n \n         } else {\n \n           z = Math.sqrt( zz );\n           x = xz / z;\n           y = yz / z;\n \n         }\n \n       }\n \n       this.set( x, y, z, angle );\n \n       return this; // return 180 deg rotation\n \n     }\n \n     // as we have reached here there are no singularities so we can handle normally\n \n     let s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n       ( m13 - m31 ) * ( m13 - m31 ) +\n       ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n \n     if ( Math.abs( s ) < 0.001 ) s = 1;\n \n     // prevent divide by zero, should not happen if matrix is orthogonal and should be\n     // caught by singularity test above, but I've left it in just in case\n \n     this.x = ( m32 - m23 ) / s;\n     this.y = ( m13 - m31 ) / s;\n     this.z = ( m21 - m12 ) / s;\n     this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n \n     return this;\n \n   }\n \n   min( v ) {\n \n     this.x = Math.min( this.x, v.x );\n     this.y = Math.min( this.y, v.y );\n     this.z = Math.min( this.z, v.z );\n     this.w = Math.min( this.w, v.w );\n \n     return this;\n \n   }\n \n   max( v ) {\n \n     this.x = Math.max( this.x, v.x );\n     this.y = Math.max( this.y, v.y );\n     this.z = Math.max( this.z, v.z );\n     this.w = Math.max( this.w, v.w );\n \n     return this;\n \n   }\n \n   clamp( min, max ) {\n \n     // assumes min < max, componentwise\n \n     this.x = Math.max( min.x, Math.min( max.x, this.x ) );\n     this.y = Math.max( min.y, Math.min( max.y, this.y ) );\n     this.z = Math.max( min.z, Math.min( max.z, this.z ) );\n     this.w = Math.max( min.w, Math.min( max.w, this.w ) );\n \n     return this;\n \n   }\n \n   clampScalar( minVal, maxVal ) {\n \n     this.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n     this.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n     this.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n     this.w = Math.max( minVal, Math.min( maxVal, this.w ) );\n \n     return this;\n \n   }\n \n   clampLength( min, max ) {\n \n     const length = this.length();\n \n     return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n \n   }\n \n   floor() {\n \n     this.x = Math.floor( this.x );\n     this.y = Math.floor( this.y );\n     this.z = Math.floor( this.z );\n     this.w = Math.floor( this.w );\n \n     return this;\n \n   }\n \n   ceil() {\n \n     this.x = Math.ceil( this.x );\n     this.y = Math.ceil( this.y );\n     this.z = Math.ceil( this.z );\n     this.w = Math.ceil( this.w );\n \n     return this;\n \n   }\n \n   round() {\n \n     this.x = Math.round( this.x );\n     this.y = Math.round( this.y );\n     this.z = Math.round( this.z );\n     this.w = Math.round( this.w );\n \n     return this;\n \n   }\n \n   roundToZero() {\n \n     this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n     this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n     this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n     this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n \n     return this;\n \n   }\n \n   negate() {\n \n     this.x = - this.x;\n     this.y = - this.y;\n     this.z = - this.z;\n     this.w = - this.w;\n \n     return this;\n \n   }\n \n   dot( v ) {\n \n     return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n \n   }\n \n   lengthSq() {\n \n     return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n \n   }\n \n   length() {\n \n     return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n \n   }\n \n   manhattanLength() {\n \n     return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n \n   }\n \n   normalize() {\n \n     return this.divideScalar( this.length() || 1 );\n \n   }\n \n   setLength( length ) {\n \n     return this.normalize().multiplyScalar( length );\n \n   }\n \n   lerp( v, alpha ) {\n \n     this.x += ( v.x - this.x ) * alpha;\n     this.y += ( v.y - this.y ) * alpha;\n     this.z += ( v.z - this.z ) * alpha;\n     this.w += ( v.w - this.w ) * alpha;\n \n     return this;\n \n   }\n \n   lerpVectors( v1, v2, alpha ) {\n \n     this.x = v1.x + ( v2.x - v1.x ) * alpha;\n     this.y = v1.y + ( v2.y - v1.y ) * alpha;\n     this.z = v1.z + ( v2.z - v1.z ) * alpha;\n     this.w = v1.w + ( v2.w - v1.w ) * alpha;\n \n     return this;\n \n   }\n \n   equals( v ) {\n \n     return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n \n   }\n \n   fromArray( array, offset = 0 ) {\n \n     this.x = array[ offset ];\n     this.y = array[ offset + 1 ];\n     this.z = array[ offset + 2 ];\n     this.w = array[ offset + 3 ];\n \n     return this;\n \n   }\n \n   toArray( array = [], offset = 0 ) {\n \n     array[ offset ] = this.x;\n     array[ offset + 1 ] = this.y;\n     array[ offset + 2 ] = this.z;\n     array[ offset + 3 ] = this.w;\n \n     return array;\n \n   }\n \n   fromBufferAttribute( attribute, index, offset ) {\n \n     if ( offset !== undefined ) {\n \n       console.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n \n     }\n \n     this.x = attribute.getX( index );\n     this.y = attribute.getY( index );\n     this.z = attribute.getZ( index );\n     this.w = attribute.getW( index );\n \n     return this;\n \n   }\n \n   random() {\n \n     this.x = Math.random();\n     this.y = Math.random();\n     this.z = Math.random();\n     this.w = Math.random();\n \n     return this;\n \n   }\n \n   *[ Symbol.iterator ]() {\n \n     yield this.x;\n     yield this.y;\n     yield this.z;\n     yield this.w;\n \n   }\n \n }\n \n Vector4.prototype.isVector4 = true;\n \n /*\n  In options, we can specify:\n  * Texture parameters for an auto-generated target texture\n  * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n */\n class WebGLRenderTarget extends EventDispatcher {\n \n   constructor( width, height, options = {} ) {\n \n     super();\n \n     this.width = width;\n     this.height = height;\n     this.depth = 1;\n \n     this.scissor = new Vector4( 0, 0, width, height );\n     this.scissorTest = false;\n \n     this.viewport = new Vector4( 0, 0, width, height );\n \n     this.texture = new Texture( undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n     this.texture.isRenderTargetTexture = true;\n \n     this.texture.image = { width: width, height: height, depth: 1 };\n \n     this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n     this.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;\n     this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n \n     this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n     this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n     this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n \n   }\n \n   setTexture( texture ) {\n \n     texture.image = {\n       width: this.width,\n       height: this.height,\n       depth: this.depth\n     };\n \n     this.texture = texture;\n \n   }\n \n   setSize( width, height, depth = 1 ) {\n \n     if ( this.width !== width || this.height !== height || this.depth !== depth ) {\n \n       this.width = width;\n       this.height = height;\n       this.depth = depth;\n \n       this.texture.image.width = width;\n       this.texture.image.height = height;\n       this.texture.image.depth = depth;\n \n       this.dispose();\n \n     }\n \n     this.viewport.set( 0, 0, width, height );\n     this.scissor.set( 0, 0, width, height );\n \n   }\n \n   clone() {\n \n     return new this.constructor().copy( this );\n \n   }\n \n   copy( source ) {\n \n     this.width = source.width;\n     this.height = source.height;\n     this.depth = source.depth;\n \n     this.viewport.copy( source.viewport );\n \n     this.texture = source.texture.clone();\n     this.texture.image = { ...this.texture.image }; // See #20328.\n \n     this.depthBuffer = source.depthBuffer;\n     this.stencilBuffer = source.stencilBuffer;\n     this.depthTexture = source.depthTexture;\n \n     return this;\n \n   }\n \n   dispose() {\n \n     this.dispatchEvent( { type: 'dispose' } );\n \n   }\n \n }\n \n WebGLRenderTarget.prototype.isWebGLRenderTarget = true;\n \n class WebGLMultipleRenderTargets extends WebGLRenderTarget {\n \n   constructor( width, height, count ) {\n \n     super( width, height );\n \n     const texture = this.texture;\n \n     this.texture = [];\n \n     for ( let i = 0; i < count; i ++ ) {\n \n       this.texture[ i ] = texture.clone();\n \n     }\n \n   }\n \n   setSize( width, height, depth = 1 ) {\n \n     if ( this.width !== width || this.height !== height || this.depth !== depth ) {\n \n       this.width = width;\n       this.height = height;\n       this.depth = depth;\n \n       for ( let i = 0, il = this.texture.length; i < il; i ++ ) {\n \n         this.texture[ i ].image.width = width;\n         this.texture[ i ].image.height = height;\n         this.texture[ i ].image.depth = depth;\n \n       }\n \n       this.dispose();\n \n     }\n \n     this.viewport.set( 0, 0, width, height );\n     this.scissor.set( 0, 0, width, height );\n \n     return this;\n \n   }\n \n   copy( source ) {\n \n     this.dispose();\n \n     this.width = source.width;\n     this.height = source.height;\n     this.depth = source.depth;\n \n     this.viewport.set( 0, 0, this.width, this.height );\n     this.scissor.set( 0, 0, this.width, this.height );\n \n     this.depthBuffer = source.depthBuffer;\n     this.stencilBuffer = source.stencilBuffer;\n     this.depthTexture = source.depthTexture;\n \n     this.texture.length = 0;\n \n     for ( let i = 0, il = source.texture.length; i < il; i ++ ) {\n \n       this.texture[ i ] = source.texture[ i ].clone();\n \n     }\n \n     return this;\n \n   }\n \n }\n \n WebGLMultipleRenderTargets.prototype.isWebGLMultipleRenderTargets = true;\n \n class WebGLMultisampleRenderTarget extends WebGLRenderTarget {\n \n   constructor( width, height, options = {} ) {\n \n     super( width, height, options );\n \n     this.samples = 4;\n \n     this.ignoreDepthForMultisampleCopy = options.ignoreDepth !== undefined ? options.ignoreDepth : true;\n     this.useRenderToTexture = ( options.useRenderToTexture !== undefined ) ? options.useRenderToTexture : false;\n     this.useRenderbuffer = this.useRenderToTexture === false;\n \n   }\n \n   copy( source ) {\n \n     super.copy.call( this, source );\n \n     this.samples = source.samples;\n     this.useRenderToTexture = source.useRenderToTexture;\n     this.useRenderbuffer = source.useRenderbuffer;\n \n     return this;\n \n   }\n \n }\n \n WebGLMultisampleRenderTarget.prototype.isWebGLMultisampleRenderTarget = true;\n \n class Quaternion {\n \n   constructor( x = 0, y = 0, z = 0, w = 1 ) {\n \n     this._x = x;\n     this._y = y;\n     this._z = z;\n     this._w = w;\n \n   }\n \n   static slerp( qa, qb, qm, t ) {\n \n     console.warn( 'THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.' );\n     return qm.slerpQuaternions( qa, qb, t );\n \n   }\n \n   static slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n \n     // fuzz-free, array-based Quaternion SLERP operation\n \n     let x0 = src0[ srcOffset0 + 0 ],\n       y0 = src0[ srcOffset0 + 1 ],\n       z0 = src0[ srcOffset0 + 2 ],\n       w0 = src0[ srcOffset0 + 3 ];\n \n     const x1 = src1[ srcOffset1 + 0 ],\n       y1 = src1[ srcOffset1 + 1 ],\n       z1 = src1[ srcOffset1 + 2 ],\n       w1 = src1[ srcOffset1 + 3 ];\n \n     if ( t === 0 ) {\n \n       dst[ dstOffset + 0 ] = x0;\n       dst[ dstOffset + 1 ] = y0;\n       dst[ dstOffset + 2 ] = z0;\n       dst[ dstOffset + 3 ] = w0;\n       return;\n \n     }\n \n     if ( t === 1 ) {\n \n       dst[ dstOffset + 0 ] = x1;\n       dst[ dstOffset + 1 ] = y1;\n       dst[ dstOffset + 2 ] = z1;\n       dst[ dstOffset + 3 ] = w1;\n       return;\n \n     }\n \n     if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n \n       let s = 1 - t;\n       const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n         dir = ( cos >= 0 ? 1 : - 1 ),\n         sqrSin = 1 - cos * cos;\n \n       // Skip the Slerp for tiny steps to avoid numeric problems:\n       if ( sqrSin > Number.EPSILON ) {\n \n         const sin = Math.sqrt( sqrSin ),\n           len = Math.atan2( sin, cos * dir );\n \n         s = Math.sin( s * len ) / sin;\n         t = Math.sin( t * len ) / sin;\n \n       }\n \n       const tDir = t * dir;\n \n       x0 = x0 * s + x1 * tDir;\n       y0 = y0 * s + y1 * tDir;\n       z0 = z0 * s + z1 * tDir;\n       w0 = w0 * s + w1 * tDir;\n \n       // Normalize in case we just did a lerp:\n       if ( s === 1 - t ) {\n \n         const f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n \n         x0 *= f;\n         y0 *= f;\n         z0 *= f;\n         w0 *= f;\n \n       }\n \n     }\n \n     dst[ dstOffset ] = x0;\n     dst[ dstOffset + 1 ] = y0;\n     dst[ dstOffset + 2 ] = z0;\n     dst[ dstOffset + 3 ] = w0;\n \n   }\n \n   static multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\n \n     const x0 = src0[ srcOffset0 ];\n     const y0 = src0[ srcOffset0 + 1 ];\n     const z0 = src0[ srcOffset0 + 2 ];\n     const w0 = src0[ srcOffset0 + 3 ];\n \n     const x1 = src1[ srcOffset1 ];\n     const y1 = src1[ srcOffset1 + 1 ];\n     const z1 = src1[ srcOffset1 + 2 ];\n     const w1 = src1[ srcOffset1 + 3 ];\n \n     dst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n     dst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n     dst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n     dst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n \n     return dst;\n \n   }\n \n   get x() {\n \n     return this._x;\n \n   }\n \n   set x( value ) {\n \n     this._x = value;\n     this._onChangeCallback();\n \n   }\n \n   get y() {\n \n     return this._y;\n \n   }\n \n   set y( value ) {\n \n     this._y = value;\n     this._onChangeCallback();\n \n   }\n \n   get z() {\n \n     return this._z;\n \n   }\n \n   set z( value ) {\n \n     this._z = value;\n     this._onChangeCallback();\n \n   }\n \n   get w() {\n \n     return this._w;\n \n   }\n \n   set w( value ) {\n \n     this._w = value;\n     this._onChangeCallback();\n \n   }\n \n   set( x, y, z, w ) {\n \n     this._x = x;\n     this._y = y;\n     this._z = z;\n     this._w = w;\n \n     this._onChangeCallback();\n \n     return this;\n \n   }\n \n   clone() {\n \n     return new this.constructor( this._x, this._y, this._z, this._w );\n \n   }\n \n   copy( quaternion ) {\n \n     this._x = quaternion.x;\n     this._y = quaternion.y;\n     this._z = quaternion.z;\n     this._w = quaternion.w;\n \n     this._onChangeCallback();\n \n     return this;\n \n   }\n \n   setFromEuler( euler, update ) {\n \n     if ( ! ( euler && euler.isEuler ) ) {\n \n       throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n \n     }\n \n     const x = euler._x, y = euler._y, z = euler._z, order = euler._order;\n \n     // http://www.mathworks.com/matlabcentral/fileexchange/\n     // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n     //\tcontent/SpinCalc.m\n \n     const cos = Math.cos;\n     const sin = Math.sin;\n \n     const c1 = cos( x / 2 );\n     const c2 = cos( y / 2 );\n     const c3 = cos( z / 2 );\n \n     const s1 = sin( x / 2 );\n     const s2 = sin( y / 2 );\n     const s3 = sin( z / 2 );\n \n     switch ( order ) {\n \n       case 'XYZ':\n         this._x = s1 * c2 * c3 + c1 * s2 * s3;\n         this._y = c1 * s2 * c3 - s1 * c2 * s3;\n         this._z = c1 * c2 * s3 + s1 * s2 * c3;\n         this._w = c1 * c2 * c3 - s1 * s2 * s3;\n         break;\n \n       case 'YXZ':\n         this._x = s1 * c2 * c3 + c1 * s2 * s3;\n         this._y = c1 * s2 * c3 - s1 * c2 * s3;\n         this._z = c1 * c2 * s3 - s1 * s2 * c3;\n         this._w = c1 * c2 * c3 + s1 * s2 * s3;\n         break;\n \n       case 'ZXY':\n         this._x = s1 * c2 * c3 - c1 * s2 * s3;\n         this._y = c1 * s2 * c3 + s1 * c2 * s3;\n         this._z = c1 * c2 * s3 + s1 * s2 * c3;\n         this._w = c1 * c2 * c3 - s1 * s2 * s3;\n         break;\n \n       case 'ZYX':\n         this._x = s1 * c2 * c3 - c1 * s2 * s3;\n         this._y = c1 * s2 * c3 + s1 * c2 * s3;\n         this._z = c1 * c2 * s3 - s1 * s2 * c3;\n         this._w = c1 * c2 * c3 + s1 * s2 * s3;\n         break;\n \n       case 'YZX':\n         this._x = s1 * c2 * c3 + c1 * s2 * s3;\n         this._y = c1 * s2 * c3 + s1 * c2 * s3;\n         this._z = c1 * c2 * s3 - s1 * s2 * c3;\n         this._w = c1 * c2 * c3 - s1 * s2 * s3;\n         break;\n \n       case 'XZY':\n         this._x = s1 * c2 * c3 - c1 * s2 * s3;\n         this._y = c1 * s2 * c3 - s1 * c2 * s3;\n         this._z = c1 * c2 * s3 + s1 * s2 * c3;\n         this._w = c1 * c2 * c3 + s1 * s2 * s3;\n         break;\n \n       default:\n         console.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\n \n     }\n \n     if ( update !== false ) this._onChangeCallback();\n \n     return this;\n \n   }\n \n   setFromAxisAngle( axis, angle ) {\n \n     // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n \n     // assumes axis is normalized\n \n     const halfAngle = angle / 2, s = Math.sin( halfAngle );\n \n     this._x = axis.x * s;\n     this._y = axis.y * s;\n     this._z = axis.z * s;\n     this._w = Math.cos( halfAngle );\n \n     this._onChangeCallback();\n \n     return this;\n \n   }\n \n   setFromRotationMatrix( m ) {\n \n     // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n \n     // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n \n     const te = m.elements,\n \n       m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n       m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n       m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n \n       trace = m11 + m22 + m33;\n \n     if ( trace > 0 ) {\n \n       const s = 0.5 / Math.sqrt( trace + 1.0 );\n \n       this._w = 0.25 / s;\n       this._x = ( m32 - m23 ) * s;\n       this._y = ( m13 - m31 ) * s;\n       this._z = ( m21 - m12 ) * s;\n \n     } else if ( m11 > m22 && m11 > m33 ) {\n \n       const s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n \n       this._w = ( m32 - m23 ) / s;\n       this._x = 0.25 * s;\n       this._y = ( m12 + m21 ) / s;\n       this._z = ( m13 + m31 ) / s;\n \n     } else if ( m22 > m33 ) {\n \n       const s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n \n       this._w = ( m13 - m31 ) / s;\n       this._x = ( m12 + m21 ) / s;\n       this._y = 0.25 * s;\n       this._z = ( m23 + m32 ) / s;\n \n     } else {\n \n       const s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n \n       this._w = ( m21 - m12 ) / s;\n       this._x = ( m13 + m31 ) / s;\n       this._y = ( m23 + m32 ) / s;\n       this._z = 0.25 * s;\n \n     }\n \n     this._onChangeCallback();\n \n     return this;\n \n   }\n \n   setFromUnitVectors( vFrom, vTo ) {\n \n     // assumes direction vectors vFrom and vTo are normalized\n \n     let r = vFrom.dot( vTo ) + 1;\n \n     if ( r < Number.EPSILON ) {\n \n       // vFrom and vTo point in opposite directions\n \n       r = 0;\n \n       if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n \n         this._x = - vFrom.y;\n         this._y = vFrom.x;\n         this._z = 0;\n         this._w = r;\n \n       } else {\n \n         this._x = 0;\n         this._y = - vFrom.z;\n         this._z = vFrom.y;\n         this._w = r;\n \n       }\n \n     } else {\n \n       // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n \n       this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n       this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n       this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n       this._w = r;\n \n     }\n \n     return this.normalize();\n \n   }\n \n   angleTo( q ) {\n \n     return 2 * Math.acos( Math.abs( clamp( this.dot( q ), - 1, 1 ) ) );\n \n   }\n \n   rotateTowards( q, step ) {\n \n     const angle = this.angleTo( q );\n \n     if ( angle === 0 ) return this;\n \n     const t = Math.min( 1, step / angle );\n \n     this.slerp( q, t );\n \n     return this;\n \n   }\n \n   identity() {\n \n     return this.set( 0, 0, 0, 1 );\n \n   }\n \n   invert() {\n \n     // quaternion is assumed to have unit length\n \n     return this.conjugate();\n \n   }\n \n   conjugate() {\n \n     this._x *= - 1;\n     this._y *= - 1;\n     this._z *= - 1;\n \n     this._onChangeCallback();\n \n     return this;\n \n   }\n \n   dot( v ) {\n \n     return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n \n   }\n \n   lengthSq() {\n \n     return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n \n   }\n \n   length() {\n \n     return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n \n   }\n \n   normalize() {\n \n     let l = this.length();\n \n     if ( l === 0 ) {\n \n       this._x = 0;\n       this._y = 0;\n       this._z = 0;\n       this._w = 1;\n \n     } else {\n \n       l = 1 / l;\n \n       this._x = this._x * l;\n       this._y = this._y * l;\n       this._z = this._z * l;\n       this._w = this._w * l;\n \n     }\n \n     this._onChangeCallback();\n \n     return this;\n \n   }\n \n   multiply( q, p ) {\n \n     if ( p !== undefined ) {\n \n       console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n       return this.multiplyQuaternions( q, p );\n \n     }\n \n     return this.multiplyQuaternions( this, q );\n \n   }\n \n   premultiply( q ) {\n \n     return this.multiplyQuaternions( q, this );\n \n   }\n \n   multiplyQuaternions( a, b ) {\n \n     // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n \n     const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n     const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n \n     this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n     this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n     this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n     this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n \n     this._onChangeCallback();\n \n     return this;\n \n   }\n \n   slerp( qb, t ) {\n \n     if ( t === 0 ) return this;\n     if ( t === 1 ) return this.copy( qb );\n \n     const x = this._x, y = this._y, z = this._z, w = this._w;\n \n     // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n \n     let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n \n     if ( cosHalfTheta < 0 ) {\n \n       this._w = - qb._w;\n       this._x = - qb._x;\n       this._y = - qb._y;\n       this._z = - qb._z;\n \n       cosHalfTheta = - cosHalfTheta;\n \n     } else {\n \n       this.copy( qb );\n \n     }\n \n     if ( cosHalfTheta >= 1.0 ) {\n \n       this._w = w;\n       this._x = x;\n       this._y = y;\n       this._z = z;\n \n       return this;\n \n     }\n \n     const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n \n     if ( sqrSinHalfTheta <= Number.EPSILON ) {\n \n       const s = 1 - t;\n       this._w = s * w + t * this._w;\n       this._x = s * x + t * this._x;\n       this._y = s * y + t * this._y;\n       this._z = s * z + t * this._z;\n \n       this.normalize();\n       this._onChangeCallback();\n \n       return this;\n \n     }\n \n     const sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n     const halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n     const ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n       ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n \n     this._w = ( w * ratioA + this._w * ratioB );\n     this._x = ( x * ratioA + this._x * ratioB );\n     this._y = ( y * ratioA + this._y * ratioB );\n     this._z = ( z * ratioA + this._z * ratioB );\n \n     this._onChangeCallback();\n \n     return this;\n \n   }\n \n   slerpQuaternions( qa, qb, t ) {\n \n     this.copy( qa ).slerp( qb, t );\n \n   }\n \n   random() {\n \n     // Derived from http://planning.cs.uiuc.edu/node198.html\n     // Note, this source uses w, x, y, z ordering,\n     // so we swap the order below.\n \n     const u1 = Math.random();\n     const sqrt1u1 = Math.sqrt( 1 - u1 );\n     const sqrtu1 = Math.sqrt( u1 );\n \n     const u2 = 2 * Math.PI * Math.random();\n \n     const u3 = 2 * Math.PI * Math.random();\n \n     return this.set(\n       sqrt1u1 * Math.cos( u2 ),\n       sqrtu1 * Math.sin( u3 ),\n       sqrtu1 * Math.cos( u3 ),\n       sqrt1u1 * Math.sin( u2 ),\n     );\n \n   }\n \n   equals( quaternion ) {\n \n     return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n \n   }\n \n   fromArray( array, offset = 0 ) {\n \n     this._x = array[ offset ];\n     this._y = array[ offset + 1 ];\n     this._z = array[ offset + 2 ];\n     this._w = array[ offset + 3 ];\n \n     this._onChangeCallback();\n \n     return this;\n \n   }\n \n   toArray( array = [], offset = 0 ) {\n \n     array[ offset ] = this._x;\n     array[ offset + 1 ] = this._y;\n     array[ offset + 2 ] = this._z;\n     array[ offset + 3 ] = this._w;\n \n     return array;\n \n   }\n \n   fromBufferAttribute( attribute, index ) {\n \n     this._x = attribute.getX( index );\n     this._y = attribute.getY( index );\n     this._z = attribute.getZ( index );\n     this._w = attribute.getW( index );\n \n     return this;\n \n   }\n \n   _onChange( callback ) {\n \n     this._onChangeCallback = callback;\n \n     return this;\n \n   }\n \n   _onChangeCallback() {}\n \n }\n \n Quaternion.prototype.isQuaternion = true;\n \n class Vector3 {\n \n   constructor( x = 0, y = 0, z = 0 ) {\n \n     this.x = x;\n     this.y = y;\n     this.z = z;\n \n   }\n \n   set( x, y, z ) {\n \n     if ( z === undefined ) z = this.z; // sprite.scale.set(x,y)\n \n     this.x = x;\n     this.y = y;\n     this.z = z;\n \n     return this;\n \n   }\n \n   setScalar( scalar ) {\n \n     this.x = scalar;\n     this.y = scalar;\n     this.z = scalar;\n \n     return this;\n \n   }\n \n   setX( x ) {\n \n     this.x = x;\n \n     return this;\n \n   }\n \n   setY( y ) {\n \n     this.y = y;\n \n     return this;\n \n   }\n \n   setZ( z ) {\n \n     this.z = z;\n \n     return this;\n \n   }\n \n   setComponent( index, value ) {\n \n     switch ( index ) {\n \n       case 0: this.x = value; break;\n       case 1: this.y = value; break;\n       case 2: this.z = value; break;\n       default: throw new Error( 'index is out of range: ' + index );\n \n     }\n \n     return this;\n \n   }\n \n   getComponent( index ) {\n \n     switch ( index ) {\n \n       case 0: return this.x;\n       case 1: return this.y;\n       case 2: return this.z;\n       default: throw new Error( 'index is out of range: ' + index );\n \n     }\n \n   }\n \n   clone() {\n \n     return new this.constructor( this.x, this.y, this.z );\n \n   }\n \n   copy( v ) {\n \n     this.x = v.x;\n     this.y = v.y;\n     this.z = v.z;\n \n     return this;\n \n   }\n \n   add( v, w ) {\n \n     if ( w !== undefined ) {\n \n       console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n       return this.addVectors( v, w );\n \n     }\n \n     this.x += v.x;\n     this.y += v.y;\n     this.z += v.z;\n \n     return this;\n \n   }\n \n   addScalar( s ) {\n \n     this.x += s;\n     this.y += s;\n     this.z += s;\n \n     return this;\n \n   }\n \n   addVectors( a, b ) {\n \n     this.x = a.x + b.x;\n     this.y = a.y + b.y;\n     this.z = a.z + b.z;\n \n     return this;\n \n   }\n \n   addScaledVector( v, s ) {\n \n     this.x += v.x * s;\n     this.y += v.y * s;\n     this.z += v.z * s;\n \n     return this;\n \n   }\n \n   sub( v, w ) {\n \n     if ( w !== undefined ) {\n \n       console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n       return this.subVectors( v, w );\n \n     }\n \n     this.x -= v.x;\n     this.y -= v.y;\n     this.z -= v.z;\n \n     return this;\n \n   }\n \n   subScalar( s ) {\n \n     this.x -= s;\n     this.y -= s;\n     this.z -= s;\n \n     return this;\n \n   }\n \n   subVectors( a, b ) {\n \n     this.x = a.x - b.x;\n     this.y = a.y - b.y;\n     this.z = a.z - b.z;\n \n     return this;\n \n   }\n \n   multiply( v, w ) {\n \n     if ( w !== undefined ) {\n \n       console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n       return this.multiplyVectors( v, w );\n \n     }\n \n     this.x *= v.x;\n     this.y *= v.y;\n     this.z *= v.z;\n \n     return this;\n \n   }\n \n   multiplyScalar( scalar ) {\n \n     this.x *= scalar;\n     this.y *= scalar;\n     this.z *= scalar;\n \n     return this;\n \n   }\n \n   multiplyVectors( a, b ) {\n \n     this.x = a.x * b.x;\n     this.y = a.y * b.y;\n     this.z = a.z * b.z;\n \n     return this;\n \n   }\n \n   applyEuler( euler ) {\n \n     if ( ! ( euler && euler.isEuler ) ) {\n \n       console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n \n     }\n \n     return this.applyQuaternion( _quaternion$4.setFromEuler( euler ) );\n \n   }\n \n   applyAxisAngle( axis, angle ) {\n \n     return this.applyQuaternion( _quaternion$4.setFromAxisAngle( axis, angle ) );\n \n   }\n \n   applyMatrix3( m ) {\n \n     const x = this.x, y = this.y, z = this.z;\n     const e = m.elements;\n \n     this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n     this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n     this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n \n     return this;\n \n   }\n \n   applyNormalMatrix( m ) {\n \n     return this.applyMatrix3( m ).normalize();\n \n   }\n \n   applyMatrix4( m ) {\n \n     const x = this.x, y = this.y, z = this.z;\n     const e = m.elements;\n \n     const w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n \n     this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n     this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n     this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n \n     return this;\n \n   }\n \n   applyQuaternion( q ) {\n \n     const x = this.x, y = this.y, z = this.z;\n     const qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n \n     // calculate quat * vector\n \n     const ix = qw * x + qy * z - qz * y;\n     const iy = qw * y + qz * x - qx * z;\n     const iz = qw * z + qx * y - qy * x;\n     const iw = - qx * x - qy * y - qz * z;\n \n     // calculate result * inverse quat\n \n     this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n     this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n     this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n \n     return this;\n \n   }\n \n   project( camera ) {\n \n     return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n \n   }\n \n   unproject( camera ) {\n \n     return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n \n   }\n \n   transformDirection( m ) {\n \n     // input: THREE.Matrix4 affine matrix\n     // vector interpreted as a direction\n \n     const x = this.x, y = this.y, z = this.z;\n     const e = m.elements;\n \n     this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n     this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n     this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n \n     return this.normalize();\n \n   }\n \n   divide( v ) {\n \n     this.x /= v.x;\n     this.y /= v.y;\n     this.z /= v.z;\n \n     return this;\n \n   }\n \n   divideScalar( scalar ) {\n \n     return this.multiplyScalar( 1 / scalar );\n \n   }\n \n   min( v ) {\n \n     this.x = Math.min( this.x, v.x );\n     this.y = Math.min( this.y, v.y );\n     this.z = Math.min( this.z, v.z );\n \n     return this;\n \n   }\n \n   max( v ) {\n \n     this.x = Math.max( this.x, v.x );\n     this.y = Math.max( this.y, v.y );\n     this.z = Math.max( this.z, v.z );\n \n     return this;\n \n   }\n \n   clamp( min, max ) {\n \n     // assumes min < max, componentwise\n \n     this.x = Math.max( min.x, Math.min( max.x, this.x ) );\n     this.y = Math.max( min.y, Math.min( max.y, this.y ) );\n     this.z = Math.max( min.z, Math.min( max.z, this.z ) );\n \n     return this;\n \n   }\n \n   clampScalar( minVal, maxVal ) {\n \n     this.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n     this.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n     this.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n \n     return this;\n \n   }\n \n   clampLength( min, max ) {\n \n     const length = this.length();\n \n     return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n \n   }\n \n   floor() {\n \n     this.x = Math.floor( this.x );\n     this.y = Math.floor( this.y );\n     this.z = Math.floor( this.z );\n \n     return this;\n \n   }\n \n   ceil() {\n \n     this.x = Math.ceil( this.x );\n     this.y = Math.ceil( this.y );\n     this.z = Math.ceil( this.z );\n \n     return this;\n \n   }\n \n   round() {\n \n     this.x = Math.round( this.x );\n     this.y = Math.round( this.y );\n     this.z = Math.round( this.z );\n \n     return this;\n \n   }\n \n   roundToZero() {\n \n     this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n     this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n     this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n \n     return this;\n \n   }\n \n   negate() {\n \n     this.x = - this.x;\n     this.y = - this.y;\n     this.z = - this.z;\n \n     return this;\n \n   }\n \n   dot( v ) {\n \n     return this.x * v.x + this.y * v.y + this.z * v.z;\n \n   }\n \n   // TODO lengthSquared?\n \n   lengthSq() {\n \n     return this.x * this.x + this.y * this.y + this.z * this.z;\n \n   }\n \n   length() {\n \n     return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n \n   }\n \n   manhattanLength() {\n \n     return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n \n   }\n \n   normalize() {\n \n     return this.divideScalar( this.length() || 1 );\n \n   }\n \n   setLength( length ) {\n \n     return this.normalize().multiplyScalar( length );\n \n   }\n \n   lerp( v, alpha ) {\n \n     this.x += ( v.x - this.x ) * alpha;\n     this.y += ( v.y - this.y ) * alpha;\n     this.z += ( v.z - this.z ) * alpha;\n \n     return this;\n \n   }\n \n   lerpVectors( v1, v2, alpha ) {\n \n     this.x = v1.x + ( v2.x - v1.x ) * alpha;\n     this.y = v1.y + ( v2.y - v1.y ) * alpha;\n     this.z = v1.z + ( v2.z - v1.z ) * alpha;\n \n     return this;\n \n   }\n \n   cross( v, w ) {\n \n     if ( w !== undefined ) {\n \n       console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n       return this.crossVectors( v, w );\n \n     }\n \n     return this.crossVectors( this, v );\n \n   }\n \n   crossVectors( a, b ) {\n \n     const ax = a.x, ay = a.y, az = a.z;\n     const bx = b.x, by = b.y, bz = b.z;\n \n     this.x = ay * bz - az * by;\n     this.y = az * bx - ax * bz;\n     this.z = ax * by - ay * bx;\n \n     return this;\n \n   }\n \n   projectOnVector( v ) {\n \n     const denominator = v.lengthSq();\n \n     if ( denominator === 0 ) return this.set( 0, 0, 0 );\n \n     const scalar = v.dot( this ) / denominator;\n \n     return this.copy( v ).multiplyScalar( scalar );\n \n   }\n \n   projectOnPlane( planeNormal ) {\n \n     _vector$c.copy( this ).projectOnVector( planeNormal );\n \n     return this.sub( _vector$c );\n \n   }\n \n   reflect( normal ) {\n \n     // reflect incident vector off plane orthogonal to normal\n     // normal is assumed to have unit length\n \n     return this.sub( _vector$c.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n \n   }\n \n   angleTo( v ) {\n \n     const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n \n     if ( denominator === 0 ) return Math.PI / 2;\n \n     const theta = this.dot( v ) / denominator;\n \n     // clamp, to handle numerical problems\n \n     return Math.acos( clamp( theta, - 1, 1 ) );\n \n   }\n \n   distanceTo( v ) {\n \n     return Math.sqrt( this.distanceToSquared( v ) );\n \n   }\n \n   distanceToSquared( v ) {\n \n     const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n \n     return dx * dx + dy * dy + dz * dz;\n \n   }\n \n   manhattanDistanceTo( v ) {\n \n     return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n \n   }\n \n   setFromSpherical( s ) {\n \n     return this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n \n   }\n \n   setFromSphericalCoords( radius, phi, theta ) {\n \n     const sinPhiRadius = Math.sin( phi ) * radius;\n \n     this.x = sinPhiRadius * Math.sin( theta );\n     this.y = Math.cos( phi ) * radius;\n     this.z = sinPhiRadius * Math.cos( theta );\n \n     return this;\n \n   }\n \n   setFromCylindrical( c ) {\n \n     return this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n \n   }\n \n   setFromCylindricalCoords( radius, theta, y ) {\n \n     this.x = radius * Math.sin( theta );\n     this.y = y;\n     this.z = radius * Math.cos( theta );\n \n     return this;\n \n   }\n \n   setFromMatrixPosition( m ) {\n \n     const e = m.elements;\n \n     this.x = e[ 12 ];\n     this.y = e[ 13 ];\n     this.z = e[ 14 ];\n \n     return this;\n \n   }\n \n   setFromMatrixScale( m ) {\n \n     const sx = this.setFromMatrixColumn( m, 0 ).length();\n     const sy = this.setFromMatrixColumn( m, 1 ).length();\n     const sz = this.setFromMatrixColumn( m, 2 ).length();\n \n     this.x = sx;\n     this.y = sy;\n     this.z = sz;\n \n     return this;\n \n   }\n \n   setFromMatrixColumn( m, index ) {\n \n     return this.fromArray( m.elements, index * 4 );\n \n   }\n \n   setFromMatrix3Column( m, index ) {\n \n     return this.fromArray( m.elements, index * 3 );\n \n   }\n \n   equals( v ) {\n \n     return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n \n   }\n \n   fromArray( array, offset = 0 ) {\n \n     this.x = array[ offset ];\n     this.y = array[ offset + 1 ];\n     this.z = array[ offset + 2 ];\n \n     return this;\n \n   }\n \n   toArray( array = [], offset = 0 ) {\n \n     array[ offset ] = this.x;\n     array[ offset + 1 ] = this.y;\n     array[ offset + 2 ] = this.z;\n \n     return array;\n \n   }\n \n   fromBufferAttribute( attribute, index, offset ) {\n \n     if ( offset !== undefined ) {\n \n       console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n \n     }\n \n     this.x = attribute.getX( index );\n     this.y = attribute.getY( index );\n     this.z = attribute.getZ( index );\n \n     return this;\n \n   }\n \n   random() {\n \n     this.x = Math.random();\n     this.y = Math.random();\n     this.z = Math.random();\n \n     return this;\n \n   }\n \n   randomDirection() {\n \n     // Derived from https://mathworld.wolfram.com/SpherePointPicking.html\n \n     const u = ( Math.random() - 0.5 ) * 2;\n     const t = Math.random() * Math.PI * 2;\n     const f = Math.sqrt( 1 - u ** 2 );\n \n     this.x = f * Math.cos( t );\n     this.y = f * Math.sin( t );\n     this.z = u;\n \n     return this;\n \n   }\n \n   *[ Symbol.iterator ]() {\n \n     yield this.x;\n     yield this.y;\n     yield this.z;\n \n   }\n \n }\n \n Vector3.prototype.isVector3 = true;\n \n const _vector$c = /*@__PURE__*/ new Vector3();\n const _quaternion$4 = /*@__PURE__*/ new Quaternion();\n \n class Box3 {\n \n   constructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {\n \n     this.min = min;\n     this.max = max;\n \n   }\n \n   set( min, max ) {\n \n     this.min.copy( min );\n     this.max.copy( max );\n \n     return this;\n \n   }\n \n   setFromArray( array ) {\n \n     let minX = + Infinity;\n     let minY = + Infinity;\n     let minZ = + Infinity;\n \n     let maxX = - Infinity;\n     let maxY = - Infinity;\n     let maxZ = - Infinity;\n \n     for ( let i = 0, l = array.length; i < l; i += 3 ) {\n \n       const x = array[ i ];\n       const y = array[ i + 1 ];\n       const z = array[ i + 2 ];\n \n       if ( x < minX ) minX = x;\n       if ( y < minY ) minY = y;\n       if ( z < minZ ) minZ = z;\n \n       if ( x > maxX ) maxX = x;\n       if ( y > maxY ) maxY = y;\n       if ( z > maxZ ) maxZ = z;\n \n     }\n \n     this.min.set( minX, minY, minZ );\n     this.max.set( maxX, maxY, maxZ );\n \n     return this;\n \n   }\n \n   setFromBufferAttribute( attribute ) {\n \n     let minX = + Infinity;\n     let minY = + Infinity;\n     let minZ = + Infinity;\n \n     let maxX = - Infinity;\n     let maxY = - Infinity;\n     let maxZ = - Infinity;\n \n     for ( let i = 0, l = attribute.count; i < l; i ++ ) {\n \n       const x = attribute.getX( i );\n       const y = attribute.getY( i );\n       const z = attribute.getZ( i );\n \n       if ( x < minX ) minX = x;\n       if ( y < minY ) minY = y;\n       if ( z < minZ ) minZ = z;\n \n       if ( x > maxX ) maxX = x;\n       if ( y > maxY ) maxY = y;\n       if ( z > maxZ ) maxZ = z;\n \n     }\n \n     this.min.set( minX, minY, minZ );\n     this.max.set( maxX, maxY, maxZ );\n \n     return this;\n \n   }\n \n   setFromPoints( points ) {\n \n     this.makeEmpty();\n \n     for ( let i = 0, il = points.length; i < il; i ++ ) {\n \n       this.expandByPoint( points[ i ] );\n \n     }\n \n     return this;\n \n   }\n \n   setFromCenterAndSize( center, size ) {\n \n     const halfSize = _vector$b.copy( size ).multiplyScalar( 0.5 );\n \n     this.min.copy( center ).sub( halfSize );\n     this.max.copy( center ).add( halfSize );\n \n     return this;\n \n   }\n \n   setFromObject( object ) {\n \n     this.makeEmpty();\n \n     return this.expandByObject( object );\n \n   }\n \n   clone() {\n \n     return new this.constructor().copy( this );\n \n   }\n \n   copy( box ) {\n \n     this.min.copy( box.min );\n     this.max.copy( box.max );\n \n     return this;\n \n   }\n \n   makeEmpty() {\n \n     this.min.x = this.min.y = this.min.z = + Infinity;\n     this.max.x = this.max.y = this.max.z = - Infinity;\n \n     return this;\n \n   }\n \n   isEmpty() {\n \n     // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n \n     return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n \n   }\n \n   getCenter( target ) {\n \n     return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n \n   }\n \n   getSize( target ) {\n \n     return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n \n   }\n \n   expandByPoint( point ) {\n \n     this.min.min( point );\n     this.max.max( point );\n \n     return this;\n \n   }\n \n   expandByVector( vector ) {\n \n     this.min.sub( vector );\n     this.max.add( vector );\n \n     return this;\n \n   }\n \n   expandByScalar( scalar ) {\n \n     this.min.addScalar( - scalar );\n     this.max.addScalar( scalar );\n \n     return this;\n \n   }\n \n   expandByObject( object ) {\n \n     // Computes the world-axis-aligned bounding box of an object (including its children),\n     // accounting for both the object's, and children's, world transforms\n \n     object.updateWorldMatrix( false, false );\n \n     const geometry = object.geometry;\n \n     if ( geometry !== undefined ) {\n \n       if ( geometry.boundingBox === null ) {\n \n         geometry.computeBoundingBox();\n \n       }\n \n       _box$3.copy( geometry.boundingBox );\n       _box$3.applyMatrix4( object.matrixWorld );\n \n       this.union( _box$3 );\n \n     }\n \n     const children = object.children;\n \n     for ( let i = 0, l = children.length; i < l; i ++ ) {\n \n       this.expandByObject( children[ i ] );\n \n     }\n \n     return this;\n \n   }\n \n   containsPoint( point ) {\n \n     return point.x < this.min.x || point.x > this.max.x ||\n       point.y < this.min.y || point.y > this.max.y ||\n       point.z < this.min.z || point.z > this.max.z ? false : true;\n \n   }\n \n   containsBox( box ) {\n \n     return this.min.x <= box.min.x && box.max.x <= this.max.x &&\n       this.min.y <= box.min.y && box.max.y <= this.max.y &&\n       this.min.z <= box.min.z && box.max.z <= this.max.z;\n \n   }\n \n   getParameter( point, target ) {\n \n     // This can potentially have a divide by zero if the box\n     // has a size dimension of 0.\n \n     return target.set(\n       ( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n       ( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n       ( point.z - this.min.z ) / ( this.max.z - this.min.z )\n     );\n \n   }\n \n   intersectsBox( box ) {\n \n     // using 6 splitting planes to rule out intersections.\n     return box.max.x < this.min.x || box.min.x > this.max.x ||\n       box.max.y < this.min.y || box.min.y > this.max.y ||\n       box.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n \n   }\n \n   intersectsSphere( sphere ) {\n \n     // Find the point on the AABB closest to the sphere center.\n     this.clampPoint( sphere.center, _vector$b );\n \n     // If that point is inside the sphere, the AABB and sphere intersect.\n     return _vector$b.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n \n   }\n \n   intersectsPlane( plane ) {\n \n     // We compute the minimum and maximum dot product values. If those values\n     // are on the same side (back or front) of the plane, then there is no intersection.\n \n     let min, max;\n \n     if ( plane.normal.x > 0 ) {\n \n       min = plane.normal.x * this.min.x;\n       max = plane.normal.x * this.max.x;\n \n     } else {\n \n       min = plane.normal.x * this.max.x;\n       max = plane.normal.x * this.min.x;\n \n     }\n \n     if ( plane.normal.y > 0 ) {\n \n       min += plane.normal.y * this.min.y;\n       max += plane.normal.y * this.max.y;\n \n     } else {\n \n       min += plane.normal.y * this.max.y;\n       max += plane.normal.y * this.min.y;\n \n     }\n \n     if ( plane.normal.z > 0 ) {\n \n       min += plane.normal.z * this.min.z;\n       max += plane.normal.z * this.max.z;\n \n     } else {\n \n       min += plane.normal.z * this.max.z;\n       max += plane.normal.z * this.min.z;\n \n     }\n \n     return ( min <= - plane.constant && max >= - plane.constant );\n \n   }\n \n   intersectsTriangle( triangle ) {\n \n     if ( this.isEmpty() ) {\n \n       return false;\n \n     }\n \n     // compute box center and extents\n     this.getCenter( _center );\n     _extents.subVectors( this.max, _center );\n \n     // translate triangle to aabb origin\n     _v0$2.subVectors( triangle.a, _center );\n     _v1$7.subVectors( triangle.b, _center );\n     _v2$3.subVectors( triangle.c, _center );\n \n     // compute edge vectors for triangle\n     _f0.subVectors( _v1$7, _v0$2 );\n     _f1.subVectors( _v2$3, _v1$7 );\n     _f2.subVectors( _v0$2, _v2$3 );\n \n     // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n     // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n     // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n     let axes = [\n       0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n       _f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n       - _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n     ];\n     if ( ! satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents ) ) {\n \n       return false;\n \n     }\n \n     // test 3 face normals from the aabb\n     axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n     if ( ! satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents ) ) {\n \n       return false;\n \n     }\n \n     // finally testing the face normal of the triangle\n     // use already existing triangle edge vectors here\n     _triangleNormal.crossVectors( _f0, _f1 );\n     axes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n \n     return satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents );\n \n   }\n \n   clampPoint( point, target ) {\n \n     return target.copy( point ).clamp( this.min, this.max );\n \n   }\n \n   distanceToPoint( point ) {\n \n     const clampedPoint = _vector$b.copy( point ).clamp( this.min, this.max );\n \n     return clampedPoint.sub( point ).length();\n \n   }\n \n   getBoundingSphere( target ) {\n \n     this.getCenter( target.center );\n \n     target.radius = this.getSize( _vector$b ).length() * 0.5;\n \n     return target;\n \n   }\n \n   intersect( box ) {\n \n     this.min.max( box.min );\n     this.max.min( box.max );\n \n     // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n     if ( this.isEmpty() ) this.makeEmpty();\n \n     return this;\n \n   }\n \n   union( box ) {\n \n     this.min.min( box.min );\n     this.max.max( box.max );\n \n     return this;\n \n   }\n \n   applyMatrix4( matrix ) {\n \n     // transform of empty box is an empty box.\n     if ( this.isEmpty() ) return this;\n \n     // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n     _points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n     _points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n     _points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n     _points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n     _points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n     _points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n     _points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n     _points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n \n     this.setFromPoints( _points );\n \n     return this;\n \n   }\n \n   translate( offset ) {\n \n     this.min.add( offset );\n     this.max.add( offset );\n \n     return this;\n \n   }\n \n   equals( box ) {\n \n     return box.min.equals( this.min ) && box.max.equals( this.max );\n \n   }\n \n }\n \n Box3.prototype.isBox3 = true;\n \n const _points = [\n   /*@__PURE__*/ new Vector3(),\n   /*@__PURE__*/ new Vector3(),\n   /*@__PURE__*/ new Vector3(),\n   /*@__PURE__*/ new Vector3(),\n   /*@__PURE__*/ new Vector3(),\n   /*@__PURE__*/ new Vector3(),\n   /*@__PURE__*/ new Vector3(),\n   /*@__PURE__*/ new Vector3()\n ];\n \n const _vector$b = /*@__PURE__*/ new Vector3();\n \n const _box$3 = /*@__PURE__*/ new Box3();\n \n // triangle centered vertices\n \n const _v0$2 = /*@__PURE__*/ new Vector3();\n const _v1$7 = /*@__PURE__*/ new Vector3();\n const _v2$3 = /*@__PURE__*/ new Vector3();\n \n // triangle edge vectors\n \n const _f0 = /*@__PURE__*/ new Vector3();\n const _f1 = /*@__PURE__*/ new Vector3();\n const _f2 = /*@__PURE__*/ new Vector3();\n \n const _center = /*@__PURE__*/ new Vector3();\n const _extents = /*@__PURE__*/ new Vector3();\n const _triangleNormal = /*@__PURE__*/ new Vector3();\n const _testAxis = /*@__PURE__*/ new Vector3();\n \n function satForAxes( axes, v0, v1, v2, extents ) {\n \n   for ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n \n     _testAxis.fromArray( axes, i );\n     // project the aabb onto the seperating axis\n     const r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n     // project all 3 vertices of the triangle onto the seperating axis\n     const p0 = v0.dot( _testAxis );\n     const p1 = v1.dot( _testAxis );\n     const p2 = v2.dot( _testAxis );\n     // actual test, basically see if either of the most extreme of the triangle points intersects r\n     if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n \n       // points of the projected triangle are outside the projected half-length of the aabb\n       // the axis is seperating and we can exit\n       return false;\n \n     }\n \n   }\n \n   return true;\n \n }\n \n const _box$2 = /*@__PURE__*/ new Box3();\n const _v1$6 = /*@__PURE__*/ new Vector3();\n const _toFarthestPoint = /*@__PURE__*/ new Vector3();\n const _toPoint = /*@__PURE__*/ new Vector3();\n \n class Sphere {\n \n   constructor( center = new Vector3(), radius = - 1 ) {\n \n     this.center = center;\n     this.radius = radius;\n \n   }\n \n   set( center, radius ) {\n \n     this.center.copy( center );\n     this.radius = radius;\n \n     return this;\n \n   }\n \n   setFromPoints( points, optionalCenter ) {\n \n     const center = this.center;\n \n     if ( optionalCenter !== undefined ) {\n \n       center.copy( optionalCenter );\n \n     } else {\n \n       _box$2.setFromPoints( points ).getCenter( center );\n \n     }\n \n     let maxRadiusSq = 0;\n \n     for ( let i = 0, il = points.length; i < il; i ++ ) {\n \n       maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n \n     }\n \n     this.radius = Math.sqrt( maxRadiusSq );\n \n     return this;\n \n   }\n \n   copy( sphere ) {\n \n     this.center.copy( sphere.center );\n     this.radius = sphere.radius;\n \n     return this;\n \n   }\n \n   isEmpty() {\n \n     return ( this.radius < 0 );\n \n   }\n \n   makeEmpty() {\n \n     this.center.set( 0, 0, 0 );\n     this.radius = - 1;\n \n     return this;\n \n   }\n \n   containsPoint( point ) {\n \n     return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n \n   }\n \n   distanceToPoint( point ) {\n \n     return ( point.distanceTo( this.center ) - this.radius );\n \n   }\n \n   intersectsSphere( sphere ) {\n \n     const radiusSum = this.radius + sphere.radius;\n \n     return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n \n   }\n \n   intersectsBox( box ) {\n \n     return box.intersectsSphere( this );\n \n   }\n \n   intersectsPlane( plane ) {\n \n     return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n \n   }\n \n   clampPoint( point, target ) {\n \n     const deltaLengthSq = this.center.distanceToSquared( point );\n \n     target.copy( point );\n \n     if ( deltaLengthSq > ( this.radius * this.radius ) ) {\n \n       target.sub( this.center ).normalize();\n       target.multiplyScalar( this.radius ).add( this.center );\n \n     }\n \n     return target;\n \n   }\n \n   getBoundingBox( target ) {\n \n     if ( this.isEmpty() ) {\n \n       // Empty sphere produces empty bounding box\n       target.makeEmpty();\n       return target;\n \n     }\n \n     target.set( this.center, this.center );\n     target.expandByScalar( this.radius );\n \n     return target;\n \n   }\n \n   applyMatrix4( matrix ) {\n \n     this.center.applyMatrix4( matrix );\n     this.radius = this.radius * matrix.getMaxScaleOnAxis();\n \n     return this;\n \n   }\n \n   translate( offset ) {\n \n     this.center.add( offset );\n \n     return this;\n \n   }\n \n   expandByPoint( point ) {\n \n     // from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671\n \n     _toPoint.subVectors( point, this.center );\n \n     const lengthSq = _toPoint.lengthSq();\n \n     if ( lengthSq > ( this.radius * this.radius ) ) {\n \n       const length = Math.sqrt( lengthSq );\n       const missingRadiusHalf = ( length - this.radius ) * 0.5;\n \n       // Nudge this sphere towards the target point. Add half the missing distance to radius,\n       // and the other half to position. This gives a tighter enclosure, instead of if\n       // the whole missing distance were just added to radius.\n \n       this.center.add( _toPoint.multiplyScalar( missingRadiusHalf / length ) );\n       this.radius += missingRadiusHalf;\n \n     }\n \n     return this;\n \n   }\n \n   union( sphere ) {\n \n     // from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769\n \n     // To enclose another sphere into this sphere, we only need to enclose two points:\n     // 1) Enclose the farthest point on the other sphere into this sphere.\n     // 2) Enclose the opposite point of the farthest point into this sphere.\n \n     _toFarthestPoint.subVectors( sphere.center, this.center ).normalize().multiplyScalar( sphere.radius );\n \n     this.expandByPoint( _v1$6.copy( sphere.center ).add( _toFarthestPoint ) );\n     this.expandByPoint( _v1$6.copy( sphere.center ).sub( _toFarthestPoint ) );\n \n     return this;\n \n   }\n \n   equals( sphere ) {\n \n     return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n \n   }\n \n   clone() {\n \n     return new this.constructor().copy( this );\n \n   }\n \n }\n \n const _vector$a = /*@__PURE__*/ new Vector3();\n const _segCenter = /*@__PURE__*/ new Vector3();\n const _segDir = /*@__PURE__*/ new Vector3();\n const _diff = /*@__PURE__*/ new Vector3();\n \n const _edge1 = /*@__PURE__*/ new Vector3();\n const _edge2 = /*@__PURE__*/ new Vector3();\n const _normal$1 = /*@__PURE__*/ new Vector3();\n \n class Ray {\n \n   constructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {\n \n     this.origin = origin;\n     this.direction = direction;\n \n   }\n \n   set( origin, direction ) {\n \n     this.origin.copy( origin );\n     this.direction.copy( direction );\n \n     return this;\n \n   }\n \n   copy( ray ) {\n \n     this.origin.copy( ray.origin );\n     this.direction.copy( ray.direction );\n \n     return this;\n \n   }\n \n   at( t, target ) {\n \n     return target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n \n   }\n \n   lookAt( v ) {\n \n     this.direction.copy( v ).sub( this.origin ).normalize();\n \n     return this;\n \n   }\n \n   recast( t ) {\n \n     this.origin.copy( this.at( t, _vector$a ) );\n \n     return this;\n \n   }\n \n   closestPointToPoint( point, target ) {\n \n     target.subVectors( point, this.origin );\n \n     const directionDistance = target.dot( this.direction );\n \n     if ( directionDistance < 0 ) {\n \n       return target.copy( this.origin );\n \n     }\n \n     return target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n \n   }\n \n   distanceToPoint( point ) {\n \n     return Math.sqrt( this.distanceSqToPoint( point ) );\n \n   }\n \n   distanceSqToPoint( point ) {\n \n     const directionDistance = _vector$a.subVectors( point, this.origin ).dot( this.direction );\n \n     // point behind the ray\n \n     if ( directionDistance < 0 ) {\n \n       return this.origin.distanceToSquared( point );\n \n     }\n \n     _vector$a.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n \n     return _vector$a.distanceToSquared( point );\n \n   }\n \n   distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n \n     // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n     // It returns the min distance between the ray and the segment\n     // defined by v0 and v1\n     // It can also set two optional targets :\n     // - The closest point on the ray\n     // - The closest point on the segment\n \n     _segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n     _segDir.copy( v1 ).sub( v0 ).normalize();\n     _diff.copy( this.origin ).sub( _segCenter );\n \n     const segExtent = v0.distanceTo( v1 ) * 0.5;\n     const a01 = - this.direction.dot( _segDir );\n     const b0 = _diff.dot( this.direction );\n     const b1 = - _diff.dot( _segDir );\n     const c = _diff.lengthSq();\n     const det = Math.abs( 1 - a01 * a01 );\n     let s0, s1, sqrDist, extDet;\n \n     if ( det > 0 ) {\n \n       // The ray and segment are not parallel.\n \n       s0 = a01 * b1 - b0;\n       s1 = a01 * b0 - b1;\n       extDet = segExtent * det;\n \n       if ( s0 >= 0 ) {\n \n         if ( s1 >= - extDet ) {\n \n           if ( s1 <= extDet ) {\n \n             // region 0\n             // Minimum at interior points of ray and segment.\n \n             const invDet = 1 / det;\n             s0 *= invDet;\n             s1 *= invDet;\n             sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n \n           } else {\n \n             // region 1\n \n             s1 = segExtent;\n             s0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n             sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n \n           }\n \n         } else {\n \n           // region 5\n \n           s1 = - segExtent;\n           s0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n           sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n \n         }\n \n       } else {\n \n         if ( s1 <= - extDet ) {\n \n           // region 4\n \n           s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n           s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n           sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n \n         } else if ( s1 <= extDet ) {\n \n           // region 3\n \n           s0 = 0;\n           s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n           sqrDist = s1 * ( s1 + 2 * b1 ) + c;\n \n         } else {\n \n           // region 2\n \n           s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n           s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n           sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n \n         }\n \n       }\n \n     } else {\n \n       // Ray and segment are parallel.\n \n       s1 = ( a01 > 0 ) ? - segExtent : segExtent;\n       s0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n       sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n \n     }\n \n     if ( optionalPointOnRay ) {\n \n       optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n \n     }\n \n     if ( optionalPointOnSegment ) {\n \n       optionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\n \n     }\n \n     return sqrDist;\n \n   }\n \n   intersectSphere( sphere, target ) {\n \n     _vector$a.subVectors( sphere.center, this.origin );\n     const tca = _vector$a.dot( this.direction );\n     const d2 = _vector$a.dot( _vector$a ) - tca * tca;\n     const radius2 = sphere.radius * sphere.radius;\n \n     if ( d2 > radius2 ) return null;\n \n     const thc = Math.sqrt( radius2 - d2 );\n \n     // t0 = first intersect point - entrance on front of sphere\n     const t0 = tca - thc;\n \n     // t1 = second intersect point - exit point on back of sphere\n     const t1 = tca + thc;\n \n     // test to see if both t0 and t1 are behind the ray - if so, return null\n     if ( t0 < 0 && t1 < 0 ) return null;\n \n     // test to see if t0 is behind the ray:\n     // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n     // in order to always return an intersect point that is in front of the ray.\n     if ( t0 < 0 ) return this.at( t1, target );\n \n     // else t0 is in front of the ray, so return the first collision point scaled by t0\n     return this.at( t0, target );\n \n   }\n \n   intersectsSphere( sphere ) {\n \n     return this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n \n   }\n \n   distanceToPlane( plane ) {\n \n     const denominator = plane.normal.dot( this.direction );\n \n     if ( denominator === 0 ) {\n \n       // line is coplanar, return origin\n       if ( plane.distanceToPoint( this.origin ) === 0 ) {\n \n         return 0;\n \n       }\n \n       // Null is preferable to undefined since undefined means.... it is undefined\n \n       return null;\n \n     }\n \n     const t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n \n     // Return if the ray never intersects the plane\n \n     return t >= 0 ? t : null;\n \n   }\n \n   intersectPlane( plane, target ) {\n \n     const t = this.distanceToPlane( plane );\n \n     if ( t === null ) {\n \n       return null;\n \n     }\n \n     return this.at( t, target );\n \n   }\n \n   intersectsPlane( plane ) {\n \n     // check if the ray lies on the plane first\n \n     const distToPoint = plane.distanceToPoint( this.origin );\n \n     if ( distToPoint === 0 ) {\n \n       return true;\n \n     }\n \n     const denominator = plane.normal.dot( this.direction );\n \n     if ( denominator * distToPoint < 0 ) {\n \n       return true;\n \n     }\n \n     // ray origin is behind the plane (and is pointing behind it)\n \n     return false;\n \n   }\n \n   intersectBox( box, target ) {\n \n     let tmin, tmax, tymin, tymax, tzmin, tzmax;\n \n     const invdirx = 1 / this.direction.x,\n       invdiry = 1 / this.direction.y,\n       invdirz = 1 / this.direction.z;\n \n     const origin = this.origin;\n \n     if ( invdirx >= 0 ) {\n \n       tmin = ( box.min.x - origin.x ) * invdirx;\n       tmax = ( box.max.x - origin.x ) * invdirx;\n \n     } else {\n \n       tmin = ( box.max.x - origin.x ) * invdirx;\n       tmax = ( box.min.x - origin.x ) * invdirx;\n \n     }\n \n     if ( invdiry >= 0 ) {\n \n       tymin = ( box.min.y - origin.y ) * invdiry;\n       tymax = ( box.max.y - origin.y ) * invdiry;\n \n     } else {\n \n       tymin = ( box.max.y - origin.y ) * invdiry;\n       tymax = ( box.min.y - origin.y ) * invdiry;\n \n     }\n \n     if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n \n     // These lines also handle the case where tmin or tmax is NaN\n     // (result of 0 * Infinity). x !== x returns true if x is NaN\n \n     if ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n \n     if ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n \n     if ( invdirz >= 0 ) {\n \n       tzmin = ( box.min.z - origin.z ) * invdirz;\n       tzmax = ( box.max.z - origin.z ) * invdirz;\n \n     } else {\n \n       tzmin = ( box.max.z - origin.z ) * invdirz;\n       tzmax = ( box.min.z - origin.z ) * invdirz;\n \n     }\n \n     if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n \n     if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n \n     if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n \n     //return point closest to the ray (positive side)\n \n     if ( tmax < 0 ) return null;\n \n     return this.at( tmin >= 0 ? tmin : tmax, target );\n \n   }\n \n   intersectsBox( box ) {\n \n     return this.intersectBox( box, _vector$a ) !== null;\n \n   }\n \n   intersectTriangle( a, b, c, backfaceCulling, target ) {\n \n     // Compute the offset origin, edges, and normal.\n \n     // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n \n     _edge1.subVectors( b, a );\n     _edge2.subVectors( c, a );\n     _normal$1.crossVectors( _edge1, _edge2 );\n \n     // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n     // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n     //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n     //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n     //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n     let DdN = this.direction.dot( _normal$1 );\n     let sign;\n \n     if ( DdN > 0 ) {\n \n       if ( backfaceCulling ) return null;\n       sign = 1;\n \n     } else if ( DdN < 0 ) {\n \n       sign = - 1;\n       DdN = - DdN;\n \n     } else {\n \n       return null;\n \n     }\n \n     _diff.subVectors( this.origin, a );\n     const DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n \n     // b1 < 0, no intersection\n     if ( DdQxE2 < 0 ) {\n \n       return null;\n \n     }\n \n     const DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n \n     // b2 < 0, no intersection\n     if ( DdE1xQ < 0 ) {\n \n       return null;\n \n     }\n \n     // b1+b2 > 1, no intersection\n     if ( DdQxE2 + DdE1xQ > DdN ) {\n \n       return null;\n \n     }\n \n     // Line intersects triangle, check if ray does.\n     const QdN = - sign * _diff.dot( _normal$1 );\n \n     // t < 0, no intersection\n     if ( QdN < 0 ) {\n \n       return null;\n \n     }\n \n     // Ray intersects triangle.\n     return this.at( QdN / DdN, target );\n \n   }\n \n   applyMatrix4( matrix4 ) {\n \n     this.origin.applyMatrix4( matrix4 );\n     this.direction.transformDirection( matrix4 );\n \n     return this;\n \n   }\n \n   equals( ray ) {\n \n     return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n \n   }\n \n   clone() {\n \n     return new this.constructor().copy( this );\n \n   }\n \n }\n \n class Matrix4 {\n \n   constructor() {\n \n     this.elements = [\n \n       1, 0, 0, 0,\n       0, 1, 0, 0,\n       0, 0, 1, 0,\n       0, 0, 0, 1\n \n     ];\n \n     if ( arguments.length > 0 ) {\n \n       console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n \n     }\n \n   }\n \n   set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n \n     const te = this.elements;\n \n     te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n     te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n     te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n     te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n \n     return this;\n \n   }\n \n   identity() {\n \n     this.set(\n \n       1, 0, 0, 0,\n       0, 1, 0, 0,\n       0, 0, 1, 0,\n       0, 0, 0, 1\n \n     );\n \n     return this;\n \n   }\n \n   clone() {\n \n     return new Matrix4().fromArray( this.elements );\n \n   }\n \n   copy( m ) {\n \n     const te = this.elements;\n     const me = m.elements;\n \n     te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n     te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n     te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n     te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n \n     return this;\n \n   }\n \n   copyPosition( m ) {\n \n     const te = this.elements, me = m.elements;\n \n     te[ 12 ] = me[ 12 ];\n     te[ 13 ] = me[ 13 ];\n     te[ 14 ] = me[ 14 ];\n \n     return this;\n \n   }\n \n   setFromMatrix3( m ) {\n \n     const me = m.elements;\n \n     this.set(\n \n       me[ 0 ], me[ 3 ], me[ 6 ], 0,\n       me[ 1 ], me[ 4 ], me[ 7 ], 0,\n       me[ 2 ], me[ 5 ], me[ 8 ], 0,\n       0, 0, 0, 1\n \n     );\n \n     return this;\n \n   }\n \n   extractBasis( xAxis, yAxis, zAxis ) {\n \n     xAxis.setFromMatrixColumn( this, 0 );\n     yAxis.setFromMatrixColumn( this, 1 );\n     zAxis.setFromMatrixColumn( this, 2 );\n \n     return this;\n \n   }\n \n   makeBasis( xAxis, yAxis, zAxis ) {\n \n     this.set(\n       xAxis.x, yAxis.x, zAxis.x, 0,\n       xAxis.y, yAxis.y, zAxis.y, 0,\n       xAxis.z, yAxis.z, zAxis.z, 0,\n       0, 0, 0, 1\n     );\n \n     return this;\n \n   }\n \n   extractRotation( m ) {\n \n     // this method does not support reflection matrices\n \n     const te = this.elements;\n     const me = m.elements;\n \n     const scaleX = 1 / _v1$5.setFromMatrixColumn( m, 0 ).length();\n     const scaleY = 1 / _v1$5.setFromMatrixColumn( m, 1 ).length();\n     const scaleZ = 1 / _v1$5.setFromMatrixColumn( m, 2 ).length();\n \n     te[ 0 ] = me[ 0 ] * scaleX;\n     te[ 1 ] = me[ 1 ] * scaleX;\n     te[ 2 ] = me[ 2 ] * scaleX;\n     te[ 3 ] = 0;\n \n     te[ 4 ] = me[ 4 ] * scaleY;\n     te[ 5 ] = me[ 5 ] * scaleY;\n     te[ 6 ] = me[ 6 ] * scaleY;\n     te[ 7 ] = 0;\n \n     te[ 8 ] = me[ 8 ] * scaleZ;\n     te[ 9 ] = me[ 9 ] * scaleZ;\n     te[ 10 ] = me[ 10 ] * scaleZ;\n     te[ 11 ] = 0;\n \n     te[ 12 ] = 0;\n     te[ 13 ] = 0;\n     te[ 14 ] = 0;\n     te[ 15 ] = 1;\n \n     return this;\n \n   }\n \n   makeRotationFromEuler( euler ) {\n \n     if ( ! ( euler && euler.isEuler ) ) {\n \n       console.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n \n     }\n \n     const te = this.elements;\n \n     const x = euler.x, y = euler.y, z = euler.z;\n     const a = Math.cos( x ), b = Math.sin( x );\n     const c = Math.cos( y ), d = Math.sin( y );\n     const e = Math.cos( z ), f = Math.sin( z );\n \n     if ( euler.order === 'XYZ' ) {\n \n       const ae = a * e, af = a * f, be = b * e, bf = b * f;\n \n       te[ 0 ] = c * e;\n       te[ 4 ] = - c * f;\n       te[ 8 ] = d;\n \n       te[ 1 ] = af + be * d;\n       te[ 5 ] = ae - bf * d;\n       te[ 9 ] = - b * c;\n \n       te[ 2 ] = bf - ae * d;\n       te[ 6 ] = be + af * d;\n       te[ 10 ] = a * c;\n \n     } else if ( euler.order === 'YXZ' ) {\n \n       const ce = c * e, cf = c * f, de = d * e, df = d * f;\n \n       te[ 0 ] = ce + df * b;\n       te[ 4 ] = de * b - cf;\n       te[ 8 ] = a * d;\n \n       te[ 1 ] = a * f;\n       te[ 5 ] = a * e;\n       te[ 9 ] = - b;\n \n       te[ 2 ] = cf * b - de;\n       te[ 6 ] = df + ce * b;\n       te[ 10 ] = a * c;\n \n     } else if ( euler.order === 'ZXY' ) {\n \n       const ce = c * e, cf = c * f, de = d * e, df = d * f;\n \n       te[ 0 ] = ce - df * b;\n       te[ 4 ] = - a * f;\n       te[ 8 ] = de + cf * b;\n \n       te[ 1 ] = cf + de * b;\n       te[ 5 ] = a * e;\n       te[ 9 ] = df - ce * b;\n \n       te[ 2 ] = - a * d;\n       te[ 6 ] = b;\n       te[ 10 ] = a * c;\n \n     } else if ( euler.order === 'ZYX' ) {\n \n       const ae = a * e, af = a * f, be = b * e, bf = b * f;\n \n       te[ 0 ] = c * e;\n       te[ 4 ] = be * d - af;\n       te[ 8 ] = ae * d + bf;\n \n       te[ 1 ] = c * f;\n       te[ 5 ] = bf * d + ae;\n       te[ 9 ] = af * d - be;\n \n       te[ 2 ] = - d;\n       te[ 6 ] = b * c;\n       te[ 10 ] = a * c;\n \n     } else if ( euler.order === 'YZX' ) {\n \n       const ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n \n       te[ 0 ] = c * e;\n       te[ 4 ] = bd - ac * f;\n       te[ 8 ] = bc * f + ad;\n \n       te[ 1 ] = f;\n       te[ 5 ] = a * e;\n       te[ 9 ] = - b * e;\n \n       te[ 2 ] = - d * e;\n       te[ 6 ] = ad * f + bc;\n       te[ 10 ] = ac - bd * f;\n \n     } else if ( euler.order === 'XZY' ) {\n \n       const ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n \n       te[ 0 ] = c * e;\n       te[ 4 ] = - f;\n       te[ 8 ] = d * e;\n \n       te[ 1 ] = ac * f + bd;\n       te[ 5 ] = a * e;\n       te[ 9 ] = ad * f - bc;\n \n       te[ 2 ] = bc * f - ad;\n       te[ 6 ] = b * e;\n       te[ 10 ] = bd * f + ac;\n \n     }\n \n     // bottom row\n     te[ 3 ] = 0;\n     te[ 7 ] = 0;\n     te[ 11 ] = 0;\n \n     // last column\n     te[ 12 ] = 0;\n     te[ 13 ] = 0;\n     te[ 14 ] = 0;\n     te[ 15 ] = 1;\n \n     return this;\n \n   }\n \n   makeRotationFromQuaternion( q ) {\n \n     return this.compose( _zero, q, _one );\n \n   }\n \n   lookAt( eye, target, up ) {\n \n     const te = this.elements;\n \n     _z.subVectors( eye, target );\n \n     if ( _z.lengthSq() === 0 ) {\n \n       // eye and target are in the same position\n \n       _z.z = 1;\n \n     }\n \n     _z.normalize();\n     _x.crossVectors( up, _z );\n \n     if ( _x.lengthSq() === 0 ) {\n \n       // up and z are parallel\n \n       if ( Math.abs( up.z ) === 1 ) {\n \n         _z.x += 0.0001;\n \n       } else {\n \n         _z.z += 0.0001;\n \n       }\n \n       _z.normalize();\n       _x.crossVectors( up, _z );\n \n     }\n \n     _x.normalize();\n     _y.crossVectors( _z, _x );\n \n     te[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n     te[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n     te[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n \n     return this;\n \n   }\n \n   multiply( m, n ) {\n \n     if ( n !== undefined ) {\n \n       console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n       return this.multiplyMatrices( m, n );\n \n     }\n \n     return this.multiplyMatrices( this, m );\n \n   }\n \n   premultiply( m ) {\n \n     return this.multiplyMatrices( m, this );\n \n   }\n \n   multiplyMatrices( a, b ) {\n \n     const ae = a.elements;\n     const be = b.elements;\n     const te = this.elements;\n \n     const a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n     const a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n     const a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n     const a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n \n     const b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n     const b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n     const b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n     const b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n \n     te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n     te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n     te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n     te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n \n     te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n     te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n     te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n     te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n \n     te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n     te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n     te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n     te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n \n     te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n     te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n     te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n     te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n \n     return this;\n \n   }\n \n   multiplyScalar( s ) {\n \n     const te = this.elements;\n \n     te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n     te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n     te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n     te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n \n     return this;\n \n   }\n \n   determinant() {\n \n     const te = this.elements;\n \n     const n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n     const n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n     const n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n     const n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n \n     //TODO: make this more efficient\n     //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n \n     return (\n       n41 * (\n         + n14 * n23 * n32\n          - n13 * n24 * n32\n          - n14 * n22 * n33\n          + n12 * n24 * n33\n          + n13 * n22 * n34\n          - n12 * n23 * n34\n       ) +\n       n42 * (\n         + n11 * n23 * n34\n          - n11 * n24 * n33\n          + n14 * n21 * n33\n          - n13 * n21 * n34\n          + n13 * n24 * n31\n          - n14 * n23 * n31\n       ) +\n       n43 * (\n         + n11 * n24 * n32\n          - n11 * n22 * n34\n          - n14 * n21 * n32\n          + n12 * n21 * n34\n          + n14 * n22 * n31\n          - n12 * n24 * n31\n       ) +\n       n44 * (\n         - n13 * n22 * n31\n          - n11 * n23 * n32\n          + n11 * n22 * n33\n          + n13 * n21 * n32\n          - n12 * n21 * n33\n          + n12 * n23 * n31\n       )\n \n     );\n \n   }\n \n   transpose() {\n \n     const te = this.elements;\n     let tmp;\n \n     tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n     tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n     tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n \n     tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n     tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n     tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n \n     return this;\n \n   }\n \n   setPosition( x, y, z ) {\n \n     const te = this.elements;\n \n     if ( x.isVector3 ) {\n \n       te[ 12 ] = x.x;\n       te[ 13 ] = x.y;\n       te[ 14 ] = x.z;\n \n     } else {\n \n       te[ 12 ] = x;\n       te[ 13 ] = y;\n       te[ 14 ] = z;\n \n     }\n \n     return this;\n \n   }\n \n   invert() {\n \n     // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n     const te = this.elements,\n \n       n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],\n       n12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],\n       n13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],\n       n14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],\n \n       t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n       t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n       t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n       t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n \n     const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n \n     if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n \n     const detInv = 1 / det;\n \n     te[ 0 ] = t11 * detInv;\n     te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n     te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n     te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n \n     te[ 4 ] = t12 * detInv;\n     te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n     te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n     te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n \n     te[ 8 ] = t13 * detInv;\n     te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n     te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n     te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n \n     te[ 12 ] = t14 * detInv;\n     te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n     te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n     te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n \n     return this;\n \n   }\n \n   scale( v ) {\n \n     const te = this.elements;\n     const x = v.x, y = v.y, z = v.z;\n \n     te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n     te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n     te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n     te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n \n     return this;\n \n   }\n \n   getMaxScaleOnAxis() {\n \n     const te = this.elements;\n \n     const scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n     const scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n     const scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n \n     return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n \n   }\n \n   makeTranslation( x, y, z ) {\n \n     this.set(\n \n       1, 0, 0, x,\n       0, 1, 0, y,\n       0, 0, 1, z,\n       0, 0, 0, 1\n \n     );\n \n     return this;\n \n   }\n \n   makeRotationX( theta ) {\n \n     const c = Math.cos( theta ), s = Math.sin( theta );\n \n     this.set(\n \n       1, 0, 0, 0,\n       0, c, - s, 0,\n       0, s, c, 0,\n       0, 0, 0, 1\n \n     );\n \n     return this;\n \n   }\n \n   makeRotationY( theta ) {\n \n     const c = Math.cos( theta ), s = Math.sin( theta );\n \n     this.set(\n \n        c, 0, s, 0,\n        0, 1, 0, 0,\n       - s, 0, c, 0,\n        0, 0, 0, 1\n \n     );\n \n     return this;\n \n   }\n \n   makeRotationZ( theta ) {\n \n     const c = Math.cos( theta ), s = Math.sin( theta );\n \n     this.set(\n \n       c, - s, 0, 0,\n       s, c, 0, 0,\n       0, 0, 1, 0,\n       0, 0, 0, 1\n \n     );\n \n     return this;\n \n   }\n \n   makeRotationAxis( axis, angle ) {\n \n     // Based on http://www.gamedev.net/reference/articles/article1199.asp\n \n     const c = Math.cos( angle );\n     const s = Math.sin( angle );\n     const t = 1 - c;\n     const x = axis.x, y = axis.y, z = axis.z;\n     const tx = t * x, ty = t * y;\n \n     this.set(\n \n       tx * x + c, tx * y - s * z, tx * z + s * y, 0,\n       tx * y + s * z, ty * y + c, ty * z - s * x, 0,\n       tx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n       0, 0, 0, 1\n \n     );\n \n     return this;\n \n   }\n \n   makeScale( x, y, z ) {\n \n     this.set(\n \n       x, 0, 0, 0,\n       0, y, 0, 0,\n       0, 0, z, 0,\n       0, 0, 0, 1\n \n     );\n \n     return this;\n \n   }\n \n   makeShear( xy, xz, yx, yz, zx, zy ) {\n \n     this.set(\n \n       1, yx, zx, 0,\n       xy, 1, zy, 0,\n       xz, yz, 1, 0,\n       0, 0, 0, 1\n \n     );\n \n     return this;\n \n   }\n \n   compose( position, quaternion, scale ) {\n \n     const te = this.elements;\n \n     const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n     const x2 = x + x,\ty2 = y + y, z2 = z + z;\n     const xx = x * x2, xy = x * y2, xz = x * z2;\n     const yy = y * y2, yz = y * z2, zz = z * z2;\n     const wx = w * x2, wy = w * y2, wz = w * z2;\n \n     const sx = scale.x, sy = scale.y, sz = scale.z;\n \n     te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n     te[ 1 ] = ( xy + wz ) * sx;\n     te[ 2 ] = ( xz - wy ) * sx;\n     te[ 3 ] = 0;\n \n     te[ 4 ] = ( xy - wz ) * sy;\n     te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n     te[ 6 ] = ( yz + wx ) * sy;\n     te[ 7 ] = 0;\n \n     te[ 8 ] = ( xz + wy ) * sz;\n     te[ 9 ] = ( yz - wx ) * sz;\n     te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n     te[ 11 ] = 0;\n \n     te[ 12 ] = position.x;\n     te[ 13 ] = position.y;\n     te[ 14 ] = position.z;\n     te[ 15 ] = 1;\n \n     return this;\n \n   }\n \n   decompose( position, quaternion, scale ) {\n \n     const te = this.elements;\n \n     let sx = _v1$5.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n     const sy = _v1$5.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n     const sz = _v1$5.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n \n     // if determine is negative, we need to invert one scale\n     const det = this.determinant();\n     if ( det < 0 ) sx = - sx;\n \n     position.x = te[ 12 ];\n     position.y = te[ 13 ];\n     position.z = te[ 14 ];\n \n     // scale the rotation part\n     _m1$2.copy( this );\n \n     const invSX = 1 / sx;\n     const invSY = 1 / sy;\n     const invSZ = 1 / sz;\n \n     _m1$2.elements[ 0 ] *= invSX;\n     _m1$2.elements[ 1 ] *= invSX;\n     _m1$2.elements[ 2 ] *= invSX;\n \n     _m1$2.elements[ 4 ] *= invSY;\n     _m1$2.elements[ 5 ] *= invSY;\n     _m1$2.elements[ 6 ] *= invSY;\n \n     _m1$2.elements[ 8 ] *= invSZ;\n     _m1$2.elements[ 9 ] *= invSZ;\n     _m1$2.elements[ 10 ] *= invSZ;\n \n     quaternion.setFromRotationMatrix( _m1$2 );\n \n     scale.x = sx;\n     scale.y = sy;\n     scale.z = sz;\n \n     return this;\n \n   }\n \n   makePerspective( left, right, top, bottom, near, far ) {\n \n     if ( far === undefined ) {\n \n       console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n \n     }\n \n     const te = this.elements;\n     const x = 2 * near / ( right - left );\n     const y = 2 * near / ( top - bottom );\n \n     const a = ( right + left ) / ( right - left );\n     const b = ( top + bottom ) / ( top - bottom );\n     const c = - ( far + near ) / ( far - near );\n     const d = - 2 * far * near / ( far - near );\n \n     te[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n     te[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n     te[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n     te[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n \n     return this;\n \n   }\n \n   makeOrthographic( left, right, top, bottom, near, far ) {\n \n     const te = this.elements;\n     const w = 1.0 / ( right - left );\n     const h = 1.0 / ( top - bottom );\n     const p = 1.0 / ( far - near );\n \n     const x = ( right + left ) * w;\n     const y = ( top + bottom ) * h;\n     const z = ( far + near ) * p;\n \n     te[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n     te[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n     te[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n     te[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n \n     return this;\n \n   }\n \n   equals( matrix ) {\n \n     const te = this.elements;\n     const me = matrix.elements;\n \n     for ( let i = 0; i < 16; i ++ ) {\n \n       if ( te[ i ] !== me[ i ] ) return false;\n \n     }\n \n     return true;\n \n   }\n \n   fromArray( array, offset = 0 ) {\n \n     for ( let i = 0; i < 16; i ++ ) {\n \n       this.elements[ i ] = array[ i + offset ];\n \n     }\n \n     return this;\n \n   }\n \n   toArray( array = [], offset = 0 ) {\n \n     const te = this.elements;\n \n     array[ offset ] = te[ 0 ];\n     array[ offset + 1 ] = te[ 1 ];\n     array[ offset + 2 ] = te[ 2 ];\n     array[ offset + 3 ] = te[ 3 ];\n \n     array[ offset + 4 ] = te[ 4 ];\n     array[ offset + 5 ] = te[ 5 ];\n     array[ offset + 6 ] = te[ 6 ];\n     array[ offset + 7 ] = te[ 7 ];\n \n     array[ offset + 8 ] = te[ 8 ];\n     array[ offset + 9 ] = te[ 9 ];\n     array[ offset + 10 ] = te[ 10 ];\n     array[ offset + 11 ] = te[ 11 ];\n \n     array[ offset + 12 ] = te[ 12 ];\n     array[ offset + 13 ] = te[ 13 ];\n     array[ offset + 14 ] = te[ 14 ];\n     array[ offset + 15 ] = te[ 15 ];\n \n     return array;\n \n   }\n \n }\n \n Matrix4.prototype.isMatrix4 = true;\n \n const _v1$5 = /*@__PURE__*/ new Vector3();\n const _m1$2 = /*@__PURE__*/ new Matrix4();\n const _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );\n const _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );\n const _x = /*@__PURE__*/ new Vector3();\n const _y = /*@__PURE__*/ new Vector3();\n const _z = /*@__PURE__*/ new Vector3();\n \n const _matrix$1 = /*@__PURE__*/ new Matrix4();\n const _quaternion$3 = /*@__PURE__*/ new Quaternion();\n \n class Euler {\n \n   constructor( x = 0, y = 0, z = 0, order = Euler.DefaultOrder ) {\n \n     this._x = x;\n     this._y = y;\n     this._z = z;\n     this._order = order;\n \n   }\n \n   get x() {\n \n     return this._x;\n \n   }\n \n   set x( value ) {\n \n     this._x = value;\n     this._onChangeCallback();\n \n   }\n \n   get y() {\n \n     return this._y;\n \n   }\n \n   set y( value ) {\n \n     this._y = value;\n     this._onChangeCallback();\n \n   }\n \n   get z() {\n \n     return this._z;\n \n   }\n \n   set z( value ) {\n \n     this._z = value;\n     this._onChangeCallback();\n \n   }\n \n   get order() {\n \n     return this._order;\n \n   }\n \n   set order( value ) {\n \n     this._order = value;\n     this._onChangeCallback();\n \n   }\n \n   set( x, y, z, order = this._order ) {\n \n     this._x = x;\n     this._y = y;\n     this._z = z;\n     this._order = order;\n \n     this._onChangeCallback();\n \n     return this;\n \n   }\n \n   clone() {\n \n     return new this.constructor( this._x, this._y, this._z, this._order );\n \n   }\n \n   copy( euler ) {\n \n     this._x = euler._x;\n     this._y = euler._y;\n     this._z = euler._z;\n     this._order = euler._order;\n \n     this._onChangeCallback();\n \n     return this;\n \n   }\n \n   setFromRotationMatrix( m, order = this._order, update = true ) {\n \n     // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n \n     const te = m.elements;\n     const m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n     const m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n     const m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n \n     switch ( order ) {\n \n       case 'XYZ':\n \n         this._y = Math.asin( clamp( m13, - 1, 1 ) );\n \n         if ( Math.abs( m13 ) < 0.9999999 ) {\n \n           this._x = Math.atan2( - m23, m33 );\n           this._z = Math.atan2( - m12, m11 );\n \n         } else {\n \n           this._x = Math.atan2( m32, m22 );\n           this._z = 0;\n \n         }\n \n         break;\n \n       case 'YXZ':\n \n         this._x = Math.asin( - clamp( m23, - 1, 1 ) );\n \n         if ( Math.abs( m23 ) < 0.9999999 ) {\n \n           this._y = Math.atan2( m13, m33 );\n           this._z = Math.atan2( m21, m22 );\n \n         } else {\n \n           this._y = Math.atan2( - m31, m11 );\n           this._z = 0;\n \n         }\n \n         break;\n \n       case 'ZXY':\n \n         this._x = Math.asin( clamp( m32, - 1, 1 ) );\n \n         if ( Math.abs( m32 ) < 0.9999999 ) {\n \n           this._y = Math.atan2( - m31, m33 );\n           this._z = Math.atan2( - m12, m22 );\n \n         } else {\n \n           this._y = 0;\n           this._z = Math.atan2( m21, m11 );\n \n         }\n \n         break;\n \n       case 'ZYX':\n \n         this._y = Math.asin( - clamp( m31, - 1, 1 ) );\n \n         if ( Math.abs( m31 ) < 0.9999999 ) {\n \n           this._x = Math.atan2( m32, m33 );\n           this._z = Math.atan2( m21, m11 );\n \n         } else {\n \n           this._x = 0;\n           this._z = Math.atan2( - m12, m22 );\n \n         }\n \n         break;\n \n       case 'YZX':\n \n         this._z = Math.asin( clamp( m21, - 1, 1 ) );\n \n         if ( Math.abs( m21 ) < 0.9999999 ) {\n \n           this._x = Math.atan2( - m23, m22 );\n           this._y = Math.atan2( - m31, m11 );\n \n         } else {\n \n           this._x = 0;\n           this._y = Math.atan2( m13, m33 );\n \n         }\n \n         break;\n \n       case 'XZY':\n \n         this._z = Math.asin( - clamp( m12, - 1, 1 ) );\n \n         if ( Math.abs( m12 ) < 0.9999999 ) {\n \n           this._x = Math.atan2( m32, m22 );\n           this._y = Math.atan2( m13, m11 );\n \n         } else {\n \n           this._x = Math.atan2( - m23, m33 );\n           this._y = 0;\n \n         }\n \n         break;\n \n       default:\n \n         console.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );\n \n     }\n \n     this._order = order;\n \n     if ( update === true ) this._onChangeCallback();\n \n     return this;\n \n   }\n \n   setFromQuaternion( q, order, update ) {\n \n     _matrix$1.makeRotationFromQuaternion( q );\n \n     return this.setFromRotationMatrix( _matrix$1, order, update );\n \n   }\n \n   setFromVector3( v, order = this._order ) {\n \n     return this.set( v.x, v.y, v.z, order );\n \n   }\n \n   reorder( newOrder ) {\n \n     // WARNING: this discards revolution information -bhouston\n \n     _quaternion$3.setFromEuler( this );\n \n     return this.setFromQuaternion( _quaternion$3, newOrder );\n \n   }\n \n   equals( euler ) {\n \n     return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n \n   }\n \n   fromArray( array ) {\n \n     this._x = array[ 0 ];\n     this._y = array[ 1 ];\n     this._z = array[ 2 ];\n     if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n \n     this._onChangeCallback();\n \n     return this;\n \n   }\n \n   toArray( array = [], offset = 0 ) {\n \n     array[ offset ] = this._x;\n     array[ offset + 1 ] = this._y;\n     array[ offset + 2 ] = this._z;\n     array[ offset + 3 ] = this._order;\n \n     return array;\n \n   }\n \n   toVector3( optionalResult ) {\n \n     if ( optionalResult ) {\n \n       return optionalResult.set( this._x, this._y, this._z );\n \n     } else {\n \n       return new Vector3( this._x, this._y, this._z );\n \n     }\n \n   }\n \n   _onChange( callback ) {\n \n     this._onChangeCallback = callback;\n \n     return this;\n \n   }\n \n   _onChangeCallback() {}\n \n }\n \n Euler.prototype.isEuler = true;\n \n Euler.DefaultOrder = 'XYZ';\n Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n \n class Layers {\n \n   constructor() {\n \n     this.mask = 1 | 0;\n \n   }\n \n   set( channel ) {\n \n     this.mask = ( 1 << channel | 0 ) >>> 0;\n \n   }\n \n   enable( channel ) {\n \n     this.mask |= 1 << channel | 0;\n \n   }\n \n   enableAll() {\n \n     this.mask = 0xffffffff | 0;\n \n   }\n \n   toggle( channel ) {\n \n     this.mask ^= 1 << channel | 0;\n \n   }\n \n   disable( channel ) {\n \n     this.mask &= ~ ( 1 << channel | 0 );\n \n   }\n \n   disableAll() {\n \n     this.mask = 0;\n \n   }\n \n   test( layers ) {\n \n     return ( this.mask & layers.mask ) !== 0;\n \n   }\n \n   isEnabled( channel ) {\n \n     return ( this.mask & ( 1 << channel | 0 ) ) !== 0;\n \n   }\n \n }\n \n let _object3DId = 0;\n \n const _v1$4 = /*@__PURE__*/ new Vector3();\n const _q1 = /*@__PURE__*/ new Quaternion();\n const _m1$1 = /*@__PURE__*/ new Matrix4();\n const _target = /*@__PURE__*/ new Vector3();\n \n const _position$3 = /*@__PURE__*/ new Vector3();\n const _scale$2 = /*@__PURE__*/ new Vector3();\n const _quaternion$2 = /*@__PURE__*/ new Quaternion();\n \n const _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );\n const _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );\n const _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );\n \n const _addedEvent = { type: 'added' };\n const _removedEvent = { type: 'removed' };\n \n class Object3D extends EventDispatcher {\n \n   constructor() {\n \n     super();\n \n     Object.defineProperty( this, 'id', { value: _object3DId ++ } );\n \n     this.uuid = generateUUID();\n \n     this.name = '';\n     this.type = 'Object3D';\n \n     this.parent = null;\n     this.children = [];\n \n     this.up = Object3D.DefaultUp.clone();\n \n     const position = new Vector3();\n     const rotation = new Euler();\n     const quaternion = new Quaternion();\n     const scale = new Vector3( 1, 1, 1 );\n \n     function onRotationChange() {\n \n       quaternion.setFromEuler( rotation, false );\n \n     }\n \n     function onQuaternionChange() {\n \n       rotation.setFromQuaternion( quaternion, undefined, false );\n \n     }\n \n     rotation._onChange( onRotationChange );\n     quaternion._onChange( onQuaternionChange );\n \n     Object.defineProperties( this, {\n       position: {\n         configurable: true,\n         enumerable: true,\n         value: position\n       },\n       rotation: {\n         configurable: true,\n         enumerable: true,\n         value: rotation\n       },\n       quaternion: {\n         configurable: true,\n         enumerable: true,\n         value: quaternion\n       },\n       scale: {\n         configurable: true,\n         enumerable: true,\n         value: scale\n       },\n       modelViewMatrix: {\n         value: new Matrix4()\n       },\n       normalMatrix: {\n         value: new Matrix3()\n       }\n     } );\n \n     this.matrix = new Matrix4();\n     this.matrixWorld = new Matrix4();\n \n     this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n     this.matrixWorldNeedsUpdate = false;\n \n     this.layers = new Layers();\n     this.visible = true;\n \n     this.castShadow = false;\n     this.receiveShadow = false;\n \n     this.frustumCulled = true;\n     this.renderOrder = 0;\n \n     this.animations = [];\n \n     this.userData = {};\n \n   }\n \n   onBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n \n   onAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n \n   applyMatrix4( matrix ) {\n \n     if ( this.matrixAutoUpdate ) this.updateMatrix();\n \n     this.matrix.premultiply( matrix );\n \n     this.matrix.decompose( this.position, this.quaternion, this.scale );\n \n   }\n \n   applyQuaternion( q ) {\n \n     this.quaternion.premultiply( q );\n \n     return this;\n \n   }\n \n   setRotationFromAxisAngle( axis, angle ) {\n \n     // assumes axis is normalized\n \n     this.quaternion.setFromAxisAngle( axis, angle );\n \n   }\n \n   setRotationFromEuler( euler ) {\n \n     this.quaternion.setFromEuler( euler, true );\n \n   }\n \n   setRotationFromMatrix( m ) {\n \n     // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n \n     this.quaternion.setFromRotationMatrix( m );\n \n   }\n \n   setRotationFromQuaternion( q ) {\n \n     // assumes q is normalized\n \n     this.quaternion.copy( q );\n \n   }\n \n   rotateOnAxis( axis, angle ) {\n \n     // rotate object on axis in object space\n     // axis is assumed to be normalized\n \n     _q1.setFromAxisAngle( axis, angle );\n \n     this.quaternion.multiply( _q1 );\n \n     return this;\n \n   }\n \n   rotateOnWorldAxis( axis, angle ) {\n \n     // rotate object on axis in world space\n     // axis is assumed to be normalized\n     // method assumes no rotated parent\n \n     _q1.setFromAxisAngle( axis, angle );\n \n     this.quaternion.premultiply( _q1 );\n \n     return this;\n \n   }\n \n   rotateX( angle ) {\n \n     return this.rotateOnAxis( _xAxis, angle );\n \n   }\n \n   rotateY( angle ) {\n \n     return this.rotateOnAxis( _yAxis, angle );\n \n   }\n \n   rotateZ( angle ) {\n \n     return this.rotateOnAxis( _zAxis, angle );\n \n   }\n \n   translateOnAxis( axis, distance ) {\n \n     // translate object by distance along axis in object space\n     // axis is assumed to be normalized\n \n     _v1$4.copy( axis ).applyQuaternion( this.quaternion );\n \n     this.position.add( _v1$4.multiplyScalar( distance ) );\n \n     return this;\n \n   }\n \n   translateX( distance ) {\n \n     return this.translateOnAxis( _xAxis, distance );\n \n   }\n \n   translateY( distance ) {\n \n     return this.translateOnAxis( _yAxis, distance );\n \n   }\n \n   translateZ( distance ) {\n \n     return this.translateOnAxis( _zAxis, distance );\n \n   }\n \n   localToWorld( vector ) {\n \n     return vector.applyMatrix4( this.matrixWorld );\n \n   }\n \n   worldToLocal( vector ) {\n \n     return vector.applyMatrix4( _m1$1.copy( this.matrixWorld ).invert() );\n \n   }\n \n   lookAt( x, y, z ) {\n \n     // This method does not support objects having non-uniformly-scaled parent(s)\n \n     if ( x.isVector3 ) {\n \n       _target.copy( x );\n \n     } else {\n \n       _target.set( x, y, z );\n \n     }\n \n     const parent = this.parent;\n \n     this.updateWorldMatrix( true, false );\n \n     _position$3.setFromMatrixPosition( this.matrixWorld );\n \n     if ( this.isCamera || this.isLight ) {\n \n       _m1$1.lookAt( _position$3, _target, this.up );\n \n     } else {\n \n       _m1$1.lookAt( _target, _position$3, this.up );\n \n     }\n \n     this.quaternion.setFromRotationMatrix( _m1$1 );\n \n     if ( parent ) {\n \n       _m1$1.extractRotation( parent.matrixWorld );\n       _q1.setFromRotationMatrix( _m1$1 );\n       this.quaternion.premultiply( _q1.invert() );\n \n     }\n \n   }\n \n   add( object ) {\n \n     if ( arguments.length > 1 ) {\n \n       for ( let i = 0; i < arguments.length; i ++ ) {\n \n         this.add( arguments[ i ] );\n \n       }\n \n       return this;\n \n     }\n \n     if ( object === this ) {\n \n       console.error( 'THREE.Object3D.add: object can\\'t be added as a child of itself.', object );\n       return this;\n \n     }\n \n     if ( object && object.isObject3D ) {\n \n       if ( object.parent !== null ) {\n \n         object.parent.remove( object );\n \n       }\n \n       object.parent = this;\n       this.children.push( object );\n \n       object.dispatchEvent( _addedEvent );\n \n     } else {\n \n       console.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );\n \n     }\n \n     return this;\n \n   }\n \n   remove( object ) {\n \n     if ( arguments.length > 1 ) {\n \n       for ( let i = 0; i < arguments.length; i ++ ) {\n \n         this.remove( arguments[ i ] );\n \n       }\n \n       return this;\n \n     }\n \n     const index = this.children.indexOf( object );\n \n     if ( index !== - 1 ) {\n \n       object.parent = null;\n       this.children.splice( index, 1 );\n \n       object.dispatchEvent( _removedEvent );\n \n     }\n \n     return this;\n \n   }\n \n   removeFromParent() {\n \n     const parent = this.parent;\n \n     if ( parent !== null ) {\n \n       parent.remove( this );\n \n     }\n \n     return this;\n \n   }\n \n   clear() {\n \n     for ( let i = 0; i < this.children.length; i ++ ) {\n \n       const object = this.children[ i ];\n \n       object.parent = null;\n \n       object.dispatchEvent( _removedEvent );\n \n     }\n \n     this.children.length = 0;\n \n     return this;\n \n \n   }\n \n   attach( object ) {\n \n     // adds object as a child of this, while maintaining the object's world transform\n \n     // Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)\n \n     this.updateWorldMatrix( true, false );\n \n     _m1$1.copy( this.matrixWorld ).invert();\n \n     if ( object.parent !== null ) {\n \n       object.parent.updateWorldMatrix( true, false );\n \n       _m1$1.multiply( object.parent.matrixWorld );\n \n     }\n \n     object.applyMatrix4( _m1$1 );\n \n     this.add( object );\n \n     object.updateWorldMatrix( false, true );\n \n     return this;\n \n   }\n \n   getObjectById( id ) {\n \n     return this.getObjectByProperty( 'id', id );\n \n   }\n \n   getObjectByName( name ) {\n \n     return this.getObjectByProperty( 'name', name );\n \n   }\n \n   getObjectByProperty( name, value ) {\n \n     if ( this[ name ] === value ) return this;\n \n     for ( let i = 0, l = this.children.length; i < l; i ++ ) {\n \n       const child = this.children[ i ];\n       const object = child.getObjectByProperty( name, value );\n \n       if ( object !== undefined ) {\n \n         return object;\n \n       }\n \n     }\n \n     return undefined;\n \n   }\n \n   getWorldPosition( target ) {\n \n     this.updateWorldMatrix( true, false );\n \n     return target.setFromMatrixPosition( this.matrixWorld );\n \n   }\n \n   getWorldQuaternion( target ) {\n \n     this.updateWorldMatrix( true, false );\n \n     this.matrixWorld.decompose( _position$3, target, _scale$2 );\n \n     return target;\n \n   }\n \n   getWorldScale( target ) {\n \n     this.updateWorldMatrix( true, false );\n \n     this.matrixWorld.decompose( _position$3, _quaternion$2, target );\n \n     return target;\n \n   }\n \n   getWorldDirection( target ) {\n \n     this.updateWorldMatrix( true, false );\n \n     const e = this.matrixWorld.elements;\n \n     return target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n \n   }\n \n   raycast() {}\n \n   traverse( callback ) {\n \n     callback( this );\n \n     const children = this.children;\n \n     for ( let i = 0, l = children.length; i < l; i ++ ) {\n \n       children[ i ].traverse( callback );\n \n     }\n \n   }\n \n   traverseVisible( callback ) {\n \n     if ( this.visible === false ) return;\n \n     callback( this );\n \n     const children = this.children;\n \n     for ( let i = 0, l = children.length; i < l; i ++ ) {\n \n       children[ i ].traverseVisible( callback );\n \n     }\n \n   }\n \n   traverseAncestors( callback ) {\n \n     const parent = this.parent;\n \n     if ( parent !== null ) {\n \n       callback( parent );\n \n       parent.traverseAncestors( callback );\n \n     }\n \n   }\n \n   updateMatrix() {\n \n     this.matrix.compose( this.position, this.quaternion, this.scale );\n \n     this.matrixWorldNeedsUpdate = true;\n \n   }\n \n   updateMatrixWorld( force ) {\n \n     if ( this.matrixAutoUpdate ) this.updateMatrix();\n \n     if ( this.matrixWorldNeedsUpdate || force ) {\n \n       if ( this.parent === null ) {\n \n         this.matrixWorld.copy( this.matrix );\n \n       } else {\n \n         this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n \n       }\n \n       this.matrixWorldNeedsUpdate = false;\n \n       force = true;\n \n     }\n \n     // update children\n \n     const children = this.children;\n \n     for ( let i = 0, l = children.length; i < l; i ++ ) {\n \n       children[ i ].updateMatrixWorld( force );\n \n     }\n \n   }\n \n   updateWorldMatrix( updateParents, updateChildren ) {\n \n     const parent = this.parent;\n \n     if ( updateParents === true && parent !== null ) {\n \n       parent.updateWorldMatrix( true, false );\n \n     }\n \n     if ( this.matrixAutoUpdate ) this.updateMatrix();\n \n     if ( this.parent === null ) {\n \n       this.matrixWorld.copy( this.matrix );\n \n     } else {\n \n       this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n \n     }\n \n     // update children\n \n     if ( updateChildren === true ) {\n \n       const children = this.children;\n \n       for ( let i = 0, l = children.length; i < l; i ++ ) {\n \n         children[ i ].updateWorldMatrix( false, true );\n \n       }\n \n     }\n \n   }\n \n   toJSON( meta ) {\n \n     // meta is a string when called from JSON.stringify\n     const isRootObject = ( meta === undefined || typeof meta === 'string' );\n \n     const output = {};\n \n     // meta is a hash used to collect geometries, materials.\n     // not providing it implies that this is the root object\n     // being serialized.\n     if ( isRootObject ) {\n \n       // initialize meta obj\n       meta = {\n         geometries: {},\n         materials: {},\n         textures: {},\n         images: {},\n         shapes: {},\n         skeletons: {},\n         animations: {}\n       };\n \n       output.metadata = {\n         version: 4.5,\n         type: 'Object',\n         generator: 'Object3D.toJSON'\n       };\n \n     }\n \n     // standard Object3D serialization\n \n     const object = {};\n \n     object.uuid = this.uuid;\n     object.type = this.type;\n \n     if ( this.name !== '' ) object.name = this.name;\n     if ( this.castShadow === true ) object.castShadow = true;\n     if ( this.receiveShadow === true ) object.receiveShadow = true;\n     if ( this.visible === false ) object.visible = false;\n     if ( this.frustumCulled === false ) object.frustumCulled = false;\n     if ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\n     if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n \n     object.layers = this.layers.mask;\n     object.matrix = this.matrix.toArray();\n \n     if ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\n \n     // object specific properties\n \n     if ( this.isInstancedMesh ) {\n \n       object.type = 'InstancedMesh';\n       object.count = this.count;\n       object.instanceMatrix = this.instanceMatrix.toJSON();\n       if ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();\n \n     }\n \n     //\n \n     function serialize( library, element ) {\n \n       if ( library[ element.uuid ] === undefined ) {\n \n         library[ element.uuid ] = element.toJSON( meta );\n \n       }\n \n       return element.uuid;\n \n     }\n \n     if ( this.isScene ) {\n \n       if ( this.background ) {\n \n         if ( this.background.isColor ) {\n \n           object.background = this.background.toJSON();\n \n         } else if ( this.background.isTexture ) {\n \n           object.background = this.background.toJSON( meta ).uuid;\n \n         }\n \n       }\n \n       if ( this.environment && this.environment.isTexture ) {\n \n         object.environment = this.environment.toJSON( meta ).uuid;\n \n       }\n \n     } else if ( this.isMesh || this.isLine || this.isPoints ) {\n \n       object.geometry = serialize( meta.geometries, this.geometry );\n \n       const parameters = this.geometry.parameters;\n \n       if ( parameters !== undefined && parameters.shapes !== undefined ) {\n \n         const shapes = parameters.shapes;\n \n         if ( Array.isArray( shapes ) ) {\n \n           for ( let i = 0, l = shapes.length; i < l; i ++ ) {\n \n             const shape = shapes[ i ];\n \n             serialize( meta.shapes, shape );\n \n           }\n \n         } else {\n \n           serialize( meta.shapes, shapes );\n \n         }\n \n       }\n \n     }\n \n     if ( this.isSkinnedMesh ) {\n \n       object.bindMode = this.bindMode;\n       object.bindMatrix = this.bindMatrix.toArray();\n \n       if ( this.skeleton !== undefined ) {\n \n         serialize( meta.skeletons, this.skeleton );\n \n         object.skeleton = this.skeleton.uuid;\n \n       }\n \n     }\n \n     if ( this.material !== undefined ) {\n \n       if ( Array.isArray( this.material ) ) {\n \n         const uuids = [];\n \n         for ( let i = 0, l = this.material.length; i < l; i ++ ) {\n \n           uuids.push( serialize( meta.materials, this.material[ i ] ) );\n \n         }\n \n         object.material = uuids;\n \n       } else {\n \n         object.material = serialize( meta.materials, this.material );\n \n       }\n \n     }\n \n     //\n \n     if ( this.children.length > 0 ) {\n \n       object.children = [];\n \n       for ( let i = 0; i < this.children.length; i ++ ) {\n \n         object.children.push( this.children[ i ].toJSON( meta ).object );\n \n       }\n \n     }\n \n     //\n \n     if ( this.animations.length > 0 ) {\n \n       object.animations = [];\n \n       for ( let i = 0; i < this.animations.length; i ++ ) {\n \n         const animation = this.animations[ i ];\n \n         object.animations.push( serialize( meta.animations, animation ) );\n \n       }\n \n     }\n \n     if ( isRootObject ) {\n \n       const geometries = extractFromCache( meta.geometries );\n       const materials = extractFromCache( meta.materials );\n       const textures = extractFromCache( meta.textures );\n       const images = extractFromCache( meta.images );\n       const shapes = extractFromCache( meta.shapes );\n       const skeletons = extractFromCache( meta.skeletons );\n       const animations = extractFromCache( meta.animations );\n \n       if ( geometries.length > 0 ) output.geometries = geometries;\n       if ( materials.length > 0 ) output.materials = materials;\n       if ( textures.length > 0 ) output.textures = textures;\n       if ( images.length > 0 ) output.images = images;\n       if ( shapes.length > 0 ) output.shapes = shapes;\n       if ( skeletons.length > 0 ) output.skeletons = skeletons;\n       if ( animations.length > 0 ) output.animations = animations;\n \n     }\n \n     output.object = object;\n \n     return output;\n \n     // extract data from the cache hash\n     // remove metadata on each item\n     // and return as array\n     function extractFromCache( cache ) {\n \n       const values = [];\n       for ( const key in cache ) {\n \n         const data = cache[ key ];\n         delete data.metadata;\n         values.push( data );\n \n       }\n \n       return values;\n \n     }\n \n   }\n \n   clone( recursive ) {\n \n     return new this.constructor().copy( this, recursive );\n \n   }\n \n   copy( source, recursive = true ) {\n \n     this.name = source.name;\n \n     this.up.copy( source.up );\n \n     this.position.copy( source.position );\n     this.rotation.order = source.rotation.order;\n     this.quaternion.copy( source.quaternion );\n     this.scale.copy( source.scale );\n \n     this.matrix.copy( source.matrix );\n     this.matrixWorld.copy( source.matrixWorld );\n \n     this.matrixAutoUpdate = source.matrixAutoUpdate;\n     this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n \n     this.layers.mask = source.layers.mask;\n     this.visible = source.visible;\n \n     this.castShadow = source.castShadow;\n     this.receiveShadow = source.receiveShadow;\n \n     this.frustumCulled = source.frustumCulled;\n     this.renderOrder = source.renderOrder;\n \n     this.userData = JSON.parse( JSON.stringify( source.userData ) );\n \n     if ( recursive === true ) {\n \n       for ( let i = 0; i < source.children.length; i ++ ) {\n \n         const child = source.children[ i ];\n         this.add( child.clone() );\n \n       }\n \n     }\n \n     return this;\n \n   }\n \n }\n \n Object3D.DefaultUp = new Vector3( 0, 1, 0 );\n Object3D.DefaultMatrixAutoUpdate = true;\n \n Object3D.prototype.isObject3D = true;\n \n const _v0$1 = /*@__PURE__*/ new Vector3();\n const _v1$3 = /*@__PURE__*/ new Vector3();\n const _v2$2 = /*@__PURE__*/ new Vector3();\n const _v3$1 = /*@__PURE__*/ new Vector3();\n \n const _vab = /*@__PURE__*/ new Vector3();\n const _vac = /*@__PURE__*/ new Vector3();\n const _vbc = /*@__PURE__*/ new Vector3();\n const _vap = /*@__PURE__*/ new Vector3();\n const _vbp = /*@__PURE__*/ new Vector3();\n const _vcp = /*@__PURE__*/ new Vector3();\n \n class Triangle {\n \n   constructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {\n \n     this.a = a;\n     this.b = b;\n     this.c = c;\n \n   }\n \n   static getNormal( a, b, c, target ) {\n \n     target.subVectors( c, b );\n     _v0$1.subVectors( a, b );\n     target.cross( _v0$1 );\n \n     const targetLengthSq = target.lengthSq();\n     if ( targetLengthSq > 0 ) {\n \n       return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n \n     }\n \n     return target.set( 0, 0, 0 );\n \n   }\n \n   // static/instance method to calculate barycentric coordinates\n   // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n   static getBarycoord( point, a, b, c, target ) {\n \n     _v0$1.subVectors( c, a );\n     _v1$3.subVectors( b, a );\n     _v2$2.subVectors( point, a );\n \n     const dot00 = _v0$1.dot( _v0$1 );\n     const dot01 = _v0$1.dot( _v1$3 );\n     const dot02 = _v0$1.dot( _v2$2 );\n     const dot11 = _v1$3.dot( _v1$3 );\n     const dot12 = _v1$3.dot( _v2$2 );\n \n     const denom = ( dot00 * dot11 - dot01 * dot01 );\n \n     // collinear or singular triangle\n     if ( denom === 0 ) {\n \n       // arbitrary location outside of triangle?\n       // not sure if this is the best idea, maybe should be returning undefined\n       return target.set( - 2, - 1, - 1 );\n \n     }\n \n     const invDenom = 1 / denom;\n     const u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n     const v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n \n     // barycentric coordinates must always sum to 1\n     return target.set( 1 - u - v, v, u );\n \n   }\n \n   static containsPoint( point, a, b, c ) {\n \n     this.getBarycoord( point, a, b, c, _v3$1 );\n \n     return ( _v3$1.x >= 0 ) && ( _v3$1.y >= 0 ) && ( ( _v3$1.x + _v3$1.y ) <= 1 );\n \n   }\n \n   static getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) {\n \n     this.getBarycoord( point, p1, p2, p3, _v3$1 );\n \n     target.set( 0, 0 );\n     target.addScaledVector( uv1, _v3$1.x );\n     target.addScaledVector( uv2, _v3$1.y );\n     target.addScaledVector( uv3, _v3$1.z );\n \n     return target;\n \n   }\n \n   static isFrontFacing( a, b, c, direction ) {\n \n     _v0$1.subVectors( c, b );\n     _v1$3.subVectors( a, b );\n \n     // strictly front facing\n     return ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n \n   }\n \n   set( a, b, c ) {\n \n     this.a.copy( a );\n     this.b.copy( b );\n     this.c.copy( c );\n \n     return this;\n \n   }\n \n   setFromPointsAndIndices( points, i0, i1, i2 ) {\n \n     this.a.copy( points[ i0 ] );\n     this.b.copy( points[ i1 ] );\n     this.c.copy( points[ i2 ] );\n \n     return this;\n \n   }\n \n   setFromAttributeAndIndices( attribute, i0, i1, i2 ) {\n \n     this.a.fromBufferAttribute( attribute, i0 );\n     this.b.fromBufferAttribute( attribute, i1 );\n     this.c.fromBufferAttribute( attribute, i2 );\n \n     return this;\n \n   }\n \n   clone() {\n \n     return new this.constructor().copy( this );\n \n   }\n \n   copy( triangle ) {\n \n     this.a.copy( triangle.a );\n     this.b.copy( triangle.b );\n     this.c.copy( triangle.c );\n \n     return this;\n \n   }\n \n   getArea() {\n \n     _v0$1.subVectors( this.c, this.b );\n     _v1$3.subVectors( this.a, this.b );\n \n     return _v0$1.cross( _v1$3 ).length() * 0.5;\n \n   }\n \n   getMidpoint( target ) {\n \n     return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n \n   }\n \n   getNormal( target ) {\n \n     return Triangle.getNormal( this.a, this.b, this.c, target );\n \n   }\n \n   getPlane( target ) {\n \n     return target.setFromCoplanarPoints( this.a, this.b, this.c );\n \n   }\n \n   getBarycoord( point, target ) {\n \n     return Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n \n   }\n \n   getUV( point, uv1, uv2, uv3, target ) {\n \n     return Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n \n   }\n \n   containsPoint( point ) {\n \n     return Triangle.containsPoint( point, this.a, this.b, this.c );\n \n   }\n \n   isFrontFacing( direction ) {\n \n     return Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n \n   }\n \n   intersectsBox( box ) {\n \n     return box.intersectsTriangle( this );\n \n   }\n \n   closestPointToPoint( p, target ) {\n \n     const a = this.a, b = this.b, c = this.c;\n     let v, w;\n \n     // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n     // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n     // under the accompanying license; see chapter 5.1.5 for detailed explanation.\n     // basically, we're distinguishing which of the voronoi regions of the triangle\n     // the point lies in with the minimum amount of redundant computation.\n \n     _vab.subVectors( b, a );\n     _vac.subVectors( c, a );\n     _vap.subVectors( p, a );\n     const d1 = _vab.dot( _vap );\n     const d2 = _vac.dot( _vap );\n     if ( d1 <= 0 && d2 <= 0 ) {\n \n       // vertex region of A; barycentric coords (1, 0, 0)\n       return target.copy( a );\n \n     }\n \n     _vbp.subVectors( p, b );\n     const d3 = _vab.dot( _vbp );\n     const d4 = _vac.dot( _vbp );\n     if ( d3 >= 0 && d4 <= d3 ) {\n \n       // vertex region of B; barycentric coords (0, 1, 0)\n       return target.copy( b );\n \n     }\n \n     const vc = d1 * d4 - d3 * d2;\n     if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n \n       v = d1 / ( d1 - d3 );\n       // edge region of AB; barycentric coords (1-v, v, 0)\n       return target.copy( a ).addScaledVector( _vab, v );\n \n     }\n \n     _vcp.subVectors( p, c );\n     const d5 = _vab.dot( _vcp );\n     const d6 = _vac.dot( _vcp );\n     if ( d6 >= 0 && d5 <= d6 ) {\n \n       // vertex region of C; barycentric coords (0, 0, 1)\n       return target.copy( c );\n \n     }\n \n     const vb = d5 * d2 - d1 * d6;\n     if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n \n       w = d2 / ( d2 - d6 );\n       // edge region of AC; barycentric coords (1-w, 0, w)\n       return target.copy( a ).addScaledVector( _vac, w );\n \n     }\n \n     const va = d3 * d6 - d5 * d4;\n     if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n \n       _vbc.subVectors( c, b );\n       w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n       // edge region of BC; barycentric coords (0, 1-w, w)\n       return target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n \n     }\n \n     // face region\n     const denom = 1 / ( va + vb + vc );\n     // u = va * denom\n     v = vb * denom;\n     w = vc * denom;\n \n     return target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n \n   }\n \n   equals( triangle ) {\n \n     return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n \n   }\n \n }\n \n let materialId = 0;\n \n class Material extends EventDispatcher {\n \n   constructor() {\n \n     super();\n \n     Object.defineProperty( this, 'id', { value: materialId ++ } );\n \n     this.uuid = generateUUID();\n \n     this.name = '';\n     this.type = 'Material';\n \n     this.fog = true;\n \n     this.blending = NormalBlending;\n     this.side = FrontSide;\n     this.vertexColors = false;\n \n     this.opacity = 1;\n     this.format = RGBAFormat;\n     this.transparent = false;\n \n     this.blendSrc = SrcAlphaFactor;\n     this.blendDst = OneMinusSrcAlphaFactor;\n     this.blendEquation = AddEquation;\n     this.blendSrcAlpha = null;\n     this.blendDstAlpha = null;\n     this.blendEquationAlpha = null;\n \n     this.depthFunc = LessEqualDepth;\n     this.depthTest = true;\n     this.depthWrite = true;\n \n     this.stencilWriteMask = 0xff;\n     this.stencilFunc = AlwaysStencilFunc;\n     this.stencilRef = 0;\n     this.stencilFuncMask = 0xff;\n     this.stencilFail = KeepStencilOp;\n     this.stencilZFail = KeepStencilOp;\n     this.stencilZPass = KeepStencilOp;\n     this.stencilWrite = false;\n \n     this.clippingPlanes = null;\n     this.clipIntersection = false;\n     this.clipShadows = false;\n \n     this.shadowSide = null;\n \n     this.colorWrite = true;\n \n     this.precision = null; // override the renderer's default precision for this material\n \n     this.polygonOffset = false;\n     this.polygonOffsetFactor = 0;\n     this.polygonOffsetUnits = 0;\n \n     this.dithering = false;\n \n     this.alphaToCoverage = false;\n     this.premultipliedAlpha = false;\n \n     this.visible = true;\n \n     this.toneMapped = true;\n \n     this.userData = {};\n \n     this.version = 0;\n \n     this._alphaTest = 0;\n \n   }\n \n   get alphaTest() {\n \n     return this._alphaTest;\n \n   }\n \n   set alphaTest( value ) {\n \n     if ( this._alphaTest > 0 !== value > 0 ) {\n \n       this.version ++;\n \n     }\n \n     this._alphaTest = value;\n \n   }\n \n   onBuild( /* shaderobject, renderer */ ) {}\n \n   onBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}\n \n   onBeforeCompile( /* shaderobject, renderer */ ) {}\n \n   customProgramCacheKey() {\n \n     return this.onBeforeCompile.toString();\n \n   }\n \n   setValues( values ) {\n \n     if ( values === undefined ) return;\n \n     for ( const key in values ) {\n \n       const newValue = values[ key ];\n \n       if ( newValue === undefined ) {\n \n         console.warn( 'THREE.Material: \\'' + key + '\\' parameter is undefined.' );\n         continue;\n \n       }\n \n       // for backward compatability if shading is set in the constructor\n       if ( key === 'shading' ) {\n \n         console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n         this.flatShading = ( newValue === FlatShading ) ? true : false;\n         continue;\n \n       }\n \n       const currentValue = this[ key ];\n \n       if ( currentValue === undefined ) {\n \n         console.warn( 'THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.' );\n         continue;\n \n       }\n \n       if ( currentValue && currentValue.isColor ) {\n \n         currentValue.set( newValue );\n \n       } else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n \n         currentValue.copy( newValue );\n \n       } else {\n \n         this[ key ] = newValue;\n \n       }\n \n     }\n \n   }\n \n   toJSON( meta ) {\n \n     const isRoot = ( meta === undefined || typeof meta === 'string' );\n \n     if ( isRoot ) {\n \n       meta = {\n         textures: {},\n         images: {}\n       };\n \n     }\n \n     const data = {\n       metadata: {\n         version: 4.5,\n         type: 'Material',\n         generator: 'Material.toJSON'\n       }\n     };\n \n     // standard Material serialization\n     data.uuid = this.uuid;\n     data.type = this.type;\n \n     if ( this.name !== '' ) data.name = this.name;\n \n     if ( this.color && this.color.isColor ) data.color = this.color.getHex();\n \n     if ( this.roughness !== undefined ) data.roughness = this.roughness;\n     if ( this.metalness !== undefined ) data.metalness = this.metalness;\n \n     if ( this.sheen !== undefined ) data.sheen = this.sheen;\n     if ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();\n     if ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;\n     if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n     if ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n \n     if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n     if ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;\n     if ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();\n     if ( this.shininess !== undefined ) data.shininess = this.shininess;\n     if ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;\n     if ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;\n \n     if ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\n \n       data.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\n \n     }\n \n     if ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\n \n       data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\n \n     }\n \n     if ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n \n       data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n       data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n \n     }\n \n     if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n     if ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;\n     if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n \n     if ( this.lightMap && this.lightMap.isTexture ) {\n \n       data.lightMap = this.lightMap.toJSON( meta ).uuid;\n       data.lightMapIntensity = this.lightMapIntensity;\n \n     }\n \n     if ( this.aoMap && this.aoMap.isTexture ) {\n \n       data.aoMap = this.aoMap.toJSON( meta ).uuid;\n       data.aoMapIntensity = this.aoMapIntensity;\n \n     }\n \n     if ( this.bumpMap && this.bumpMap.isTexture ) {\n \n       data.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n       data.bumpScale = this.bumpScale;\n \n     }\n \n     if ( this.normalMap && this.normalMap.isTexture ) {\n \n       data.normalMap = this.normalMap.toJSON( meta ).uuid;\n       data.normalMapType = this.normalMapType;\n       data.normalScale = this.normalScale.toArray();\n \n     }\n \n     if ( this.displacementMap && this.displacementMap.isTexture ) {\n \n       data.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n       data.displacementScale = this.displacementScale;\n       data.displacementBias = this.displacementBias;\n \n     }\n \n     if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n     if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n \n     if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n     if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n     if ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;\n     if ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;\n \n     if ( this.envMap && this.envMap.isTexture ) {\n \n       data.envMap = this.envMap.toJSON( meta ).uuid;\n \n       if ( this.combine !== undefined ) data.combine = this.combine;\n \n     }\n \n     if ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;\n     if ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;\n     if ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;\n \n     if ( this.gradientMap && this.gradientMap.isTexture ) {\n \n       data.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n \n     }\n \n     if ( this.transmission !== undefined ) data.transmission = this.transmission;\n     if ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;\n     if ( this.thickness !== undefined ) data.thickness = this.thickness;\n     if ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;\n     if ( this.attenuationDistance !== undefined ) data.attenuationDistance = this.attenuationDistance;\n     if ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();\n \n     if ( this.size !== undefined ) data.size = this.size;\n     if ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;\n     if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n \n     if ( this.blending !== NormalBlending ) data.blending = this.blending;\n     if ( this.side !== FrontSide ) data.side = this.side;\n     if ( this.vertexColors ) data.vertexColors = true;\n \n     if ( this.opacity < 1 ) data.opacity = this.opacity;\n     if ( this.format !== RGBAFormat ) data.format = this.format;\n     if ( this.transparent === true ) data.transparent = this.transparent;\n \n     data.depthFunc = this.depthFunc;\n     data.depthTest = this.depthTest;\n     data.depthWrite = this.depthWrite;\n     data.colorWrite = this.colorWrite;\n \n     data.stencilWrite = this.stencilWrite;\n     data.stencilWriteMask = this.stencilWriteMask;\n     data.stencilFunc = this.stencilFunc;\n     data.stencilRef = this.stencilRef;\n     data.stencilFuncMask = this.stencilFuncMask;\n     data.stencilFail = this.stencilFail;\n     data.stencilZFail = this.stencilZFail;\n     data.stencilZPass = this.stencilZPass;\n \n     // rotation (SpriteMaterial)\n     if ( this.rotation && this.rotation !== 0 ) data.rotation = this.rotation;\n \n     if ( this.polygonOffset === true ) data.polygonOffset = true;\n     if ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;\n     if ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;\n \n     if ( this.linewidth && this.linewidth !== 1 ) data.linewidth = this.linewidth;\n     if ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n     if ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n     if ( this.scale !== undefined ) data.scale = this.scale;\n \n     if ( this.dithering === true ) data.dithering = true;\n \n     if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n     if ( this.alphaToCoverage === true ) data.alphaToCoverage = this.alphaToCoverage;\n     if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n \n     if ( this.wireframe === true ) data.wireframe = this.wireframe;\n     if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n     if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n     if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n \n     if ( this.flatShading === true ) data.flatShading = this.flatShading;\n \n     if ( this.visible === false ) data.visible = false;\n \n     if ( this.toneMapped === false ) data.toneMapped = false;\n \n     if ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\n \n     // TODO: Copied from Object3D.toJSON\n \n     function extractFromCache( cache ) {\n \n       const values = [];\n \n       for ( const key in cache ) {\n \n         const data = cache[ key ];\n         delete data.metadata;\n         values.push( data );\n \n       }\n \n       return values;\n \n     }\n \n     if ( isRoot ) {\n \n       const textures = extractFromCache( meta.textures );\n       const images = extractFromCache( meta.images );\n \n       if ( textures.length > 0 ) data.textures = textures;\n       if ( images.length > 0 ) data.images = images;\n \n     }\n \n     return data;\n \n   }\n \n   clone() {\n \n     return new this.constructor().copy( this );\n \n   }\n \n   copy( source ) {\n \n     this.name = source.name;\n \n     this.fog = source.fog;\n \n     this.blending = source.blending;\n     this.side = source.side;\n     this.vertexColors = source.vertexColors;\n \n     this.opacity = source.opacity;\n     this.format = source.format;\n     this.transparent = source.transparent;\n \n     this.blendSrc = source.blendSrc;\n     this.blendDst = source.blendDst;\n     this.blendEquation = source.blendEquation;\n     this.blendSrcAlpha = source.blendSrcAlpha;\n     this.blendDstAlpha = source.blendDstAlpha;\n     this.blendEquationAlpha = source.blendEquationAlpha;\n \n     this.depthFunc = source.depthFunc;\n     this.depthTest = source.depthTest;\n     this.depthWrite = source.depthWrite;\n \n     this.stencilWriteMask = source.stencilWriteMask;\n     this.stencilFunc = source.stencilFunc;\n     this.stencilRef = source.stencilRef;\n     this.stencilFuncMask = source.stencilFuncMask;\n     this.stencilFail = source.stencilFail;\n     this.stencilZFail = source.stencilZFail;\n     this.stencilZPass = source.stencilZPass;\n     this.stencilWrite = source.stencilWrite;\n \n     const srcPlanes = source.clippingPlanes;\n     let dstPlanes = null;\n \n     if ( srcPlanes !== null ) {\n \n       const n = srcPlanes.length;\n       dstPlanes = new Array( n );\n \n       for ( let i = 0; i !== n; ++ i ) {\n \n         dstPlanes[ i ] = srcPlanes[ i ].clone();\n \n       }\n \n     }\n \n     this.clippingPlanes = dstPlanes;\n     this.clipIntersection = source.clipIntersection;\n     this.clipShadows = source.clipShadows;\n \n     this.shadowSide = source.shadowSide;\n \n     this.colorWrite = source.colorWrite;\n \n     this.precision = source.precision;\n \n     this.polygonOffset = source.polygonOffset;\n     this.polygonOffsetFactor = source.polygonOffsetFactor;\n     this.polygonOffsetUnits = source.polygonOffsetUnits;\n \n     this.dithering = source.dithering;\n \n     this.alphaTest = source.alphaTest;\n     this.alphaToCoverage = source.alphaToCoverage;\n     this.premultipliedAlpha = source.premultipliedAlpha;\n \n     this.visible = source.visible;\n \n     this.toneMapped = source.toneMapped;\n \n     this.userData = JSON.parse( JSON.stringify( source.userData ) );\n \n     return this;\n \n   }\n \n   dispose() {\n \n     this.dispatchEvent( { type: 'dispose' } );\n \n   }\n \n   set needsUpdate( value ) {\n \n     if ( value === true ) this.version ++;\n \n   }\n \n }\n \n Material.prototype.isMaterial = true;\n \n const _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n   'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n   'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n   'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n   'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n   'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n   'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n   'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n   'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n   'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n   'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n   'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n   'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n   'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n   'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n   'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n   'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n   'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n   'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n   'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n   'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n   'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n   'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n   'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n \n const _hslA = { h: 0, s: 0, l: 0 };\n const _hslB = { h: 0, s: 0, l: 0 };\n \n function hue2rgb( p, q, t ) {\n \n   if ( t < 0 ) t += 1;\n   if ( t > 1 ) t -= 1;\n   if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n   if ( t < 1 / 2 ) return q;\n   if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n   return p;\n \n }\n \n function SRGBToLinear( c ) {\n \n   return ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n \n }\n \n function LinearToSRGB( c ) {\n \n   return ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n \n }\n \n class Color {\n \n   constructor( r, g, b ) {\n \n     if ( g === undefined && b === undefined ) {\n \n       // r is THREE.Color, hex or string\n       return this.set( r );\n \n     }\n \n     return this.setRGB( r, g, b );\n \n   }\n \n   set( value ) {\n \n     if ( value && value.isColor ) {\n \n       this.copy( value );\n \n     } else if ( typeof value === 'number' ) {\n \n       this.setHex( value );\n \n     } else if ( typeof value === 'string' ) {\n \n       this.setStyle( value );\n \n     }\n \n     return this;\n \n   }\n \n   setScalar( scalar ) {\n \n     this.r = scalar;\n     this.g = scalar;\n     this.b = scalar;\n \n     return this;\n \n   }\n \n   setHex( hex ) {\n \n     hex = Math.floor( hex );\n \n     this.r = ( hex >> 16 & 255 ) / 255;\n     this.g = ( hex >> 8 & 255 ) / 255;\n     this.b = ( hex & 255 ) / 255;\n \n     return this;\n \n   }\n \n   setRGB( r, g, b ) {\n \n     this.r = r;\n     this.g = g;\n     this.b = b;\n \n     return this;\n \n   }\n \n   setHSL( h, s, l ) {\n \n     // h,s,l ranges are in 0.0 - 1.0\n     h = euclideanModulo( h, 1 );\n     s = clamp( s, 0, 1 );\n     l = clamp( l, 0, 1 );\n \n     if ( s === 0 ) {\n \n       this.r = this.g = this.b = l;\n \n     } else {\n \n       const p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n       const q = ( 2 * l ) - p;\n \n       this.r = hue2rgb( q, p, h + 1 / 3 );\n       this.g = hue2rgb( q, p, h );\n       this.b = hue2rgb( q, p, h - 1 / 3 );\n \n     }\n \n     return this;\n \n   }\n \n   setStyle( style ) {\n \n     function handleAlpha( string ) {\n \n       if ( string === undefined ) return;\n \n       if ( parseFloat( string ) < 1 ) {\n \n         console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n \n       }\n \n     }\n \n \n     let m;\n \n     if ( m = /^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec( style ) ) {\n \n       // rgb / hsl\n \n       let color;\n       const name = m[ 1 ];\n       const components = m[ 2 ];\n \n       switch ( name ) {\n \n         case 'rgb':\n         case 'rgba':\n \n           if ( color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n \n             // rgb(255,0,0) rgba(255,0,0,0.5)\n             this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n             this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n             this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n \n             handleAlpha( color[ 4 ] );\n \n             return this;\n \n           }\n \n           if ( color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n \n             // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n             this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n             this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n             this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n \n             handleAlpha( color[ 4 ] );\n \n             return this;\n \n           }\n \n           break;\n \n         case 'hsl':\n         case 'hsla':\n \n           if ( color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n \n             // hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n             const h = parseFloat( color[ 1 ] ) / 360;\n             const s = parseInt( color[ 2 ], 10 ) / 100;\n             const l = parseInt( color[ 3 ], 10 ) / 100;\n \n             handleAlpha( color[ 4 ] );\n \n             return this.setHSL( h, s, l );\n \n           }\n \n           break;\n \n       }\n \n     } else if ( m = /^\\#([A-Fa-f\\d]+)$/.exec( style ) ) {\n \n       // hex color\n \n       const hex = m[ 1 ];\n       const size = hex.length;\n \n       if ( size === 3 ) {\n \n         // #ff0\n         this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n         this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n         this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n \n         return this;\n \n       } else if ( size === 6 ) {\n \n         // #ff0000\n         this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n         this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n         this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n \n         return this;\n \n       }\n \n     }\n \n     if ( style && style.length > 0 ) {\n \n       return this.setColorName( style );\n \n     }\n \n     return this;\n \n   }\n \n   setColorName( style ) {\n \n     // color keywords\n     const hex = _colorKeywords[ style.toLowerCase() ];\n \n     if ( hex !== undefined ) {\n \n       // red\n       this.setHex( hex );\n \n     } else {\n \n       // unknown color\n       console.warn( 'THREE.Color: Unknown color ' + style );\n \n     }\n \n     return this;\n \n   }\n \n   clone() {\n \n     return new this.constructor( this.r, this.g, this.b );\n \n   }\n \n   copy( color ) {\n \n     this.r = color.r;\n     this.g = color.g;\n     this.b = color.b;\n \n     return this;\n \n   }\n \n   copyGammaToLinear( color, gammaFactor = 2.0 ) {\n \n     this.r = Math.pow( color.r, gammaFactor );\n     this.g = Math.pow( color.g, gammaFactor );\n     this.b = Math.pow( color.b, gammaFactor );\n \n     return this;\n \n   }\n \n   copyLinearToGamma( color, gammaFactor = 2.0 ) {\n \n     const safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n \n     this.r = Math.pow( color.r, safeInverse );\n     this.g = Math.pow( color.g, safeInverse );\n     this.b = Math.pow( color.b, safeInverse );\n \n     return this;\n \n   }\n \n   convertGammaToLinear( gammaFactor ) {\n \n     this.copyGammaToLinear( this, gammaFactor );\n \n     return this;\n \n   }\n \n   convertLinearToGamma( gammaFactor ) {\n \n     this.copyLinearToGamma( this, gammaFactor );\n \n     return this;\n \n   }\n \n   copySRGBToLinear( color ) {\n \n     this.r = SRGBToLinear( color.r );\n     this.g = SRGBToLinear( color.g );\n     this.b = SRGBToLinear( color.b );\n \n     return this;\n \n   }\n \n   copyLinearToSRGB( color ) {\n \n     this.r = LinearToSRGB( color.r );\n     this.g = LinearToSRGB( color.g );\n     this.b = LinearToSRGB( color.b );\n \n     return this;\n \n   }\n \n   convertSRGBToLinear() {\n \n     this.copySRGBToLinear( this );\n \n     return this;\n \n   }\n \n   convertLinearToSRGB() {\n \n     this.copyLinearToSRGB( this );\n \n     return this;\n \n   }\n \n   getHex() {\n \n     return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n \n   }\n \n   getHexString() {\n \n     return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n \n   }\n \n   getHSL( target ) {\n \n     // h,s,l ranges are in 0.0 - 1.0\n \n     const r = this.r, g = this.g, b = this.b;\n \n     const max = Math.max( r, g, b );\n     const min = Math.min( r, g, b );\n \n     let hue, saturation;\n     const lightness = ( min + max ) / 2.0;\n \n     if ( min === max ) {\n \n       hue = 0;\n       saturation = 0;\n \n     } else {\n \n       const delta = max - min;\n \n       saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n \n       switch ( max ) {\n \n         case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n         case g: hue = ( b - r ) / delta + 2; break;\n         case b: hue = ( r - g ) / delta + 4; break;\n \n       }\n \n       hue /= 6;\n \n     }\n \n     target.h = hue;\n     target.s = saturation;\n     target.l = lightness;\n \n     return target;\n \n   }\n \n   getStyle() {\n \n     return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n \n   }\n \n   offsetHSL( h, s, l ) {\n \n     this.getHSL( _hslA );\n \n     _hslA.h += h; _hslA.s += s; _hslA.l += l;\n \n     this.setHSL( _hslA.h, _hslA.s, _hslA.l );\n \n     return this;\n \n   }\n \n   add( color ) {\n \n     this.r += color.r;\n     this.g += color.g;\n     this.b += color.b;\n \n     return this;\n \n   }\n \n   addColors( color1, color2 ) {\n \n     this.r = color1.r + color2.r;\n     this.g = color1.g + color2.g;\n     this.b = color1.b + color2.b;\n \n     return this;\n \n   }\n \n   addScalar( s ) {\n \n     this.r += s;\n     this.g += s;\n     this.b += s;\n \n     return this;\n \n   }\n \n   sub( color ) {\n \n     this.r = Math.max( 0, this.r - color.r );\n     this.g = Math.max( 0, this.g - color.g );\n     this.b = Math.max( 0, this.b - color.b );\n \n     return this;\n \n   }\n \n   multiply( color ) {\n \n     this.r *= color.r;\n     this.g *= color.g;\n     this.b *= color.b;\n \n     return this;\n \n   }\n \n   multiplyScalar( s ) {\n \n     this.r *= s;\n     this.g *= s;\n     this.b *= s;\n \n     return this;\n \n   }\n \n   lerp( color, alpha ) {\n \n     this.r += ( color.r - this.r ) * alpha;\n     this.g += ( color.g - this.g ) * alpha;\n     this.b += ( color.b - this.b ) * alpha;\n \n     return this;\n \n   }\n \n   lerpColors( color1, color2, alpha ) {\n \n     this.r = color1.r + ( color2.r - color1.r ) * alpha;\n     this.g = color1.g + ( color2.g - color1.g ) * alpha;\n     this.b = color1.b + ( color2.b - color1.b ) * alpha;\n \n     return this;\n \n   }\n \n   lerpHSL( color, alpha ) {\n \n     this.getHSL( _hslA );\n     color.getHSL( _hslB );\n \n     const h = lerp( _hslA.h, _hslB.h, alpha );\n     const s = lerp( _hslA.s, _hslB.s, alpha );\n     const l = lerp( _hslA.l, _hslB.l, alpha );\n \n     this.setHSL( h, s, l );\n \n     return this;\n \n   }\n \n   equals( c ) {\n \n     return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n \n   }\n \n   fromArray( array, offset = 0 ) {\n \n     this.r = array[ offset ];\n     this.g = array[ offset + 1 ];\n     this.b = array[ offset + 2 ];\n \n     return this;\n \n   }\n \n   toArray( array = [], offset = 0 ) {\n \n     array[ offset ] = this.r;\n     array[ offset + 1 ] = this.g;\n     array[ offset + 2 ] = this.b;\n \n     return array;\n \n   }\n \n   fromBufferAttribute( attribute, index ) {\n \n     this.r = attribute.getX( index );\n     this.g = attribute.getY( index );\n     this.b = attribute.getZ( index );\n \n     if ( attribute.normalized === true ) {\n \n       // assuming Uint8Array\n \n       this.r /= 255;\n       this.g /= 255;\n       this.b /= 255;\n \n     }\n \n     return this;\n \n   }\n \n   toJSON() {\n \n     return this.getHex();\n \n   }\n \n }\n \n Color.NAMES = _colorKeywords;\n \n Color.prototype.isColor = true;\n Color.prototype.r = 1;\n Color.prototype.g = 1;\n Color.prototype.b = 1;\n \n /**\n  * parameters = {\n  *  color: <hex>,\n  *  opacity: <float>,\n  *  map: new THREE.Texture( <Image> ),\n  *\n  *  lightMap: new THREE.Texture( <Image> ),\n  *  lightMapIntensity: <float>\n  *\n  *  aoMap: new THREE.Texture( <Image> ),\n  *  aoMapIntensity: <float>\n  *\n  *  specularMap: new THREE.Texture( <Image> ),\n  *\n  *  alphaMap: new THREE.Texture( <Image> ),\n  *\n  *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n  *  combine: THREE.Multiply,\n  *  reflectivity: <float>,\n  *  refractionRatio: <float>,\n  *\n  *  depthTest: <bool>,\n  *  depthWrite: <bool>,\n  *\n  *  wireframe: <boolean>,\n  *  wireframeLinewidth: <float>,\n  * }\n  */\n \n class MeshBasicMaterial extends Material {\n \n   constructor( parameters ) {\n \n     super();\n \n     this.type = 'MeshBasicMaterial';\n \n     this.color = new Color( 0xffffff ); // emissive\n \n     this.map = null;\n \n     this.lightMap = null;\n     this.lightMapIntensity = 1.0;\n \n     this.aoMap = null;\n     this.aoMapIntensity = 1.0;\n \n     this.specularMap = null;\n \n     this.alphaMap = null;\n \n     this.envMap = null;\n     this.combine = MultiplyOperation;\n     this.reflectivity = 1;\n     this.refractionRatio = 0.98;\n \n     this.wireframe = false;\n     this.wireframeLinewidth = 1;\n     this.wireframeLinecap = 'round';\n     this.wireframeLinejoin = 'round';\n \n     this.setValues( parameters );\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.color.copy( source.color );\n \n     this.map = source.map;\n \n     this.lightMap = source.lightMap;\n     this.lightMapIntensity = source.lightMapIntensity;\n \n     this.aoMap = source.aoMap;\n     this.aoMapIntensity = source.aoMapIntensity;\n \n     this.specularMap = source.specularMap;\n \n     this.alphaMap = source.alphaMap;\n \n     this.envMap = source.envMap;\n     this.combine = source.combine;\n     this.reflectivity = source.reflectivity;\n     this.refractionRatio = source.refractionRatio;\n \n     this.wireframe = source.wireframe;\n     this.wireframeLinewidth = source.wireframeLinewidth;\n     this.wireframeLinecap = source.wireframeLinecap;\n     this.wireframeLinejoin = source.wireframeLinejoin;\n \n     return this;\n \n   }\n \n }\n \n MeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n \n const _vector$9 = /*@__PURE__*/ new Vector3();\n const _vector2$1 = /*@__PURE__*/ new Vector2();\n \n class BufferAttribute {\n \n   constructor( array, itemSize, normalized ) {\n \n     if ( Array.isArray( array ) ) {\n \n       throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n \n     }\n \n     this.name = '';\n \n     this.array = array;\n     this.itemSize = itemSize;\n     this.count = array !== undefined ? array.length / itemSize : 0;\n     this.normalized = normalized === true;\n \n     this.usage = StaticDrawUsage;\n     this.updateRange = { offset: 0, count: - 1 };\n \n     this.version = 0;\n \n   }\n \n   onUploadCallback() {}\n \n   set needsUpdate( value ) {\n \n     if ( value === true ) this.version ++;\n \n   }\n \n   setUsage( value ) {\n \n     this.usage = value;\n \n     return this;\n \n   }\n \n   copy( source ) {\n \n     this.name = source.name;\n     this.array = new source.array.constructor( source.array );\n     this.itemSize = source.itemSize;\n     this.count = source.count;\n     this.normalized = source.normalized;\n \n     this.usage = source.usage;\n \n     return this;\n \n   }\n \n   copyAt( index1, attribute, index2 ) {\n \n     index1 *= this.itemSize;\n     index2 *= attribute.itemSize;\n \n     for ( let i = 0, l = this.itemSize; i < l; i ++ ) {\n \n       this.array[ index1 + i ] = attribute.array[ index2 + i ];\n \n     }\n \n     return this;\n \n   }\n \n   copyArray( array ) {\n \n     this.array.set( array );\n \n     return this;\n \n   }\n \n   copyColorsArray( colors ) {\n \n     const array = this.array;\n     let offset = 0;\n \n     for ( let i = 0, l = colors.length; i < l; i ++ ) {\n \n       let color = colors[ i ];\n \n       if ( color === undefined ) {\n \n         console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n         color = new Color();\n \n       }\n \n       array[ offset ++ ] = color.r;\n       array[ offset ++ ] = color.g;\n       array[ offset ++ ] = color.b;\n \n     }\n \n     return this;\n \n   }\n \n   copyVector2sArray( vectors ) {\n \n     const array = this.array;\n     let offset = 0;\n \n     for ( let i = 0, l = vectors.length; i < l; i ++ ) {\n \n       let vector = vectors[ i ];\n \n       if ( vector === undefined ) {\n \n         console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n         vector = new Vector2();\n \n       }\n \n       array[ offset ++ ] = vector.x;\n       array[ offset ++ ] = vector.y;\n \n     }\n \n     return this;\n \n   }\n \n   copyVector3sArray( vectors ) {\n \n     const array = this.array;\n     let offset = 0;\n \n     for ( let i = 0, l = vectors.length; i < l; i ++ ) {\n \n       let vector = vectors[ i ];\n \n       if ( vector === undefined ) {\n \n         console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n         vector = new Vector3();\n \n       }\n \n       array[ offset ++ ] = vector.x;\n       array[ offset ++ ] = vector.y;\n       array[ offset ++ ] = vector.z;\n \n     }\n \n     return this;\n \n   }\n \n   copyVector4sArray( vectors ) {\n \n     const array = this.array;\n     let offset = 0;\n \n     for ( let i = 0, l = vectors.length; i < l; i ++ ) {\n \n       let vector = vectors[ i ];\n \n       if ( vector === undefined ) {\n \n         console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n         vector = new Vector4();\n \n       }\n \n       array[ offset ++ ] = vector.x;\n       array[ offset ++ ] = vector.y;\n       array[ offset ++ ] = vector.z;\n       array[ offset ++ ] = vector.w;\n \n     }\n \n     return this;\n \n   }\n \n   applyMatrix3( m ) {\n \n     if ( this.itemSize === 2 ) {\n \n       for ( let i = 0, l = this.count; i < l; i ++ ) {\n \n         _vector2$1.fromBufferAttribute( this, i );\n         _vector2$1.applyMatrix3( m );\n \n         this.setXY( i, _vector2$1.x, _vector2$1.y );\n \n       }\n \n     } else if ( this.itemSize === 3 ) {\n \n       for ( let i = 0, l = this.count; i < l; i ++ ) {\n \n         _vector$9.fromBufferAttribute( this, i );\n         _vector$9.applyMatrix3( m );\n \n         this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n \n       }\n \n     }\n \n     return this;\n \n   }\n \n   applyMatrix4( m ) {\n \n     for ( let i = 0, l = this.count; i < l; i ++ ) {\n \n       _vector$9.x = this.getX( i );\n       _vector$9.y = this.getY( i );\n       _vector$9.z = this.getZ( i );\n \n       _vector$9.applyMatrix4( m );\n \n       this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n \n     }\n \n     return this;\n \n   }\n \n   applyNormalMatrix( m ) {\n \n     for ( let i = 0, l = this.count; i < l; i ++ ) {\n \n       _vector$9.x = this.getX( i );\n       _vector$9.y = this.getY( i );\n       _vector$9.z = this.getZ( i );\n \n       _vector$9.applyNormalMatrix( m );\n \n       this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n \n     }\n \n     return this;\n \n   }\n \n   transformDirection( m ) {\n \n     for ( let i = 0, l = this.count; i < l; i ++ ) {\n \n       _vector$9.x = this.getX( i );\n       _vector$9.y = this.getY( i );\n       _vector$9.z = this.getZ( i );\n \n       _vector$9.transformDirection( m );\n \n       this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n \n     }\n \n     return this;\n \n   }\n \n   set( value, offset = 0 ) {\n \n     this.array.set( value, offset );\n \n     return this;\n \n   }\n \n   getX( index ) {\n \n     return this.array[ index * this.itemSize ];\n \n   }\n \n   setX( index, x ) {\n \n     this.array[ index * this.itemSize ] = x;\n \n     return this;\n \n   }\n \n   getY( index ) {\n \n     return this.array[ index * this.itemSize + 1 ];\n \n   }\n \n   setY( index, y ) {\n \n     this.array[ index * this.itemSize + 1 ] = y;\n \n     return this;\n \n   }\n \n   getZ( index ) {\n \n     return this.array[ index * this.itemSize + 2 ];\n \n   }\n \n   setZ( index, z ) {\n \n     this.array[ index * this.itemSize + 2 ] = z;\n \n     return this;\n \n   }\n \n   getW( index ) {\n \n     return this.array[ index * this.itemSize + 3 ];\n \n   }\n \n   setW( index, w ) {\n \n     this.array[ index * this.itemSize + 3 ] = w;\n \n     return this;\n \n   }\n \n   setXY( index, x, y ) {\n \n     index *= this.itemSize;\n \n     this.array[ index + 0 ] = x;\n     this.array[ index + 1 ] = y;\n \n     return this;\n \n   }\n \n   setXYZ( index, x, y, z ) {\n \n     index *= this.itemSize;\n \n     this.array[ index + 0 ] = x;\n     this.array[ index + 1 ] = y;\n     this.array[ index + 2 ] = z;\n \n     return this;\n \n   }\n \n   setXYZW( index, x, y, z, w ) {\n \n     index *= this.itemSize;\n \n     this.array[ index + 0 ] = x;\n     this.array[ index + 1 ] = y;\n     this.array[ index + 2 ] = z;\n     this.array[ index + 3 ] = w;\n \n     return this;\n \n   }\n \n   onUpload( callback ) {\n \n     this.onUploadCallback = callback;\n \n     return this;\n \n   }\n \n   clone() {\n \n     return new this.constructor( this.array, this.itemSize ).copy( this );\n \n   }\n \n   toJSON() {\n \n     const data = {\n       itemSize: this.itemSize,\n       type: this.array.constructor.name,\n       array: Array.prototype.slice.call( this.array ),\n       normalized: this.normalized\n     };\n \n     if ( this.name !== '' ) data.name = this.name;\n     if ( this.usage !== StaticDrawUsage ) data.usage = this.usage;\n     if ( this.updateRange.offset !== 0 || this.updateRange.count !== - 1 ) data.updateRange = this.updateRange;\n \n     return data;\n \n   }\n \n }\n \n BufferAttribute.prototype.isBufferAttribute = true;\n \n //\n \n class Int8BufferAttribute extends BufferAttribute {\n \n   constructor( array, itemSize, normalized ) {\n \n     super( new Int8Array( array ), itemSize, normalized );\n \n   }\n \n }\n \n class Uint8BufferAttribute extends BufferAttribute {\n \n   constructor( array, itemSize, normalized ) {\n \n     super( new Uint8Array( array ), itemSize, normalized );\n \n   }\n \n }\n \n class Uint8ClampedBufferAttribute extends BufferAttribute {\n \n   constructor( array, itemSize, normalized ) {\n \n     super( new Uint8ClampedArray( array ), itemSize, normalized );\n \n   }\n \n }\n \n class Int16BufferAttribute extends BufferAttribute {\n \n   constructor( array, itemSize, normalized ) {\n \n     super( new Int16Array( array ), itemSize, normalized );\n \n   }\n \n }\n \n class Uint16BufferAttribute extends BufferAttribute {\n \n   constructor( array, itemSize, normalized ) {\n \n     super( new Uint16Array( array ), itemSize, normalized );\n \n   }\n \n }\n \n class Int32BufferAttribute extends BufferAttribute {\n \n   constructor( array, itemSize, normalized ) {\n \n     super( new Int32Array( array ), itemSize, normalized );\n \n   }\n \n }\n \n class Uint32BufferAttribute extends BufferAttribute {\n \n   constructor( array, itemSize, normalized ) {\n \n     super( new Uint32Array( array ), itemSize, normalized );\n \n   }\n \n }\n \n class Float16BufferAttribute extends BufferAttribute {\n \n   constructor( array, itemSize, normalized ) {\n \n     super( new Uint16Array( array ), itemSize, normalized );\n \n   }\n \n }\n \n Float16BufferAttribute.prototype.isFloat16BufferAttribute = true;\n \n class Float32BufferAttribute extends BufferAttribute {\n \n   constructor( array, itemSize, normalized ) {\n \n     super( new Float32Array( array ), itemSize, normalized );\n \n   }\n \n }\n \n class Float64BufferAttribute extends BufferAttribute {\n \n   constructor( array, itemSize, normalized ) {\n \n     super( new Float64Array( array ), itemSize, normalized );\n \n   }\n \n }\n \n let _id = 0;\n \n const _m1 = /*@__PURE__*/ new Matrix4();\n const _obj = /*@__PURE__*/ new Object3D();\n const _offset = /*@__PURE__*/ new Vector3();\n const _box$1 = /*@__PURE__*/ new Box3();\n const _boxMorphTargets = /*@__PURE__*/ new Box3();\n const _vector$8 = /*@__PURE__*/ new Vector3();\n \n class BufferGeometry extends EventDispatcher {\n \n   constructor() {\n \n     super();\n \n     Object.defineProperty( this, 'id', { value: _id ++ } );\n \n     this.uuid = generateUUID();\n \n     this.name = '';\n     this.type = 'BufferGeometry';\n \n     this.index = null;\n     this.attributes = {};\n \n     this.morphAttributes = {};\n     this.morphTargetsRelative = false;\n \n     this.groups = [];\n \n     this.boundingBox = null;\n     this.boundingSphere = null;\n \n     this.drawRange = { start: 0, count: Infinity };\n \n     this.userData = {};\n \n   }\n \n   getIndex() {\n \n     return this.index;\n \n   }\n \n   setIndex( index ) {\n \n     if ( Array.isArray( index ) ) {\n \n       this.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n \n     } else {\n \n       this.index = index;\n \n     }\n \n     return this;\n \n   }\n \n   getAttribute( name ) {\n \n     return this.attributes[ name ];\n \n   }\n \n   setAttribute( name, attribute ) {\n \n     this.attributes[ name ] = attribute;\n \n     return this;\n \n   }\n \n   deleteAttribute( name ) {\n \n     delete this.attributes[ name ];\n \n     return this;\n \n   }\n \n   hasAttribute( name ) {\n \n     return this.attributes[ name ] !== undefined;\n \n   }\n \n   addGroup( start, count, materialIndex = 0 ) {\n \n     this.groups.push( {\n \n       start: start,\n       count: count,\n       materialIndex: materialIndex\n \n     } );\n \n   }\n \n   clearGroups() {\n \n     this.groups = [];\n \n   }\n \n   setDrawRange( start, count ) {\n \n     this.drawRange.start = start;\n     this.drawRange.count = count;\n \n   }\n \n   applyMatrix4( matrix ) {\n \n     const position = this.attributes.position;\n \n     if ( position !== undefined ) {\n \n       position.applyMatrix4( matrix );\n \n       position.needsUpdate = true;\n \n     }\n \n     const normal = this.attributes.normal;\n \n     if ( normal !== undefined ) {\n \n       const normalMatrix = new Matrix3().getNormalMatrix( matrix );\n \n       normal.applyNormalMatrix( normalMatrix );\n \n       normal.needsUpdate = true;\n \n     }\n \n     const tangent = this.attributes.tangent;\n \n     if ( tangent !== undefined ) {\n \n       tangent.transformDirection( matrix );\n \n       tangent.needsUpdate = true;\n \n     }\n \n     if ( this.boundingBox !== null ) {\n \n       this.computeBoundingBox();\n \n     }\n \n     if ( this.boundingSphere !== null ) {\n \n       this.computeBoundingSphere();\n \n     }\n \n     return this;\n \n   }\n \n   applyQuaternion( q ) {\n \n     _m1.makeRotationFromQuaternion( q );\n \n     this.applyMatrix4( _m1 );\n \n     return this;\n \n   }\n \n   rotateX( angle ) {\n \n     // rotate geometry around world x-axis\n \n     _m1.makeRotationX( angle );\n \n     this.applyMatrix4( _m1 );\n \n     return this;\n \n   }\n \n   rotateY( angle ) {\n \n     // rotate geometry around world y-axis\n \n     _m1.makeRotationY( angle );\n \n     this.applyMatrix4( _m1 );\n \n     return this;\n \n   }\n \n   rotateZ( angle ) {\n \n     // rotate geometry around world z-axis\n \n     _m1.makeRotationZ( angle );\n \n     this.applyMatrix4( _m1 );\n \n     return this;\n \n   }\n \n   translate( x, y, z ) {\n \n     // translate geometry\n \n     _m1.makeTranslation( x, y, z );\n \n     this.applyMatrix4( _m1 );\n \n     return this;\n \n   }\n \n   scale( x, y, z ) {\n \n     // scale geometry\n \n     _m1.makeScale( x, y, z );\n \n     this.applyMatrix4( _m1 );\n \n     return this;\n \n   }\n \n   lookAt( vector ) {\n \n     _obj.lookAt( vector );\n \n     _obj.updateMatrix();\n \n     this.applyMatrix4( _obj.matrix );\n \n     return this;\n \n   }\n \n   center() {\n \n     this.computeBoundingBox();\n \n     this.boundingBox.getCenter( _offset ).negate();\n \n     this.translate( _offset.x, _offset.y, _offset.z );\n \n     return this;\n \n   }\n \n   setFromPoints( points ) {\n \n     const position = [];\n \n     for ( let i = 0, l = points.length; i < l; i ++ ) {\n \n       const point = points[ i ];\n       position.push( point.x, point.y, point.z || 0 );\n \n     }\n \n     this.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n \n     return this;\n \n   }\n \n   computeBoundingBox() {\n \n     if ( this.boundingBox === null ) {\n \n       this.boundingBox = new Box3();\n \n     }\n \n     const position = this.attributes.position;\n     const morphAttributesPosition = this.morphAttributes.position;\n \n     if ( position && position.isGLBufferAttribute ) {\n \n       console.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this );\n \n       this.boundingBox.set(\n         new Vector3( - Infinity, - Infinity, - Infinity ),\n         new Vector3( + Infinity, + Infinity, + Infinity )\n       );\n \n       return;\n \n     }\n \n     if ( position !== undefined ) {\n \n       this.boundingBox.setFromBufferAttribute( position );\n \n       // process morph attributes if present\n \n       if ( morphAttributesPosition ) {\n \n         for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n \n           const morphAttribute = morphAttributesPosition[ i ];\n           _box$1.setFromBufferAttribute( morphAttribute );\n \n           if ( this.morphTargetsRelative ) {\n \n             _vector$8.addVectors( this.boundingBox.min, _box$1.min );\n             this.boundingBox.expandByPoint( _vector$8 );\n \n             _vector$8.addVectors( this.boundingBox.max, _box$1.max );\n             this.boundingBox.expandByPoint( _vector$8 );\n \n           } else {\n \n             this.boundingBox.expandByPoint( _box$1.min );\n             this.boundingBox.expandByPoint( _box$1.max );\n \n           }\n \n         }\n \n       }\n \n     } else {\n \n       this.boundingBox.makeEmpty();\n \n     }\n \n     if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n \n       console.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n \n     }\n \n   }\n \n   computeBoundingSphere() {\n \n     if ( this.boundingSphere === null ) {\n \n       this.boundingSphere = new Sphere();\n \n     }\n \n     const position = this.attributes.position;\n     const morphAttributesPosition = this.morphAttributes.position;\n \n     if ( position && position.isGLBufferAttribute ) {\n \n       console.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this );\n \n       this.boundingSphere.set( new Vector3(), Infinity );\n \n       return;\n \n     }\n \n     if ( position ) {\n \n       // first, find the center of the bounding sphere\n \n       const center = this.boundingSphere.center;\n \n       _box$1.setFromBufferAttribute( position );\n \n       // process morph attributes if present\n \n       if ( morphAttributesPosition ) {\n \n         for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n \n           const morphAttribute = morphAttributesPosition[ i ];\n           _boxMorphTargets.setFromBufferAttribute( morphAttribute );\n \n           if ( this.morphTargetsRelative ) {\n \n             _vector$8.addVectors( _box$1.min, _boxMorphTargets.min );\n             _box$1.expandByPoint( _vector$8 );\n \n             _vector$8.addVectors( _box$1.max, _boxMorphTargets.max );\n             _box$1.expandByPoint( _vector$8 );\n \n           } else {\n \n             _box$1.expandByPoint( _boxMorphTargets.min );\n             _box$1.expandByPoint( _boxMorphTargets.max );\n \n           }\n \n         }\n \n       }\n \n       _box$1.getCenter( center );\n \n       // second, try to find a boundingSphere with a radius smaller than the\n       // boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n \n       let maxRadiusSq = 0;\n \n       for ( let i = 0, il = position.count; i < il; i ++ ) {\n \n         _vector$8.fromBufferAttribute( position, i );\n \n         maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );\n \n       }\n \n       // process morph attributes if present\n \n       if ( morphAttributesPosition ) {\n \n         for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n \n           const morphAttribute = morphAttributesPosition[ i ];\n           const morphTargetsRelative = this.morphTargetsRelative;\n \n           for ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\n \n             _vector$8.fromBufferAttribute( morphAttribute, j );\n \n             if ( morphTargetsRelative ) {\n \n               _offset.fromBufferAttribute( position, j );\n               _vector$8.add( _offset );\n \n             }\n \n             maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );\n \n           }\n \n         }\n \n       }\n \n       this.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n \n       if ( isNaN( this.boundingSphere.radius ) ) {\n \n         console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n \n       }\n \n     }\n \n   }\n \n   computeTangents() {\n \n     const index = this.index;\n     const attributes = this.attributes;\n \n     // based on http://www.terathon.com/code/tangent.html\n     // (per vertex tangents)\n \n     if ( index === null ||\n        attributes.position === undefined ||\n        attributes.normal === undefined ||\n        attributes.uv === undefined ) {\n \n       console.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );\n       return;\n \n     }\n \n     const indices = index.array;\n     const positions = attributes.position.array;\n     const normals = attributes.normal.array;\n     const uvs = attributes.uv.array;\n \n     const nVertices = positions.length / 3;\n \n     if ( attributes.tangent === undefined ) {\n \n       this.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );\n \n     }\n \n     const tangents = attributes.tangent.array;\n \n     const tan1 = [], tan2 = [];\n \n     for ( let i = 0; i < nVertices; i ++ ) {\n \n       tan1[ i ] = new Vector3();\n       tan2[ i ] = new Vector3();\n \n     }\n \n     const vA = new Vector3(),\n       vB = new Vector3(),\n       vC = new Vector3(),\n \n       uvA = new Vector2(),\n       uvB = new Vector2(),\n       uvC = new Vector2(),\n \n       sdir = new Vector3(),\n       tdir = new Vector3();\n \n     function handleTriangle( a, b, c ) {\n \n       vA.fromArray( positions, a * 3 );\n       vB.fromArray( positions, b * 3 );\n       vC.fromArray( positions, c * 3 );\n \n       uvA.fromArray( uvs, a * 2 );\n       uvB.fromArray( uvs, b * 2 );\n       uvC.fromArray( uvs, c * 2 );\n \n       vB.sub( vA );\n       vC.sub( vA );\n \n       uvB.sub( uvA );\n       uvC.sub( uvA );\n \n       const r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );\n \n       // silently ignore degenerate uv triangles having coincident or colinear vertices\n \n       if ( ! isFinite( r ) ) return;\n \n       sdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );\n       tdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );\n \n       tan1[ a ].add( sdir );\n       tan1[ b ].add( sdir );\n       tan1[ c ].add( sdir );\n \n       tan2[ a ].add( tdir );\n       tan2[ b ].add( tdir );\n       tan2[ c ].add( tdir );\n \n     }\n \n     let groups = this.groups;\n \n     if ( groups.length === 0 ) {\n \n       groups = [ {\n         start: 0,\n         count: indices.length\n       } ];\n \n     }\n \n     for ( let i = 0, il = groups.length; i < il; ++ i ) {\n \n       const group = groups[ i ];\n \n       const start = group.start;\n       const count = group.count;\n \n       for ( let j = start, jl = start + count; j < jl; j += 3 ) {\n \n         handleTriangle(\n           indices[ j + 0 ],\n           indices[ j + 1 ],\n           indices[ j + 2 ]\n         );\n \n       }\n \n     }\n \n     const tmp = new Vector3(), tmp2 = new Vector3();\n     const n = new Vector3(), n2 = new Vector3();\n \n     function handleVertex( v ) {\n \n       n.fromArray( normals, v * 3 );\n       n2.copy( n );\n \n       const t = tan1[ v ];\n \n       // Gram-Schmidt orthogonalize\n \n       tmp.copy( t );\n       tmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n \n       // Calculate handedness\n \n       tmp2.crossVectors( n2, t );\n       const test = tmp2.dot( tan2[ v ] );\n       const w = ( test < 0.0 ) ? - 1.0 : 1.0;\n \n       tangents[ v * 4 ] = tmp.x;\n       tangents[ v * 4 + 1 ] = tmp.y;\n       tangents[ v * 4 + 2 ] = tmp.z;\n       tangents[ v * 4 + 3 ] = w;\n \n     }\n \n     for ( let i = 0, il = groups.length; i < il; ++ i ) {\n \n       const group = groups[ i ];\n \n       const start = group.start;\n       const count = group.count;\n \n       for ( let j = start, jl = start + count; j < jl; j += 3 ) {\n \n         handleVertex( indices[ j + 0 ] );\n         handleVertex( indices[ j + 1 ] );\n         handleVertex( indices[ j + 2 ] );\n \n       }\n \n     }\n \n   }\n \n   computeVertexNormals() {\n \n     const index = this.index;\n     const positionAttribute = this.getAttribute( 'position' );\n \n     if ( positionAttribute !== undefined ) {\n \n       let normalAttribute = this.getAttribute( 'normal' );\n \n       if ( normalAttribute === undefined ) {\n \n         normalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );\n         this.setAttribute( 'normal', normalAttribute );\n \n       } else {\n \n         // reset existing normals to zero\n \n         for ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {\n \n           normalAttribute.setXYZ( i, 0, 0, 0 );\n \n         }\n \n       }\n \n       const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n       const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();\n       const cb = new Vector3(), ab = new Vector3();\n \n       // indexed elements\n \n       if ( index ) {\n \n         for ( let i = 0, il = index.count; i < il; i += 3 ) {\n \n           const vA = index.getX( i + 0 );\n           const vB = index.getX( i + 1 );\n           const vC = index.getX( i + 2 );\n \n           pA.fromBufferAttribute( positionAttribute, vA );\n           pB.fromBufferAttribute( positionAttribute, vB );\n           pC.fromBufferAttribute( positionAttribute, vC );\n \n           cb.subVectors( pC, pB );\n           ab.subVectors( pA, pB );\n           cb.cross( ab );\n \n           nA.fromBufferAttribute( normalAttribute, vA );\n           nB.fromBufferAttribute( normalAttribute, vB );\n           nC.fromBufferAttribute( normalAttribute, vC );\n \n           nA.add( cb );\n           nB.add( cb );\n           nC.add( cb );\n \n           normalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );\n           normalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );\n           normalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );\n \n         }\n \n       } else {\n \n         // non-indexed elements (unconnected triangle soup)\n \n         for ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {\n \n           pA.fromBufferAttribute( positionAttribute, i + 0 );\n           pB.fromBufferAttribute( positionAttribute, i + 1 );\n           pC.fromBufferAttribute( positionAttribute, i + 2 );\n \n           cb.subVectors( pC, pB );\n           ab.subVectors( pA, pB );\n           cb.cross( ab );\n \n           normalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );\n           normalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );\n           normalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );\n \n         }\n \n       }\n \n       this.normalizeNormals();\n \n       normalAttribute.needsUpdate = true;\n \n     }\n \n   }\n \n   merge( geometry, offset ) {\n \n     if ( ! ( geometry && geometry.isBufferGeometry ) ) {\n \n       console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n       return;\n \n     }\n \n     if ( offset === undefined ) {\n \n       offset = 0;\n \n       console.warn(\n         'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\n         + 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\n       );\n \n     }\n \n     const attributes = this.attributes;\n \n     for ( const key in attributes ) {\n \n       if ( geometry.attributes[ key ] === undefined ) continue;\n \n       const attribute1 = attributes[ key ];\n       const attributeArray1 = attribute1.array;\n \n       const attribute2 = geometry.attributes[ key ];\n       const attributeArray2 = attribute2.array;\n \n       const attributeOffset = attribute2.itemSize * offset;\n       const length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );\n \n       for ( let i = 0, j = attributeOffset; i < length; i ++, j ++ ) {\n \n         attributeArray1[ j ] = attributeArray2[ i ];\n \n       }\n \n     }\n \n     return this;\n \n   }\n \n   normalizeNormals() {\n \n     const normals = this.attributes.normal;\n \n     for ( let i = 0, il = normals.count; i < il; i ++ ) {\n \n       _vector$8.fromBufferAttribute( normals, i );\n \n       _vector$8.normalize();\n \n       normals.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );\n \n     }\n \n   }\n \n   toNonIndexed() {\n \n     function convertBufferAttribute( attribute, indices ) {\n \n       const array = attribute.array;\n       const itemSize = attribute.itemSize;\n       const normalized = attribute.normalized;\n \n       const array2 = new array.constructor( indices.length * itemSize );\n \n       let index = 0, index2 = 0;\n \n       for ( let i = 0, l = indices.length; i < l; i ++ ) {\n \n         if ( attribute.isInterleavedBufferAttribute ) {\n \n           index = indices[ i ] * attribute.data.stride + attribute.offset;\n \n         } else {\n \n           index = indices[ i ] * itemSize;\n \n         }\n \n         for ( let j = 0; j < itemSize; j ++ ) {\n \n           array2[ index2 ++ ] = array[ index ++ ];\n \n         }\n \n       }\n \n       return new BufferAttribute( array2, itemSize, normalized );\n \n     }\n \n     //\n \n     if ( this.index === null ) {\n \n       console.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );\n       return this;\n \n     }\n \n     const geometry2 = new BufferGeometry();\n \n     const indices = this.index.array;\n     const attributes = this.attributes;\n \n     // attributes\n \n     for ( const name in attributes ) {\n \n       const attribute = attributes[ name ];\n \n       const newAttribute = convertBufferAttribute( attribute, indices );\n \n       geometry2.setAttribute( name, newAttribute );\n \n     }\n \n     // morph attributes\n \n     const morphAttributes = this.morphAttributes;\n \n     for ( const name in morphAttributes ) {\n \n       const morphArray = [];\n       const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n \n       for ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n \n         const attribute = morphAttribute[ i ];\n \n         const newAttribute = convertBufferAttribute( attribute, indices );\n \n         morphArray.push( newAttribute );\n \n       }\n \n       geometry2.morphAttributes[ name ] = morphArray;\n \n     }\n \n     geometry2.morphTargetsRelative = this.morphTargetsRelative;\n \n     // groups\n \n     const groups = this.groups;\n \n     for ( let i = 0, l = groups.length; i < l; i ++ ) {\n \n       const group = groups[ i ];\n       geometry2.addGroup( group.start, group.count, group.materialIndex );\n \n     }\n \n     return geometry2;\n \n   }\n \n   toJSON() {\n \n     const data = {\n       metadata: {\n         version: 4.5,\n         type: 'BufferGeometry',\n         generator: 'BufferGeometry.toJSON'\n       }\n     };\n \n     // standard BufferGeometry serialization\n \n     data.uuid = this.uuid;\n     data.type = this.type;\n     if ( this.name !== '' ) data.name = this.name;\n     if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n \n     if ( this.parameters !== undefined ) {\n \n       const parameters = this.parameters;\n \n       for ( const key in parameters ) {\n \n         if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n \n       }\n \n       return data;\n \n     }\n \n     // for simplicity the code assumes attributes are not shared across geometries, see #15811\n \n     data.data = { attributes: {} };\n \n     const index = this.index;\n \n     if ( index !== null ) {\n \n       data.data.index = {\n         type: index.array.constructor.name,\n         array: Array.prototype.slice.call( index.array )\n       };\n \n     }\n \n     const attributes = this.attributes;\n \n     for ( const key in attributes ) {\n \n       const attribute = attributes[ key ];\n \n       data.data.attributes[ key ] = attribute.toJSON( data.data );\n \n     }\n \n     const morphAttributes = {};\n     let hasMorphAttributes = false;\n \n     for ( const key in this.morphAttributes ) {\n \n       const attributeArray = this.morphAttributes[ key ];\n \n       const array = [];\n \n       for ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n \n         const attribute = attributeArray[ i ];\n \n         array.push( attribute.toJSON( data.data ) );\n \n       }\n \n       if ( array.length > 0 ) {\n \n         morphAttributes[ key ] = array;\n \n         hasMorphAttributes = true;\n \n       }\n \n     }\n \n     if ( hasMorphAttributes ) {\n \n       data.data.morphAttributes = morphAttributes;\n       data.data.morphTargetsRelative = this.morphTargetsRelative;\n \n     }\n \n     const groups = this.groups;\n \n     if ( groups.length > 0 ) {\n \n       data.data.groups = JSON.parse( JSON.stringify( groups ) );\n \n     }\n \n     const boundingSphere = this.boundingSphere;\n \n     if ( boundingSphere !== null ) {\n \n       data.data.boundingSphere = {\n         center: boundingSphere.center.toArray(),\n         radius: boundingSphere.radius\n       };\n \n     }\n \n     return data;\n \n   }\n \n   clone() {\n \n      return new this.constructor().copy( this );\n \n   }\n \n   copy( source ) {\n \n     // reset\n \n     this.index = null;\n     this.attributes = {};\n     this.morphAttributes = {};\n     this.groups = [];\n     this.boundingBox = null;\n     this.boundingSphere = null;\n \n     // used for storing cloned, shared data\n \n     const data = {};\n \n     // name\n \n     this.name = source.name;\n \n     // index\n \n     const index = source.index;\n \n     if ( index !== null ) {\n \n       this.setIndex( index.clone( data ) );\n \n     }\n \n     // attributes\n \n     const attributes = source.attributes;\n \n     for ( const name in attributes ) {\n \n       const attribute = attributes[ name ];\n       this.setAttribute( name, attribute.clone( data ) );\n \n     }\n \n     // morph attributes\n \n     const morphAttributes = source.morphAttributes;\n \n     for ( const name in morphAttributes ) {\n \n       const array = [];\n       const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n \n       for ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {\n \n         array.push( morphAttribute[ i ].clone( data ) );\n \n       }\n \n       this.morphAttributes[ name ] = array;\n \n     }\n \n     this.morphTargetsRelative = source.morphTargetsRelative;\n \n     // groups\n \n     const groups = source.groups;\n \n     for ( let i = 0, l = groups.length; i < l; i ++ ) {\n \n       const group = groups[ i ];\n       this.addGroup( group.start, group.count, group.materialIndex );\n \n     }\n \n     // bounding box\n \n     const boundingBox = source.boundingBox;\n \n     if ( boundingBox !== null ) {\n \n       this.boundingBox = boundingBox.clone();\n \n     }\n \n     // bounding sphere\n \n     const boundingSphere = source.boundingSphere;\n \n     if ( boundingSphere !== null ) {\n \n       this.boundingSphere = boundingSphere.clone();\n \n     }\n \n     // draw range\n \n     this.drawRange.start = source.drawRange.start;\n     this.drawRange.count = source.drawRange.count;\n \n     // user data\n \n     this.userData = source.userData;\n \n     // geometry generator parameters\n \n     if ( source.parameters !== undefined ) this.parameters = Object.assign( {}, source.parameters );\n \n     return this;\n \n   }\n \n   dispose() {\n \n     this.dispatchEvent( { type: 'dispose' } );\n \n   }\n \n }\n \n BufferGeometry.prototype.isBufferGeometry = true;\n \n const _inverseMatrix$2 = /*@__PURE__*/ new Matrix4();\n const _ray$2 = /*@__PURE__*/ new Ray();\n const _sphere$3 = /*@__PURE__*/ new Sphere();\n \n const _vA$1 = /*@__PURE__*/ new Vector3();\n const _vB$1 = /*@__PURE__*/ new Vector3();\n const _vC$1 = /*@__PURE__*/ new Vector3();\n \n const _tempA = /*@__PURE__*/ new Vector3();\n const _tempB = /*@__PURE__*/ new Vector3();\n const _tempC = /*@__PURE__*/ new Vector3();\n \n const _morphA = /*@__PURE__*/ new Vector3();\n const _morphB = /*@__PURE__*/ new Vector3();\n const _morphC = /*@__PURE__*/ new Vector3();\n \n const _uvA$1 = /*@__PURE__*/ new Vector2();\n const _uvB$1 = /*@__PURE__*/ new Vector2();\n const _uvC$1 = /*@__PURE__*/ new Vector2();\n \n const _intersectionPoint = /*@__PURE__*/ new Vector3();\n const _intersectionPointWorld = /*@__PURE__*/ new Vector3();\n \n class Mesh extends Object3D {\n \n   constructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {\n \n     super();\n \n     this.type = 'Mesh';\n \n     this.geometry = geometry;\n     this.material = material;\n \n     this.updateMorphTargets();\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     if ( source.morphTargetInfluences !== undefined ) {\n \n       this.morphTargetInfluences = source.morphTargetInfluences.slice();\n \n     }\n \n     if ( source.morphTargetDictionary !== undefined ) {\n \n       this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n \n     }\n \n     this.material = source.material;\n     this.geometry = source.geometry;\n \n     return this;\n \n   }\n \n   updateMorphTargets() {\n \n     const geometry = this.geometry;\n \n     if ( geometry.isBufferGeometry ) {\n \n       const morphAttributes = geometry.morphAttributes;\n       const keys = Object.keys( morphAttributes );\n \n       if ( keys.length > 0 ) {\n \n         const morphAttribute = morphAttributes[ keys[ 0 ] ];\n \n         if ( morphAttribute !== undefined ) {\n \n           this.morphTargetInfluences = [];\n           this.morphTargetDictionary = {};\n \n           for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n \n             const name = morphAttribute[ m ].name || String( m );\n \n             this.morphTargetInfluences.push( 0 );\n             this.morphTargetDictionary[ name ] = m;\n \n           }\n \n         }\n \n       }\n \n     } else {\n \n       const morphTargets = geometry.morphTargets;\n \n       if ( morphTargets !== undefined && morphTargets.length > 0 ) {\n \n         console.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n \n       }\n \n     }\n \n   }\n \n   raycast( raycaster, intersects ) {\n \n     const geometry = this.geometry;\n     const material = this.material;\n     const matrixWorld = this.matrixWorld;\n \n     if ( material === undefined ) return;\n \n     // Checking boundingSphere distance to ray\n \n     if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n \n     _sphere$3.copy( geometry.boundingSphere );\n     _sphere$3.applyMatrix4( matrixWorld );\n \n     if ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) return;\n \n     //\n \n     _inverseMatrix$2.copy( matrixWorld ).invert();\n     _ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n \n     // Check boundingBox before continuing\n \n     if ( geometry.boundingBox !== null ) {\n \n       if ( _ray$2.intersectsBox( geometry.boundingBox ) === false ) return;\n \n     }\n \n     let intersection;\n \n     if ( geometry.isBufferGeometry ) {\n \n       const index = geometry.index;\n       const position = geometry.attributes.position;\n       const morphPosition = geometry.morphAttributes.position;\n       const morphTargetsRelative = geometry.morphTargetsRelative;\n       const uv = geometry.attributes.uv;\n       const uv2 = geometry.attributes.uv2;\n       const groups = geometry.groups;\n       const drawRange = geometry.drawRange;\n \n       if ( index !== null ) {\n \n         // indexed buffer geometry\n \n         if ( Array.isArray( material ) ) {\n \n           for ( let i = 0, il = groups.length; i < il; i ++ ) {\n \n             const group = groups[ i ];\n             const groupMaterial = material[ group.materialIndex ];\n \n             const start = Math.max( group.start, drawRange.start );\n             const end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n \n             for ( let j = start, jl = end; j < jl; j += 3 ) {\n \n               const a = index.getX( j );\n               const b = index.getX( j + 1 );\n               const c = index.getX( j + 2 );\n \n               intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n \n               if ( intersection ) {\n \n                 intersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n                 intersection.face.materialIndex = group.materialIndex;\n                 intersects.push( intersection );\n \n               }\n \n             }\n \n           }\n \n         } else {\n \n           const start = Math.max( 0, drawRange.start );\n           const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n \n           for ( let i = start, il = end; i < il; i += 3 ) {\n \n             const a = index.getX( i );\n             const b = index.getX( i + 1 );\n             const c = index.getX( i + 2 );\n \n             intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n \n             if ( intersection ) {\n \n               intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n               intersects.push( intersection );\n \n             }\n \n           }\n \n         }\n \n       } else if ( position !== undefined ) {\n \n         // non-indexed buffer geometry\n \n         if ( Array.isArray( material ) ) {\n \n           for ( let i = 0, il = groups.length; i < il; i ++ ) {\n \n             const group = groups[ i ];\n             const groupMaterial = material[ group.materialIndex ];\n \n             const start = Math.max( group.start, drawRange.start );\n             const end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n \n             for ( let j = start, jl = end; j < jl; j += 3 ) {\n \n               const a = j;\n               const b = j + 1;\n               const c = j + 2;\n \n               intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n \n               if ( intersection ) {\n \n                 intersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n                 intersection.face.materialIndex = group.materialIndex;\n                 intersects.push( intersection );\n \n               }\n \n             }\n \n           }\n \n         } else {\n \n           const start = Math.max( 0, drawRange.start );\n           const end = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n \n           for ( let i = start, il = end; i < il; i += 3 ) {\n \n             const a = i;\n             const b = i + 1;\n             const c = i + 2;\n \n             intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n \n             if ( intersection ) {\n \n               intersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n               intersects.push( intersection );\n \n             }\n \n           }\n \n         }\n \n       }\n \n     } else if ( geometry.isGeometry ) {\n \n       console.error( 'THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n \n     }\n \n   }\n \n }\n \n Mesh.prototype.isMesh = true;\n \n function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n \n   let intersect;\n \n   if ( material.side === BackSide ) {\n \n     intersect = ray.intersectTriangle( pC, pB, pA, true, point );\n \n   } else {\n \n     intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n \n   }\n \n   if ( intersect === null ) return null;\n \n   _intersectionPointWorld.copy( point );\n   _intersectionPointWorld.applyMatrix4( object.matrixWorld );\n \n   const distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n \n   if ( distance < raycaster.near || distance > raycaster.far ) return null;\n \n   return {\n     distance: distance,\n     point: _intersectionPointWorld.clone(),\n     object: object\n   };\n \n }\n \n function checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\n \n   _vA$1.fromBufferAttribute( position, a );\n   _vB$1.fromBufferAttribute( position, b );\n   _vC$1.fromBufferAttribute( position, c );\n \n   const morphInfluences = object.morphTargetInfluences;\n \n   if ( morphPosition && morphInfluences ) {\n \n     _morphA.set( 0, 0, 0 );\n     _morphB.set( 0, 0, 0 );\n     _morphC.set( 0, 0, 0 );\n \n     for ( let i = 0, il = morphPosition.length; i < il; i ++ ) {\n \n       const influence = morphInfluences[ i ];\n       const morphAttribute = morphPosition[ i ];\n \n       if ( influence === 0 ) continue;\n \n       _tempA.fromBufferAttribute( morphAttribute, a );\n       _tempB.fromBufferAttribute( morphAttribute, b );\n       _tempC.fromBufferAttribute( morphAttribute, c );\n \n       if ( morphTargetsRelative ) {\n \n         _morphA.addScaledVector( _tempA, influence );\n         _morphB.addScaledVector( _tempB, influence );\n         _morphC.addScaledVector( _tempC, influence );\n \n       } else {\n \n         _morphA.addScaledVector( _tempA.sub( _vA$1 ), influence );\n         _morphB.addScaledVector( _tempB.sub( _vB$1 ), influence );\n         _morphC.addScaledVector( _tempC.sub( _vC$1 ), influence );\n \n       }\n \n     }\n \n     _vA$1.add( _morphA );\n     _vB$1.add( _morphB );\n     _vC$1.add( _morphC );\n \n   }\n \n   if ( object.isSkinnedMesh ) {\n \n     object.boneTransform( a, _vA$1 );\n     object.boneTransform( b, _vB$1 );\n     object.boneTransform( c, _vC$1 );\n \n   }\n \n   const intersection = checkIntersection( object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint );\n \n   if ( intersection ) {\n \n     if ( uv ) {\n \n       _uvA$1.fromBufferAttribute( uv, a );\n       _uvB$1.fromBufferAttribute( uv, b );\n       _uvC$1.fromBufferAttribute( uv, c );\n \n       intersection.uv = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );\n \n     }\n \n     if ( uv2 ) {\n \n       _uvA$1.fromBufferAttribute( uv2, a );\n       _uvB$1.fromBufferAttribute( uv2, b );\n       _uvC$1.fromBufferAttribute( uv2, c );\n \n       intersection.uv2 = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );\n \n     }\n \n     const face = {\n       a: a,\n       b: b,\n       c: c,\n       normal: new Vector3(),\n       materialIndex: 0\n     };\n \n     Triangle.getNormal( _vA$1, _vB$1, _vC$1, face.normal );\n \n     intersection.face = face;\n \n   }\n \n   return intersection;\n \n }\n \n class BoxGeometry extends BufferGeometry {\n \n   constructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {\n \n     super();\n \n     this.type = 'BoxGeometry';\n \n     this.parameters = {\n       width: width,\n       height: height,\n       depth: depth,\n       widthSegments: widthSegments,\n       heightSegments: heightSegments,\n       depthSegments: depthSegments\n     };\n \n     const scope = this;\n \n     // segments\n \n     widthSegments = Math.floor( widthSegments );\n     heightSegments = Math.floor( heightSegments );\n     depthSegments = Math.floor( depthSegments );\n \n     // buffers\n \n     const indices = [];\n     const vertices = [];\n     const normals = [];\n     const uvs = [];\n \n     // helper variables\n \n     let numberOfVertices = 0;\n     let groupStart = 0;\n \n     // build each side of the box geometry\n \n     buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n     buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n     buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n     buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n     buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n     buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n \n     // build geometry\n \n     this.setIndex( indices );\n     this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n     this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n     this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n \n     function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n \n       const segmentWidth = width / gridX;\n       const segmentHeight = height / gridY;\n \n       const widthHalf = width / 2;\n       const heightHalf = height / 2;\n       const depthHalf = depth / 2;\n \n       const gridX1 = gridX + 1;\n       const gridY1 = gridY + 1;\n \n       let vertexCounter = 0;\n       let groupCount = 0;\n \n       const vector = new Vector3();\n \n       // generate vertices, normals and uvs\n \n       for ( let iy = 0; iy < gridY1; iy ++ ) {\n \n         const y = iy * segmentHeight - heightHalf;\n \n         for ( let ix = 0; ix < gridX1; ix ++ ) {\n \n           const x = ix * segmentWidth - widthHalf;\n \n           // set values to correct vector component\n \n           vector[ u ] = x * udir;\n           vector[ v ] = y * vdir;\n           vector[ w ] = depthHalf;\n \n           // now apply vector to vertex buffer\n \n           vertices.push( vector.x, vector.y, vector.z );\n \n           // set values to correct vector component\n \n           vector[ u ] = 0;\n           vector[ v ] = 0;\n           vector[ w ] = depth > 0 ? 1 : - 1;\n \n           // now apply vector to normal buffer\n \n           normals.push( vector.x, vector.y, vector.z );\n \n           // uvs\n \n           uvs.push( ix / gridX );\n           uvs.push( 1 - ( iy / gridY ) );\n \n           // counters\n \n           vertexCounter += 1;\n \n         }\n \n       }\n \n       // indices\n \n       // 1. you need three indices to draw a single face\n       // 2. a single segment consists of two faces\n       // 3. so we need to generate six (2*3) indices per segment\n \n       for ( let iy = 0; iy < gridY; iy ++ ) {\n \n         for ( let ix = 0; ix < gridX; ix ++ ) {\n \n           const a = numberOfVertices + ix + gridX1 * iy;\n           const b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n           const c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n           const d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n \n           // faces\n \n           indices.push( a, b, d );\n           indices.push( b, c, d );\n \n           // increase counter\n \n           groupCount += 6;\n \n         }\n \n       }\n \n       // add a group to the geometry. this will ensure multi material support\n \n       scope.addGroup( groupStart, groupCount, materialIndex );\n \n       // calculate new start value for groups\n \n       groupStart += groupCount;\n \n       // update total number of vertices\n \n       numberOfVertices += vertexCounter;\n \n     }\n \n   }\n \n   static fromJSON( data ) {\n \n     return new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );\n \n   }\n \n }\n \n /**\n  * Uniform Utilities\n  */\n \n function cloneUniforms( src ) {\n \n   const dst = {};\n \n   for ( const u in src ) {\n \n     dst[ u ] = {};\n \n     for ( const p in src[ u ] ) {\n \n       const property = src[ u ][ p ];\n \n       if ( property && ( property.isColor ||\n         property.isMatrix3 || property.isMatrix4 ||\n         property.isVector2 || property.isVector3 || property.isVector4 ||\n         property.isTexture || property.isQuaternion ) ) {\n \n         dst[ u ][ p ] = property.clone();\n \n       } else if ( Array.isArray( property ) ) {\n \n         dst[ u ][ p ] = property.slice();\n \n       } else {\n \n         dst[ u ][ p ] = property;\n \n       }\n \n     }\n \n   }\n \n   return dst;\n \n }\n \n function mergeUniforms( uniforms ) {\n \n   const merged = {};\n \n   for ( let u = 0; u < uniforms.length; u ++ ) {\n \n     const tmp = cloneUniforms( uniforms[ u ] );\n \n     for ( const p in tmp ) {\n \n       merged[ p ] = tmp[ p ];\n \n     }\n \n   }\n \n   return merged;\n \n }\n \n // Legacy\n \n const UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n \n var default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n \n var default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n \n /**\n  * parameters = {\n  *  defines: { \"label\" : \"value\" },\n  *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n  *\n  *  fragmentShader: <string>,\n  *  vertexShader: <string>,\n  *\n  *  wireframe: <boolean>,\n  *  wireframeLinewidth: <float>,\n  *\n  *  lights: <bool>\n  * }\n  */\n \n class ShaderMaterial extends Material {\n \n   constructor( parameters ) {\n \n     super();\n \n     this.type = 'ShaderMaterial';\n \n     this.defines = {};\n     this.uniforms = {};\n \n     this.vertexShader = default_vertex;\n     this.fragmentShader = default_fragment;\n \n     this.linewidth = 1;\n \n     this.wireframe = false;\n     this.wireframeLinewidth = 1;\n \n     this.fog = false; // set to use scene fog\n     this.lights = false; // set to use scene lights\n     this.clipping = false; // set to use user-defined clipping planes\n \n     this.extensions = {\n       derivatives: false, // set to use derivatives\n       fragDepth: false, // set to use fragment depth values\n       drawBuffers: false, // set to use draw buffers\n       shaderTextureLOD: false // set to use shader texture LOD\n     };\n \n     // When rendered geometry doesn't include these attributes but the material does,\n     // use these default values in WebGL. This avoids errors when buffer data is missing.\n     this.defaultAttributeValues = {\n       'color': [ 1, 1, 1 ],\n       'uv': [ 0, 0 ],\n       'uv2': [ 0, 0 ]\n     };\n \n     this.index0AttributeName = undefined;\n     this.uniformsNeedUpdate = false;\n \n     this.glslVersion = null;\n \n     if ( parameters !== undefined ) {\n \n       if ( parameters.attributes !== undefined ) {\n \n         console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n \n       }\n \n       this.setValues( parameters );\n \n     }\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.fragmentShader = source.fragmentShader;\n     this.vertexShader = source.vertexShader;\n \n     this.uniforms = cloneUniforms( source.uniforms );\n \n     this.defines = Object.assign( {}, source.defines );\n \n     this.wireframe = source.wireframe;\n     this.wireframeLinewidth = source.wireframeLinewidth;\n \n     this.lights = source.lights;\n     this.clipping = source.clipping;\n \n     this.extensions = Object.assign( {}, source.extensions );\n \n     this.glslVersion = source.glslVersion;\n \n     return this;\n \n   }\n \n   toJSON( meta ) {\n \n     const data = super.toJSON( meta );\n \n     data.glslVersion = this.glslVersion;\n     data.uniforms = {};\n \n     for ( const name in this.uniforms ) {\n \n       const uniform = this.uniforms[ name ];\n       const value = uniform.value;\n \n       if ( value && value.isTexture ) {\n \n         data.uniforms[ name ] = {\n           type: 't',\n           value: value.toJSON( meta ).uuid\n         };\n \n       } else if ( value && value.isColor ) {\n \n         data.uniforms[ name ] = {\n           type: 'c',\n           value: value.getHex()\n         };\n \n       } else if ( value && value.isVector2 ) {\n \n         data.uniforms[ name ] = {\n           type: 'v2',\n           value: value.toArray()\n         };\n \n       } else if ( value && value.isVector3 ) {\n \n         data.uniforms[ name ] = {\n           type: 'v3',\n           value: value.toArray()\n         };\n \n       } else if ( value && value.isVector4 ) {\n \n         data.uniforms[ name ] = {\n           type: 'v4',\n           value: value.toArray()\n         };\n \n       } else if ( value && value.isMatrix3 ) {\n \n         data.uniforms[ name ] = {\n           type: 'm3',\n           value: value.toArray()\n         };\n \n       } else if ( value && value.isMatrix4 ) {\n \n         data.uniforms[ name ] = {\n           type: 'm4',\n           value: value.toArray()\n         };\n \n       } else {\n \n         data.uniforms[ name ] = {\n           value: value\n         };\n \n         // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n \n       }\n \n     }\n \n     if ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;\n \n     data.vertexShader = this.vertexShader;\n     data.fragmentShader = this.fragmentShader;\n \n     const extensions = {};\n \n     for ( const key in this.extensions ) {\n \n       if ( this.extensions[ key ] === true ) extensions[ key ] = true;\n \n     }\n \n     if ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;\n \n     return data;\n \n   }\n \n }\n \n ShaderMaterial.prototype.isShaderMaterial = true;\n \n class Camera extends Object3D {\n \n   constructor() {\n \n     super();\n \n     this.type = 'Camera';\n \n     this.matrixWorldInverse = new Matrix4();\n \n     this.projectionMatrix = new Matrix4();\n     this.projectionMatrixInverse = new Matrix4();\n \n   }\n \n   copy( source, recursive ) {\n \n     super.copy( source, recursive );\n \n     this.matrixWorldInverse.copy( source.matrixWorldInverse );\n \n     this.projectionMatrix.copy( source.projectionMatrix );\n     this.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n \n     return this;\n \n   }\n \n   getWorldDirection( target ) {\n \n     this.updateWorldMatrix( true, false );\n \n     const e = this.matrixWorld.elements;\n \n     return target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n \n   }\n \n   updateMatrixWorld( force ) {\n \n     super.updateMatrixWorld( force );\n \n     this.matrixWorldInverse.copy( this.matrixWorld ).invert();\n \n   }\n \n   updateWorldMatrix( updateParents, updateChildren ) {\n \n     super.updateWorldMatrix( updateParents, updateChildren );\n \n     this.matrixWorldInverse.copy( this.matrixWorld ).invert();\n \n   }\n \n   clone() {\n \n     return new this.constructor().copy( this );\n \n   }\n \n }\n \n Camera.prototype.isCamera = true;\n \n class PerspectiveCamera extends Camera {\n \n   constructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {\n \n     super();\n \n     this.type = 'PerspectiveCamera';\n \n     this.fov = fov;\n     this.zoom = 1;\n \n     this.near = near;\n     this.far = far;\n     this.focus = 10;\n \n     this.aspect = aspect;\n     this.view = null;\n \n     this.filmGauge = 35;\t// width of the film (default in millimeters)\n     this.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n \n     this.updateProjectionMatrix();\n \n   }\n \n   copy( source, recursive ) {\n \n     super.copy( source, recursive );\n \n     this.fov = source.fov;\n     this.zoom = source.zoom;\n \n     this.near = source.near;\n     this.far = source.far;\n     this.focus = source.focus;\n \n     this.aspect = source.aspect;\n     this.view = source.view === null ? null : Object.assign( {}, source.view );\n \n     this.filmGauge = source.filmGauge;\n     this.filmOffset = source.filmOffset;\n \n     return this;\n \n   }\n \n   /**\n    * Sets the FOV by focal length in respect to the current .filmGauge.\n    *\n    * The default film gauge is 35, so that the focal length can be specified for\n    * a 35mm (full frame) camera.\n    *\n    * Values for focal length and film gauge must have the same unit.\n    */\n   setFocalLength( focalLength ) {\n \n     /** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n     const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n \n     this.fov = RAD2DEG * 2 * Math.atan( vExtentSlope );\n     this.updateProjectionMatrix();\n \n   }\n \n   /**\n    * Calculates the focal length from the current .fov and .filmGauge.\n    */\n   getFocalLength() {\n \n     const vExtentSlope = Math.tan( DEG2RAD * 0.5 * this.fov );\n \n     return 0.5 * this.getFilmHeight() / vExtentSlope;\n \n   }\n \n   getEffectiveFOV() {\n \n     return RAD2DEG * 2 * Math.atan(\n       Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom );\n \n   }\n \n   getFilmWidth() {\n \n     // film not completely covered in portrait format (aspect < 1)\n     return this.filmGauge * Math.min( this.aspect, 1 );\n \n   }\n \n   getFilmHeight() {\n \n     // film not completely covered in landscape format (aspect > 1)\n     return this.filmGauge / Math.max( this.aspect, 1 );\n \n   }\n \n   /**\n    * Sets an offset in a larger frustum. This is useful for multi-window or\n    * multi-monitor/multi-machine setups.\n    *\n    * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n    * the monitors are in grid like this\n    *\n    *   +---+---+---+\n    *   | A | B | C |\n    *   +---+---+---+\n    *   | D | E | F |\n    *   +---+---+---+\n    *\n    * then for each monitor you would call it like this\n    *\n    *   const w = 1920;\n    *   const h = 1080;\n    *   const fullWidth = w * 3;\n    *   const fullHeight = h * 2;\n    *\n    *   --A--\n    *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n    *   --B--\n    *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n    *   --C--\n    *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n    *   --D--\n    *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n    *   --E--\n    *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n    *   --F--\n    *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n    *\n    *   Note there is no reason monitors have to be the same size or in a grid.\n    */\n   setViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n \n     this.aspect = fullWidth / fullHeight;\n \n     if ( this.view === null ) {\n \n       this.view = {\n         enabled: true,\n         fullWidth: 1,\n         fullHeight: 1,\n         offsetX: 0,\n         offsetY: 0,\n         width: 1,\n         height: 1\n       };\n \n     }\n \n     this.view.enabled = true;\n     this.view.fullWidth = fullWidth;\n     this.view.fullHeight = fullHeight;\n     this.view.offsetX = x;\n     this.view.offsetY = y;\n     this.view.width = width;\n     this.view.height = height;\n \n     this.updateProjectionMatrix();\n \n   }\n \n   clearViewOffset() {\n \n     if ( this.view !== null ) {\n \n       this.view.enabled = false;\n \n     }\n \n     this.updateProjectionMatrix();\n \n   }\n \n   updateProjectionMatrix() {\n \n     const near = this.near;\n     let top = near * Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom;\n     let height = 2 * top;\n     let width = this.aspect * height;\n     let left = - 0.5 * width;\n     const view = this.view;\n \n     if ( this.view !== null && this.view.enabled ) {\n \n       const fullWidth = view.fullWidth,\n         fullHeight = view.fullHeight;\n \n       left += view.offsetX * width / fullWidth;\n       top -= view.offsetY * height / fullHeight;\n       width *= view.width / fullWidth;\n       height *= view.height / fullHeight;\n \n     }\n \n     const skew = this.filmOffset;\n     if ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n \n     this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n \n     this.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n \n   }\n \n   toJSON( meta ) {\n \n     const data = super.toJSON( meta );\n \n     data.object.fov = this.fov;\n     data.object.zoom = this.zoom;\n \n     data.object.near = this.near;\n     data.object.far = this.far;\n     data.object.focus = this.focus;\n \n     data.object.aspect = this.aspect;\n \n     if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n \n     data.object.filmGauge = this.filmGauge;\n     data.object.filmOffset = this.filmOffset;\n \n     return data;\n \n   }\n \n }\n \n PerspectiveCamera.prototype.isPerspectiveCamera = true;\n \n const fov = 90, aspect = 1;\n \n class CubeCamera extends Object3D {\n \n   constructor( near, far, renderTarget ) {\n \n     super();\n \n     this.type = 'CubeCamera';\n \n     if ( renderTarget.isWebGLCubeRenderTarget !== true ) {\n \n       console.error( 'THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.' );\n       return;\n \n     }\n \n     this.renderTarget = renderTarget;\n \n     const cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n     cameraPX.layers = this.layers;\n     cameraPX.up.set( 0, - 1, 0 );\n     cameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n     this.add( cameraPX );\n \n     const cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n     cameraNX.layers = this.layers;\n     cameraNX.up.set( 0, - 1, 0 );\n     cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n     this.add( cameraNX );\n \n     const cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n     cameraPY.layers = this.layers;\n     cameraPY.up.set( 0, 0, 1 );\n     cameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n     this.add( cameraPY );\n \n     const cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n     cameraNY.layers = this.layers;\n     cameraNY.up.set( 0, 0, - 1 );\n     cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n     this.add( cameraNY );\n \n     const cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n     cameraPZ.layers = this.layers;\n     cameraPZ.up.set( 0, - 1, 0 );\n     cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n     this.add( cameraPZ );\n \n     const cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n     cameraNZ.layers = this.layers;\n     cameraNZ.up.set( 0, - 1, 0 );\n     cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n     this.add( cameraNZ );\n \n   }\n \n   update( renderer, scene ) {\n \n     if ( this.parent === null ) this.updateMatrixWorld();\n \n     const renderTarget = this.renderTarget;\n \n     const [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;\n \n     const currentXrEnabled = renderer.xr.enabled;\n     const currentRenderTarget = renderer.getRenderTarget();\n \n     renderer.xr.enabled = false;\n \n     const generateMipmaps = renderTarget.texture.generateMipmaps;\n \n     renderTarget.texture.generateMipmaps = false;\n \n     renderer.setRenderTarget( renderTarget, 0 );\n     renderer.render( scene, cameraPX );\n \n     renderer.setRenderTarget( renderTarget, 1 );\n     renderer.render( scene, cameraNX );\n \n     renderer.setRenderTarget( renderTarget, 2 );\n     renderer.render( scene, cameraPY );\n \n     renderer.setRenderTarget( renderTarget, 3 );\n     renderer.render( scene, cameraNY );\n \n     renderer.setRenderTarget( renderTarget, 4 );\n     renderer.render( scene, cameraPZ );\n \n     renderTarget.texture.generateMipmaps = generateMipmaps;\n \n     renderer.setRenderTarget( renderTarget, 5 );\n     renderer.render( scene, cameraNZ );\n \n     renderer.setRenderTarget( currentRenderTarget );\n \n     renderer.xr.enabled = currentXrEnabled;\n \n   }\n \n }\n \n class CubeTexture extends Texture {\n \n   constructor( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n \n     images = images !== undefined ? images : [];\n     mapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n \n     super( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n \n     this.flipY = false;\n \n   }\n \n   get images() {\n \n     return this.image;\n \n   }\n \n   set images( value ) {\n \n     this.image = value;\n \n   }\n \n }\n \n CubeTexture.prototype.isCubeTexture = true;\n \n class WebGLCubeRenderTarget extends WebGLRenderTarget {\n \n   constructor( size, options, dummy ) {\n \n     if ( Number.isInteger( options ) ) {\n \n       console.warn( 'THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )' );\n \n       options = dummy;\n \n     }\n \n     super( size, size, options );\n \n     options = options || {};\n \n     // By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n     // in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n     // in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n \n     // three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n     // and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture\n     // as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).\n \n     this.texture = new CubeTexture( undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n     this.texture.isRenderTargetTexture = true;\n \n     this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n     this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n \n     this.texture._needsFlipEnvMap = false;\n \n   }\n \n   fromEquirectangularTexture( renderer, texture ) {\n \n     this.texture.type = texture.type;\n     this.texture.format = RGBAFormat; // see #18859\n     this.texture.encoding = texture.encoding;\n \n     this.texture.generateMipmaps = texture.generateMipmaps;\n     this.texture.minFilter = texture.minFilter;\n     this.texture.magFilter = texture.magFilter;\n \n     const shader = {\n \n       uniforms: {\n         tEquirect: { value: null },\n       },\n \n       vertexShader: /* glsl */`\n \n         varying vec3 vWorldDirection;\n \n         vec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n \n           return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n \n         }\n \n         void main() {\n \n           vWorldDirection = transformDirection( position, modelMatrix );\n \n           #include <begin_vertex>\n           #include <project_vertex>\n \n         }\n       `,\n \n       fragmentShader: /* glsl */`\n \n         uniform sampler2D tEquirect;\n \n         varying vec3 vWorldDirection;\n \n         #include <common>\n \n         void main() {\n \n           vec3 direction = normalize( vWorldDirection );\n \n           vec2 sampleUV = equirectUv( direction );\n \n           gl_FragColor = texture2D( tEquirect, sampleUV );\n \n         }\n       `\n     };\n \n     const geometry = new BoxGeometry( 5, 5, 5 );\n \n     const material = new ShaderMaterial( {\n \n       name: 'CubemapFromEquirect',\n \n       uniforms: cloneUniforms( shader.uniforms ),\n       vertexShader: shader.vertexShader,\n       fragmentShader: shader.fragmentShader,\n       side: BackSide,\n       blending: NoBlending\n \n     } );\n \n     material.uniforms.tEquirect.value = texture;\n \n     const mesh = new Mesh( geometry, material );\n \n     const currentMinFilter = texture.minFilter;\n \n     // Avoid blurred poles\n     if ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;\n \n     const camera = new CubeCamera( 1, 10, this );\n     camera.update( renderer, mesh );\n \n     texture.minFilter = currentMinFilter;\n \n     mesh.geometry.dispose();\n     mesh.material.dispose();\n \n     return this;\n \n   }\n \n   clear( renderer, color, depth, stencil ) {\n \n     const currentRenderTarget = renderer.getRenderTarget();\n \n     for ( let i = 0; i < 6; i ++ ) {\n \n       renderer.setRenderTarget( this, i );\n \n       renderer.clear( color, depth, stencil );\n \n     }\n \n     renderer.setRenderTarget( currentRenderTarget );\n \n   }\n \n }\n \n WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n \n const _vector1 = /*@__PURE__*/ new Vector3();\n const _vector2 = /*@__PURE__*/ new Vector3();\n const _normalMatrix = /*@__PURE__*/ new Matrix3();\n \n class Plane {\n \n   constructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {\n \n     // normal is assumed to be normalized\n \n     this.normal = normal;\n     this.constant = constant;\n \n   }\n \n   set( normal, constant ) {\n \n     this.normal.copy( normal );\n     this.constant = constant;\n \n     return this;\n \n   }\n \n   setComponents( x, y, z, w ) {\n \n     this.normal.set( x, y, z );\n     this.constant = w;\n \n     return this;\n \n   }\n \n   setFromNormalAndCoplanarPoint( normal, point ) {\n \n     this.normal.copy( normal );\n     this.constant = - point.dot( this.normal );\n \n     return this;\n \n   }\n \n   setFromCoplanarPoints( a, b, c ) {\n \n     const normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n \n     // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n \n     this.setFromNormalAndCoplanarPoint( normal, a );\n \n     return this;\n \n   }\n \n   copy( plane ) {\n \n     this.normal.copy( plane.normal );\n     this.constant = plane.constant;\n \n     return this;\n \n   }\n \n   normalize() {\n \n     // Note: will lead to a divide by zero if the plane is invalid.\n \n     const inverseNormalLength = 1.0 / this.normal.length();\n     this.normal.multiplyScalar( inverseNormalLength );\n     this.constant *= inverseNormalLength;\n \n     return this;\n \n   }\n \n   negate() {\n \n     this.constant *= - 1;\n     this.normal.negate();\n \n     return this;\n \n   }\n \n   distanceToPoint( point ) {\n \n     return this.normal.dot( point ) + this.constant;\n \n   }\n \n   distanceToSphere( sphere ) {\n \n     return this.distanceToPoint( sphere.center ) - sphere.radius;\n \n   }\n \n   projectPoint( point, target ) {\n \n     return target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n \n   }\n \n   intersectLine( line, target ) {\n \n     const direction = line.delta( _vector1 );\n \n     const denominator = this.normal.dot( direction );\n \n     if ( denominator === 0 ) {\n \n       // line is coplanar, return origin\n       if ( this.distanceToPoint( line.start ) === 0 ) {\n \n         return target.copy( line.start );\n \n       }\n \n       // Unsure if this is the correct method to handle this case.\n       return null;\n \n     }\n \n     const t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n \n     if ( t < 0 || t > 1 ) {\n \n       return null;\n \n     }\n \n     return target.copy( direction ).multiplyScalar( t ).add( line.start );\n \n   }\n \n   intersectsLine( line ) {\n \n     // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n \n     const startSign = this.distanceToPoint( line.start );\n     const endSign = this.distanceToPoint( line.end );\n \n     return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n \n   }\n \n   intersectsBox( box ) {\n \n     return box.intersectsPlane( this );\n \n   }\n \n   intersectsSphere( sphere ) {\n \n     return sphere.intersectsPlane( this );\n \n   }\n \n   coplanarPoint( target ) {\n \n     return target.copy( this.normal ).multiplyScalar( - this.constant );\n \n   }\n \n   applyMatrix4( matrix, optionalNormalMatrix ) {\n \n     const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n \n     const referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n \n     const normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n \n     this.constant = - referencePoint.dot( normal );\n \n     return this;\n \n   }\n \n   translate( offset ) {\n \n     this.constant -= offset.dot( this.normal );\n \n     return this;\n \n   }\n \n   equals( plane ) {\n \n     return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n \n   }\n \n   clone() {\n \n     return new this.constructor().copy( this );\n \n   }\n \n }\n \n Plane.prototype.isPlane = true;\n \n const _sphere$2 = /*@__PURE__*/ new Sphere();\n const _vector$7 = /*@__PURE__*/ new Vector3();\n \n class Frustum {\n \n   constructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {\n \n     this.planes = [ p0, p1, p2, p3, p4, p5 ];\n \n   }\n \n   set( p0, p1, p2, p3, p4, p5 ) {\n \n     const planes = this.planes;\n \n     planes[ 0 ].copy( p0 );\n     planes[ 1 ].copy( p1 );\n     planes[ 2 ].copy( p2 );\n     planes[ 3 ].copy( p3 );\n     planes[ 4 ].copy( p4 );\n     planes[ 5 ].copy( p5 );\n \n     return this;\n \n   }\n \n   copy( frustum ) {\n \n     const planes = this.planes;\n \n     for ( let i = 0; i < 6; i ++ ) {\n \n       planes[ i ].copy( frustum.planes[ i ] );\n \n     }\n \n     return this;\n \n   }\n \n   setFromProjectionMatrix( m ) {\n \n     const planes = this.planes;\n     const me = m.elements;\n     const me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n     const me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n     const me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n     const me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n \n     planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n     planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n     planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n     planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n     planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n     planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n \n     return this;\n \n   }\n \n   intersectsObject( object ) {\n \n     const geometry = object.geometry;\n \n     if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n \n     _sphere$2.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n \n     return this.intersectsSphere( _sphere$2 );\n \n   }\n \n   intersectsSprite( sprite ) {\n \n     _sphere$2.center.set( 0, 0, 0 );\n     _sphere$2.radius = 0.7071067811865476;\n     _sphere$2.applyMatrix4( sprite.matrixWorld );\n \n     return this.intersectsSphere( _sphere$2 );\n \n   }\n \n   intersectsSphere( sphere ) {\n \n     const planes = this.planes;\n     const center = sphere.center;\n     const negRadius = - sphere.radius;\n \n     for ( let i = 0; i < 6; i ++ ) {\n \n       const distance = planes[ i ].distanceToPoint( center );\n \n       if ( distance < negRadius ) {\n \n         return false;\n \n       }\n \n     }\n \n     return true;\n \n   }\n \n   intersectsBox( box ) {\n \n     const planes = this.planes;\n \n     for ( let i = 0; i < 6; i ++ ) {\n \n       const plane = planes[ i ];\n \n       // corner at max distance\n \n       _vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n       _vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n       _vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n \n       if ( plane.distanceToPoint( _vector$7 ) < 0 ) {\n \n         return false;\n \n       }\n \n     }\n \n     return true;\n \n   }\n \n   containsPoint( point ) {\n \n     const planes = this.planes;\n \n     for ( let i = 0; i < 6; i ++ ) {\n \n       if ( planes[ i ].distanceToPoint( point ) < 0 ) {\n \n         return false;\n \n       }\n \n     }\n \n     return true;\n \n   }\n \n   clone() {\n \n     return new this.constructor().copy( this );\n \n   }\n \n }\n \n function WebGLAnimation() {\n \n   let context = null;\n   let isAnimating = false;\n   let animationLoop = null;\n   let requestId = null;\n \n   function onAnimationFrame( time, frame ) {\n \n     animationLoop( time, frame );\n \n     requestId = context.requestAnimationFrame( onAnimationFrame );\n \n   }\n \n   return {\n \n     start: function () {\n \n       if ( isAnimating === true ) return;\n       if ( animationLoop === null ) return;\n \n       requestId = context.requestAnimationFrame( onAnimationFrame );\n \n       isAnimating = true;\n \n     },\n \n     stop: function () {\n \n       context.cancelAnimationFrame( requestId );\n \n       isAnimating = false;\n \n     },\n \n     setAnimationLoop: function ( callback ) {\n \n       animationLoop = callback;\n \n     },\n \n     setContext: function ( value ) {\n \n       context = value;\n \n     }\n \n   };\n \n }\n \n function WebGLAttributes( gl, capabilities ) {\n \n   const isWebGL2 = capabilities.isWebGL2;\n \n   const buffers = new WeakMap();\n \n   function createBuffer( attribute, bufferType ) {\n \n     const array = attribute.array;\n     const usage = attribute.usage;\n \n     const buffer = gl.createBuffer();\n \n     gl.bindBuffer( bufferType, buffer );\n     gl.bufferData( bufferType, array, usage );\n \n     attribute.onUploadCallback();\n \n     let type = 5126;\n \n     if ( array instanceof Float32Array ) {\n \n       type = 5126;\n \n     } else if ( array instanceof Float64Array ) {\n \n       console.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n \n     } else if ( array instanceof Uint16Array ) {\n \n       if ( attribute.isFloat16BufferAttribute ) {\n \n         if ( isWebGL2 ) {\n \n           type = 5131;\n \n         } else {\n \n           console.warn( 'THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.' );\n \n         }\n \n       } else {\n \n         type = 5123;\n \n       }\n \n     } else if ( array instanceof Int16Array ) {\n \n       type = 5122;\n \n     } else if ( array instanceof Uint32Array ) {\n \n       type = 5125;\n \n     } else if ( array instanceof Int32Array ) {\n \n       type = 5124;\n \n     } else if ( array instanceof Int8Array ) {\n \n       type = 5120;\n \n     } else if ( array instanceof Uint8Array ) {\n \n       type = 5121;\n \n     } else if ( array instanceof Uint8ClampedArray ) {\n \n       type = 5121;\n \n     }\n \n     return {\n       buffer: buffer,\n       type: type,\n       bytesPerElement: array.BYTES_PER_ELEMENT,\n       version: attribute.version\n     };\n \n   }\n \n   function updateBuffer( buffer, attribute, bufferType ) {\n \n     const array = attribute.array;\n     const updateRange = attribute.updateRange;\n \n     gl.bindBuffer( bufferType, buffer );\n \n     if ( updateRange.count === - 1 ) {\n \n       // Not using update ranges\n \n       gl.bufferSubData( bufferType, 0, array );\n \n     } else {\n \n       if ( isWebGL2 ) {\n \n         gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n           array, updateRange.offset, updateRange.count );\n \n       } else {\n \n         gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n           array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n \n       }\n \n       updateRange.count = - 1; // reset range\n \n     }\n \n   }\n \n   //\n \n   function get( attribute ) {\n \n     if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n \n     return buffers.get( attribute );\n \n   }\n \n   function remove( attribute ) {\n \n     if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n \n     const data = buffers.get( attribute );\n \n     if ( data ) {\n \n       gl.deleteBuffer( data.buffer );\n \n       buffers.delete( attribute );\n \n     }\n \n   }\n \n   function update( attribute, bufferType ) {\n \n     if ( attribute.isGLBufferAttribute ) {\n \n       const cached = buffers.get( attribute );\n \n       if ( ! cached || cached.version < attribute.version ) {\n \n         buffers.set( attribute, {\n           buffer: attribute.buffer,\n           type: attribute.type,\n           bytesPerElement: attribute.elementSize,\n           version: attribute.version\n         } );\n \n       }\n \n       return;\n \n     }\n \n     if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n \n     const data = buffers.get( attribute );\n \n     if ( data === undefined ) {\n \n       buffers.set( attribute, createBuffer( attribute, bufferType ) );\n \n     } else if ( data.version < attribute.version ) {\n \n       updateBuffer( data.buffer, attribute, bufferType );\n \n       data.version = attribute.version;\n \n     }\n \n   }\n \n   return {\n \n     get: get,\n     remove: remove,\n     update: update\n \n   };\n \n }\n \n class PlaneGeometry extends BufferGeometry {\n \n   constructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {\n \n     super();\n     this.type = 'PlaneGeometry';\n \n     this.parameters = {\n       width: width,\n       height: height,\n       widthSegments: widthSegments,\n       heightSegments: heightSegments\n     };\n \n     const width_half = width / 2;\n     const height_half = height / 2;\n \n     const gridX = Math.floor( widthSegments );\n     const gridY = Math.floor( heightSegments );\n \n     const gridX1 = gridX + 1;\n     const gridY1 = gridY + 1;\n \n     const segment_width = width / gridX;\n     const segment_height = height / gridY;\n \n     //\n \n     const indices = [];\n     const vertices = [];\n     const normals = [];\n     const uvs = [];\n \n     for ( let iy = 0; iy < gridY1; iy ++ ) {\n \n       const y = iy * segment_height - height_half;\n \n       for ( let ix = 0; ix < gridX1; ix ++ ) {\n \n         const x = ix * segment_width - width_half;\n \n         vertices.push( x, - y, 0 );\n \n         normals.push( 0, 0, 1 );\n \n         uvs.push( ix / gridX );\n         uvs.push( 1 - ( iy / gridY ) );\n \n       }\n \n     }\n \n     for ( let iy = 0; iy < gridY; iy ++ ) {\n \n       for ( let ix = 0; ix < gridX; ix ++ ) {\n \n         const a = ix + gridX1 * iy;\n         const b = ix + gridX1 * ( iy + 1 );\n         const c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n         const d = ( ix + 1 ) + gridX1 * iy;\n \n         indices.push( a, b, d );\n         indices.push( b, c, d );\n \n       }\n \n     }\n \n     this.setIndex( indices );\n     this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n     this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n     this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n \n   }\n \n   static fromJSON( data ) {\n \n     return new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );\n \n   }\n \n }\n \n var alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n \n var alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n \n var alphatest_fragment = \"#ifdef USE_ALPHATEST\\n\\tif ( diffuseColor.a < alphaTest ) discard;\\n#endif\";\n \n var alphatest_pars_fragment = \"#ifdef USE_ALPHATEST\\n\\tuniform float alphaTest;\\n#endif\";\n \n var aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\\n\\t#endif\\n#endif\";\n \n var aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n \n var begin_vertex = \"vec3 transformed = vec3( position );\";\n \n var beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n \n var bsdfs = \"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\\n}\\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( f0, f90, dotVH );\\n\\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( V * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie( float roughness, float dotNH ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tfloat invAlpha = 1.0 / alpha;\\n\\tfloat cos2h = dotNH * dotNH;\\n\\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\\n\\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\\n}\\nfloat V_Neubelt( float dotNV, float dotNL ) {\\n\\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\\n}\\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat D = D_Charlie( sheenRoughness, dotNH );\\n\\tfloat V = V_Neubelt( dotNV, dotNL );\\n\\treturn sheenColor * ( D * V );\\n}\\n#endif\";\n \n var bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n \n var clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n \n var clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n \n var clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n \n var clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n \n var color_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n \n var color_pars_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n \n var color_pars_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n \n var color_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n \n var common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract( sin( sn ) * c );\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n \n var cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n \n var defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n \n var displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n \n var displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n \n var emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n \n var emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n \n var encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n \n var encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\";\n \n var envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n \n var envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n \n var envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n \n var envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n \n var envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n \n var fog_vertex = \"#ifdef USE_FOG\\n\\tvFogDepth = - mvPosition.z;\\n#endif\";\n \n var fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float vFogDepth;\\n#endif\";\n \n var fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n \n var fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float vFogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n \n var gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n \n var lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tlightMapIrradiance *= PI;\\n\\t#endif\\n\\treflectedLight.indirectDiffuse += lightMapIrradiance;\\n#endif\";\n \n var lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n \n var lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n \n var lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\\n\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\treturn irradiance;\\n}\\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tif ( cutoffDistance > 0.0 ) {\\n\\t\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t}\\n\\t\\treturn distanceFalloff;\\n\\t#else\\n\\t\\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\t\\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t#endif\\n}\\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\\n\\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tlight.color = directionalLight.color;\\n\\t\\tlight.direction = directionalLight.direction;\\n\\t\\tlight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tlight.color = pointLight.color;\\n\\t\\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat angleCos = dot( light.direction, spotLight.direction );\\n\\t\\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\tif ( spotAttenuation > 0.0 ) {\\n\\t\\t\\tfloat lightDistance = length( lVector );\\n\\t\\t\\tlight.color = spotLight.color * spotAttenuation;\\n\\t\\t\\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t\\t} else {\\n\\t\\t\\tlight.color = vec3( 0.0 );\\n\\t\\t\\tlight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\\n\\t\\tfloat dotNL = dot( normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n \n var envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getIBLIrradiance( const in vec3 normal ) {\\n\\t\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\\n\\t\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 reflectVec;\\n\\t\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\t\\treflectVec = reflect( - viewDir, normal );\\n\\t\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\treflectVec = refract( - viewDir, normal, refractionRatio );\\n\\t\\t\\t#endif\\n\\t\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n \n var lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n \n var lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n \n var lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n \n var lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n \n var lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\\nmaterial.roughness = min( material.roughness, 1.0 );\\n#ifdef IOR\\n\\t#ifdef SPECULAR\\n\\t\\tfloat specularIntensityFactor = specularIntensity;\\n\\t\\tvec3 specularColorFactor = specularColor;\\n\\t\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\t\\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\\n\\t\\t#endif\\n\\t\\t#ifdef USE_SPECULARCOLORMAP\\n\\t\\t\\tspecularColorFactor *= specularColorMapTexelToLinear( texture2D( specularColorMap, vUv ) ).rgb;\\n\\t\\t#endif\\n\\t\\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\\n\\t#else\\n\\t\\tfloat specularIntensityFactor = 1.0;\\n\\t\\tvec3 specularColorFactor = vec3( 1.0 );\\n\\t\\tmaterial.specularF90 = 1.0;\\n\\t#endif\\n\\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.specularF90 = 1.0;\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\tmaterial.clearcoatF0 = vec3( 0.04 );\\n\\tmaterial.clearcoatF90 = 1.0;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheenColor;\\n\\t#ifdef USE_SHEENCOLORMAP\\n\\t\\tmaterial.sheenColor *= sheenColorMapTexelToLinear( texture2D( sheenColorMap, vUv ) ).rgb;\\n\\t#endif\\n\\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\\n\\t#ifdef USE_SHEENROUGHNESSMAP\\n\\t\\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\\n\\t#endif\\n#endif\";\n \n var lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat roughness;\\n\\tvec3 specularColor;\\n\\tfloat specularF90;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat clearcoat;\\n\\t\\tfloat clearcoatRoughness;\\n\\t\\tvec3 clearcoatF0;\\n\\t\\tfloat clearcoatF90;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tvec3 sheenColor;\\n\\t\\tfloat sheenRoughness;\\n\\t#endif\\n};\\nvec3 clearcoatSpecular = vec3( 0.0 );\\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\\n\\treturn fab;\\n}\\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\treturn specularColor * fab.x + specularF90 * fab.y;\\n}\\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\\n\\tfloat Ess = fab.x + fab.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.roughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = dotNLcc * directLight.color;\\n\\t\\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\\n\\t#endif\\n\\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n \n var lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef USE_CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointLightInfo( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotLightInfo( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n \n var lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getIBLIrradiance( geometry.normal );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\\n\\t#endif\\n#endif\";\n \n var lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n \n var logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n \n var logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n \n var logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n \n var logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n \n var map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n \n var map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n \n var map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n \n var map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n \n var metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n \n var metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n \n var morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t\\tif ( morphTargetInfluences[ i ] > 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];\\n\\t\\t}\\n\\t#else\\n\\t\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\t\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\t\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\t\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n\\t#endif\\n#endif\";\n \n var morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\\n\\t\\tuniform sampler2DArray morphTargetsTexture;\\n\\t\\tuniform vec2 morphTargetsTextureSize;\\n\\t\\tvec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {\\n\\t\\t\\tfloat texelIndex = float( vertexIndex * stride + offset );\\n\\t\\t\\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );\\n\\t\\t\\tfloat x = texelIndex - y * morphTargetsTextureSize.x;\\n\\t\\t\\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\\n\\t\\t\\treturn texture( morphTargetsTexture, morphUV ).xyz;\\n\\t\\t}\\n\\t#else\\n\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t\\t#else\\n\\t\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n \n var morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\t\\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];\\n\\t\\t\\t#else\\n\\t\\t\\t\\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];\\n\\t\\t\\t#endif\\n\\t\\t}\\n\\t#else\\n\\t\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\t\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\t\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\t\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n \n var normal_fragment_begin = \"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * faceDirection;\\n\\t\\t\\tbitangent = bitangent * faceDirection;\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n \n var normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\";\n \n var normal_pars_fragment = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n \n var normal_pars_vertex = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n \n var normal_vertex = \"#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\";\n \n var normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\\n\\t\\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\\n\\t}\\n#endif\";\n \n var clearcoat_normal_fragment_begin = \"#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n \n var clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\\n\\t#endif\\n#endif\";\n \n var clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n \n var output_fragment = \"#ifdef OPAQUE\\ndiffuseColor.a = 1.0;\\n#endif\\n#ifdef USE_TRANSMISSION\\ndiffuseColor.a *= transmissionAlpha + 0.1;\\n#endif\\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\";\n \n var packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n \n var premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n \n var project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n \n var dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n \n var dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n \n var roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n \n var roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n \n var shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n \n var shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n \n var shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n \n var shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n \n var skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n \n var skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n \n var skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n \n var skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n \n var specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n \n var specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n \n var tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n \n var tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(  1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,  1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n \n var transmission_fragment = \"#ifdef USE_TRANSMISSION\\n\\tfloat transmissionAlpha = 1.0;\\n\\tfloat transmissionFactor = transmission;\\n\\tfloat thicknessFactor = thickness;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\\n\\t#endif\\n\\tvec3 pos = vWorldPosition;\\n\\tvec3 v = normalize( cameraPosition - pos );\\n\\tvec3 n = inverseTransformDirection( normal, viewMatrix );\\n\\tvec4 transmission = getIBLVolumeRefraction(\\n\\t\\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\\n\\t\\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\\n\\t\\tattenuationColor, attenuationDistance );\\n\\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\\n\\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\\n#endif\";\n \n var transmission_pars_fragment = \"#ifdef USE_TRANSMISSION\\n\\tuniform float transmission;\\n\\tuniform float thickness;\\n\\tuniform float attenuationDistance;\\n\\tuniform vec3 attenuationColor;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tuniform sampler2D transmissionMap;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tuniform sampler2D thicknessMap;\\n\\t#endif\\n\\tuniform vec2 transmissionSamplerSize;\\n\\tuniform sampler2D transmissionSamplerMap;\\n\\tuniform mat4 modelMatrix;\\n\\tuniform mat4 projectionMatrix;\\n\\tvarying vec3 vWorldPosition;\\n\\tvec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {\\n\\t\\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\\n\\t\\tvec3 modelScale;\\n\\t\\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\\n\\t\\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\\n\\t\\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\\n\\t\\treturn normalize( refractionVector ) * thickness * modelScale;\\n\\t}\\n\\tfloat applyIorToRoughness( float roughness, float ior ) {\\n\\t\\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\\n\\t}\\n\\tvec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {\\n\\t\\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\\n\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\\n\\t\\t#else\\n\\t\\t\\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {\\n\\t\\tif ( attenuationDistance == 0.0 ) {\\n\\t\\t\\treturn radiance;\\n\\t\\t} else {\\n\\t\\t\\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\\n\\t\\t\\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\\t\\t\\treturn transmittance * radiance;\\n\\t\\t}\\n\\t}\\n\\tvec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,\\n\\t\\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,\\n\\t\\tvec3 attenuationColor, float attenuationDistance ) {\\n\\t\\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\\n\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\\n\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\trefractionCoords += 1.0;\\n\\t\\trefractionCoords /= 2.0;\\n\\t\\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\\n\\t\\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\\n\\t\\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\\n\\t\\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\\n\\t}\\n#endif\";\n \n var uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n \n var uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n \n var uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n \n var uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n \n var uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n \n var uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n \n var worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n \n const vertex$g = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n \n const fragment$g = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n \n const vertex$f = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n \n const fragment$f = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n \n const vertex$e = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n \n const fragment$e = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n \n const vertex$d = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n \n const fragment$d = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n \n const vertex$c = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n \n const fragment$c = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n \n const vertex$b = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n \n const fragment$b = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n \n const vertex$a = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinbase_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n \n const fragment$a = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n \n const vertex$9 = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n \n const fragment$9 = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n \n const vertex$8 = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n \n const fragment$8 = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n \n const vertex$7 = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n \n const fragment$7 = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n \n const vertex$6 = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n \n const fragment$6 = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n \n const vertex$5 = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifdef USE_TRANSMISSION\\n\\tvarying vec3 vWorldPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n#ifdef USE_TRANSMISSION\\n\\tvWorldPosition = worldPosition.xyz;\\n#endif\\n}\";\n \n const fragment$5 = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define IOR\\n\\t#define SPECULAR\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef IOR\\n\\tuniform float ior;\\n#endif\\n#ifdef SPECULAR\\n\\tuniform float specularIntensity;\\n\\tuniform vec3 specularColor;\\n\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\tuniform sampler2D specularIntensityMap;\\n\\t#endif\\n\\t#ifdef USE_SPECULARCOLORMAP\\n\\t\\tuniform sampler2D specularColorMap;\\n\\t#endif\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheenColor;\\n\\tuniform float sheenRoughness;\\n\\t#ifdef USE_SHEENCOLORMAP\\n\\t\\tuniform sampler2D sheenColorMap;\\n\\t#endif\\n\\t#ifdef USE_SHEENROUGHNESSMAP\\n\\t\\tuniform sampler2D sheenRoughnessMap;\\n\\t#endif\\n#endif\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_physical_pars_fragment>\\n#include <transmission_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\\n\\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\\n\\t#include <transmission_fragment>\\n\\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\\n\\t\\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\\n\\t#endif\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n \n const vertex$4 = \"#define TOON\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n \n const fragment$4 = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n \n const vertex$3 = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n \n const fragment$3 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n \n const vertex$2 = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n \n const fragment$2 = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n \n const vertex$1 = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n \n const fragment$1 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n \n const ShaderChunk = {\n   alphamap_fragment: alphamap_fragment,\n   alphamap_pars_fragment: alphamap_pars_fragment,\n   alphatest_fragment: alphatest_fragment,\n   alphatest_pars_fragment: alphatest_pars_fragment,\n   aomap_fragment: aomap_fragment,\n   aomap_pars_fragment: aomap_pars_fragment,\n   begin_vertex: begin_vertex,\n   beginnormal_vertex: beginnormal_vertex,\n   bsdfs: bsdfs,\n   bumpmap_pars_fragment: bumpmap_pars_fragment,\n   clipping_planes_fragment: clipping_planes_fragment,\n   clipping_planes_pars_fragment: clipping_planes_pars_fragment,\n   clipping_planes_pars_vertex: clipping_planes_pars_vertex,\n   clipping_planes_vertex: clipping_planes_vertex,\n   color_fragment: color_fragment,\n   color_pars_fragment: color_pars_fragment,\n   color_pars_vertex: color_pars_vertex,\n   color_vertex: color_vertex,\n   common: common,\n   cube_uv_reflection_fragment: cube_uv_reflection_fragment,\n   defaultnormal_vertex: defaultnormal_vertex,\n   displacementmap_pars_vertex: displacementmap_pars_vertex,\n   displacementmap_vertex: displacementmap_vertex,\n   emissivemap_fragment: emissivemap_fragment,\n   emissivemap_pars_fragment: emissivemap_pars_fragment,\n   encodings_fragment: encodings_fragment,\n   encodings_pars_fragment: encodings_pars_fragment,\n   envmap_fragment: envmap_fragment,\n   envmap_common_pars_fragment: envmap_common_pars_fragment,\n   envmap_pars_fragment: envmap_pars_fragment,\n   envmap_pars_vertex: envmap_pars_vertex,\n   envmap_physical_pars_fragment: envmap_physical_pars_fragment,\n   envmap_vertex: envmap_vertex,\n   fog_vertex: fog_vertex,\n   fog_pars_vertex: fog_pars_vertex,\n   fog_fragment: fog_fragment,\n   fog_pars_fragment: fog_pars_fragment,\n   gradientmap_pars_fragment: gradientmap_pars_fragment,\n   lightmap_fragment: lightmap_fragment,\n   lightmap_pars_fragment: lightmap_pars_fragment,\n   lights_lambert_vertex: lights_lambert_vertex,\n   lights_pars_begin: lights_pars_begin,\n   lights_toon_fragment: lights_toon_fragment,\n   lights_toon_pars_fragment: lights_toon_pars_fragment,\n   lights_phong_fragment: lights_phong_fragment,\n   lights_phong_pars_fragment: lights_phong_pars_fragment,\n   lights_physical_fragment: lights_physical_fragment,\n   lights_physical_pars_fragment: lights_physical_pars_fragment,\n   lights_fragment_begin: lights_fragment_begin,\n   lights_fragment_maps: lights_fragment_maps,\n   lights_fragment_end: lights_fragment_end,\n   logdepthbuf_fragment: logdepthbuf_fragment,\n   logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n   logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n   logdepthbuf_vertex: logdepthbuf_vertex,\n   map_fragment: map_fragment,\n   map_pars_fragment: map_pars_fragment,\n   map_particle_fragment: map_particle_fragment,\n   map_particle_pars_fragment: map_particle_pars_fragment,\n   metalnessmap_fragment: metalnessmap_fragment,\n   metalnessmap_pars_fragment: metalnessmap_pars_fragment,\n   morphnormal_vertex: morphnormal_vertex,\n   morphtarget_pars_vertex: morphtarget_pars_vertex,\n   morphtarget_vertex: morphtarget_vertex,\n   normal_fragment_begin: normal_fragment_begin,\n   normal_fragment_maps: normal_fragment_maps,\n   normal_pars_fragment: normal_pars_fragment,\n   normal_pars_vertex: normal_pars_vertex,\n   normal_vertex: normal_vertex,\n   normalmap_pars_fragment: normalmap_pars_fragment,\n   clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n   clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n   clearcoat_pars_fragment: clearcoat_pars_fragment,\n   output_fragment: output_fragment,\n   packing: packing,\n   premultiplied_alpha_fragment: premultiplied_alpha_fragment,\n   project_vertex: project_vertex,\n   dithering_fragment: dithering_fragment,\n   dithering_pars_fragment: dithering_pars_fragment,\n   roughnessmap_fragment: roughnessmap_fragment,\n   roughnessmap_pars_fragment: roughnessmap_pars_fragment,\n   shadowmap_pars_fragment: shadowmap_pars_fragment,\n   shadowmap_pars_vertex: shadowmap_pars_vertex,\n   shadowmap_vertex: shadowmap_vertex,\n   shadowmask_pars_fragment: shadowmask_pars_fragment,\n   skinbase_vertex: skinbase_vertex,\n   skinning_pars_vertex: skinning_pars_vertex,\n   skinning_vertex: skinning_vertex,\n   skinnormal_vertex: skinnormal_vertex,\n   specularmap_fragment: specularmap_fragment,\n   specularmap_pars_fragment: specularmap_pars_fragment,\n   tonemapping_fragment: tonemapping_fragment,\n   tonemapping_pars_fragment: tonemapping_pars_fragment,\n   transmission_fragment: transmission_fragment,\n   transmission_pars_fragment: transmission_pars_fragment,\n   uv_pars_fragment: uv_pars_fragment,\n   uv_pars_vertex: uv_pars_vertex,\n   uv_vertex: uv_vertex,\n   uv2_pars_fragment: uv2_pars_fragment,\n   uv2_pars_vertex: uv2_pars_vertex,\n   uv2_vertex: uv2_vertex,\n   worldpos_vertex: worldpos_vertex,\n \n   background_vert: vertex$g,\n   background_frag: fragment$g,\n   cube_vert: vertex$f,\n   cube_frag: fragment$f,\n   depth_vert: vertex$e,\n   depth_frag: fragment$e,\n   distanceRGBA_vert: vertex$d,\n   distanceRGBA_frag: fragment$d,\n   equirect_vert: vertex$c,\n   equirect_frag: fragment$c,\n   linedashed_vert: vertex$b,\n   linedashed_frag: fragment$b,\n   meshbasic_vert: vertex$a,\n   meshbasic_frag: fragment$a,\n   meshlambert_vert: vertex$9,\n   meshlambert_frag: fragment$9,\n   meshmatcap_vert: vertex$8,\n   meshmatcap_frag: fragment$8,\n   meshnormal_vert: vertex$7,\n   meshnormal_frag: fragment$7,\n   meshphong_vert: vertex$6,\n   meshphong_frag: fragment$6,\n   meshphysical_vert: vertex$5,\n   meshphysical_frag: fragment$5,\n   meshtoon_vert: vertex$4,\n   meshtoon_frag: fragment$4,\n   points_vert: vertex$3,\n   points_frag: fragment$3,\n   shadow_vert: vertex$2,\n   shadow_frag: fragment$2,\n   sprite_vert: vertex$1,\n   sprite_frag: fragment$1\n };\n \n /**\n  * Uniforms library for shared webgl shaders\n  */\n \n const UniformsLib = {\n \n   common: {\n \n     diffuse: { value: new Color( 0xffffff ) },\n     opacity: { value: 1.0 },\n \n     map: { value: null },\n     uvTransform: { value: new Matrix3() },\n     uv2Transform: { value: new Matrix3() },\n \n     alphaMap: { value: null },\n     alphaTest: { value: 0 }\n \n   },\n \n   specularmap: {\n \n     specularMap: { value: null },\n \n   },\n \n   envmap: {\n \n     envMap: { value: null },\n     flipEnvMap: { value: - 1 },\n     reflectivity: { value: 1.0 }, // basic, lambert, phong\n     ior: { value: 1.5 }, // standard, physical\n     refractionRatio: { value: 0.98 }\n \n   },\n \n   aomap: {\n \n     aoMap: { value: null },\n     aoMapIntensity: { value: 1 }\n \n   },\n \n   lightmap: {\n \n     lightMap: { value: null },\n     lightMapIntensity: { value: 1 }\n \n   },\n \n   emissivemap: {\n \n     emissiveMap: { value: null }\n \n   },\n \n   bumpmap: {\n \n     bumpMap: { value: null },\n     bumpScale: { value: 1 }\n \n   },\n \n   normalmap: {\n \n     normalMap: { value: null },\n     normalScale: { value: new Vector2( 1, 1 ) }\n \n   },\n \n   displacementmap: {\n \n     displacementMap: { value: null },\n     displacementScale: { value: 1 },\n     displacementBias: { value: 0 }\n \n   },\n \n   roughnessmap: {\n \n     roughnessMap: { value: null }\n \n   },\n \n   metalnessmap: {\n \n     metalnessMap: { value: null }\n \n   },\n \n   gradientmap: {\n \n     gradientMap: { value: null }\n \n   },\n \n   fog: {\n \n     fogDensity: { value: 0.00025 },\n     fogNear: { value: 1 },\n     fogFar: { value: 2000 },\n     fogColor: { value: new Color( 0xffffff ) }\n \n   },\n \n   lights: {\n \n     ambientLightColor: { value: [] },\n \n     lightProbe: { value: [] },\n \n     directionalLights: { value: [], properties: {\n       direction: {},\n       color: {}\n     } },\n \n     directionalLightShadows: { value: [], properties: {\n       shadowBias: {},\n       shadowNormalBias: {},\n       shadowRadius: {},\n       shadowMapSize: {}\n     } },\n \n     directionalShadowMap: { value: [] },\n     directionalShadowMatrix: { value: [] },\n \n     spotLights: { value: [], properties: {\n       color: {},\n       position: {},\n       direction: {},\n       distance: {},\n       coneCos: {},\n       penumbraCos: {},\n       decay: {}\n     } },\n \n     spotLightShadows: { value: [], properties: {\n       shadowBias: {},\n       shadowNormalBias: {},\n       shadowRadius: {},\n       shadowMapSize: {}\n     } },\n \n     spotShadowMap: { value: [] },\n     spotShadowMatrix: { value: [] },\n \n     pointLights: { value: [], properties: {\n       color: {},\n       position: {},\n       decay: {},\n       distance: {}\n     } },\n \n     pointLightShadows: { value: [], properties: {\n       shadowBias: {},\n       shadowNormalBias: {},\n       shadowRadius: {},\n       shadowMapSize: {},\n       shadowCameraNear: {},\n       shadowCameraFar: {}\n     } },\n \n     pointShadowMap: { value: [] },\n     pointShadowMatrix: { value: [] },\n \n     hemisphereLights: { value: [], properties: {\n       direction: {},\n       skyColor: {},\n       groundColor: {}\n     } },\n \n     // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n     rectAreaLights: { value: [], properties: {\n       color: {},\n       position: {},\n       width: {},\n       height: {}\n     } },\n \n     ltc_1: { value: null },\n     ltc_2: { value: null }\n \n   },\n \n   points: {\n \n     diffuse: { value: new Color( 0xffffff ) },\n     opacity: { value: 1.0 },\n     size: { value: 1.0 },\n     scale: { value: 1.0 },\n     map: { value: null },\n     alphaMap: { value: null },\n     alphaTest: { value: 0 },\n     uvTransform: { value: new Matrix3() }\n \n   },\n \n   sprite: {\n \n     diffuse: { value: new Color( 0xffffff ) },\n     opacity: { value: 1.0 },\n     center: { value: new Vector2( 0.5, 0.5 ) },\n     rotation: { value: 0.0 },\n     map: { value: null },\n     alphaMap: { value: null },\n     alphaTest: { value: 0 },\n     uvTransform: { value: new Matrix3() }\n \n   }\n \n };\n \n const ShaderLib = {\n \n   basic: {\n \n     uniforms: mergeUniforms( [\n       UniformsLib.common,\n       UniformsLib.specularmap,\n       UniformsLib.envmap,\n       UniformsLib.aomap,\n       UniformsLib.lightmap,\n       UniformsLib.fog\n     ] ),\n \n     vertexShader: ShaderChunk.meshbasic_vert,\n     fragmentShader: ShaderChunk.meshbasic_frag\n \n   },\n \n   lambert: {\n \n     uniforms: mergeUniforms( [\n       UniformsLib.common,\n       UniformsLib.specularmap,\n       UniformsLib.envmap,\n       UniformsLib.aomap,\n       UniformsLib.lightmap,\n       UniformsLib.emissivemap,\n       UniformsLib.fog,\n       UniformsLib.lights,\n       {\n         emissive: { value: new Color( 0x000000 ) }\n       }\n     ] ),\n \n     vertexShader: ShaderChunk.meshlambert_vert,\n     fragmentShader: ShaderChunk.meshlambert_frag\n \n   },\n \n   phong: {\n \n     uniforms: mergeUniforms( [\n       UniformsLib.common,\n       UniformsLib.specularmap,\n       UniformsLib.envmap,\n       UniformsLib.aomap,\n       UniformsLib.lightmap,\n       UniformsLib.emissivemap,\n       UniformsLib.bumpmap,\n       UniformsLib.normalmap,\n       UniformsLib.displacementmap,\n       UniformsLib.fog,\n       UniformsLib.lights,\n       {\n         emissive: { value: new Color( 0x000000 ) },\n         specular: { value: new Color( 0x111111 ) },\n         shininess: { value: 30 }\n       }\n     ] ),\n \n     vertexShader: ShaderChunk.meshphong_vert,\n     fragmentShader: ShaderChunk.meshphong_frag\n \n   },\n \n   standard: {\n \n     uniforms: mergeUniforms( [\n       UniformsLib.common,\n       UniformsLib.envmap,\n       UniformsLib.aomap,\n       UniformsLib.lightmap,\n       UniformsLib.emissivemap,\n       UniformsLib.bumpmap,\n       UniformsLib.normalmap,\n       UniformsLib.displacementmap,\n       UniformsLib.roughnessmap,\n       UniformsLib.metalnessmap,\n       UniformsLib.fog,\n       UniformsLib.lights,\n       {\n         emissive: { value: new Color( 0x000000 ) },\n         roughness: { value: 1.0 },\n         metalness: { value: 0.0 },\n         envMapIntensity: { value: 1 } // temporary\n       }\n     ] ),\n \n     vertexShader: ShaderChunk.meshphysical_vert,\n     fragmentShader: ShaderChunk.meshphysical_frag\n \n   },\n \n   toon: {\n \n     uniforms: mergeUniforms( [\n       UniformsLib.common,\n       UniformsLib.aomap,\n       UniformsLib.lightmap,\n       UniformsLib.emissivemap,\n       UniformsLib.bumpmap,\n       UniformsLib.normalmap,\n       UniformsLib.displacementmap,\n       UniformsLib.gradientmap,\n       UniformsLib.fog,\n       UniformsLib.lights,\n       {\n         emissive: { value: new Color( 0x000000 ) }\n       }\n     ] ),\n \n     vertexShader: ShaderChunk.meshtoon_vert,\n     fragmentShader: ShaderChunk.meshtoon_frag\n \n   },\n \n   matcap: {\n \n     uniforms: mergeUniforms( [\n       UniformsLib.common,\n       UniformsLib.bumpmap,\n       UniformsLib.normalmap,\n       UniformsLib.displacementmap,\n       UniformsLib.fog,\n       {\n         matcap: { value: null }\n       }\n     ] ),\n \n     vertexShader: ShaderChunk.meshmatcap_vert,\n     fragmentShader: ShaderChunk.meshmatcap_frag\n \n   },\n \n   points: {\n \n     uniforms: mergeUniforms( [\n       UniformsLib.points,\n       UniformsLib.fog\n     ] ),\n \n     vertexShader: ShaderChunk.points_vert,\n     fragmentShader: ShaderChunk.points_frag\n \n   },\n \n   dashed: {\n \n     uniforms: mergeUniforms( [\n       UniformsLib.common,\n       UniformsLib.fog,\n       {\n         scale: { value: 1 },\n         dashSize: { value: 1 },\n         totalSize: { value: 2 }\n       }\n     ] ),\n \n     vertexShader: ShaderChunk.linedashed_vert,\n     fragmentShader: ShaderChunk.linedashed_frag\n \n   },\n \n   depth: {\n \n     uniforms: mergeUniforms( [\n       UniformsLib.common,\n       UniformsLib.displacementmap\n     ] ),\n \n     vertexShader: ShaderChunk.depth_vert,\n     fragmentShader: ShaderChunk.depth_frag\n \n   },\n \n   normal: {\n \n     uniforms: mergeUniforms( [\n       UniformsLib.common,\n       UniformsLib.bumpmap,\n       UniformsLib.normalmap,\n       UniformsLib.displacementmap,\n       {\n         opacity: { value: 1.0 }\n       }\n     ] ),\n \n     vertexShader: ShaderChunk.meshnormal_vert,\n     fragmentShader: ShaderChunk.meshnormal_frag\n \n   },\n \n   sprite: {\n \n     uniforms: mergeUniforms( [\n       UniformsLib.sprite,\n       UniformsLib.fog\n     ] ),\n \n     vertexShader: ShaderChunk.sprite_vert,\n     fragmentShader: ShaderChunk.sprite_frag\n \n   },\n \n   background: {\n \n     uniforms: {\n       uvTransform: { value: new Matrix3() },\n       t2D: { value: null },\n     },\n \n     vertexShader: ShaderChunk.background_vert,\n     fragmentShader: ShaderChunk.background_frag\n \n   },\n   /* -------------------------------------------------------------------------\n   //\tCube map shader\n    ------------------------------------------------------------------------- */\n \n   cube: {\n \n     uniforms: mergeUniforms( [\n       UniformsLib.envmap,\n       {\n         opacity: { value: 1.0 }\n       }\n     ] ),\n \n     vertexShader: ShaderChunk.cube_vert,\n     fragmentShader: ShaderChunk.cube_frag\n \n   },\n \n   equirect: {\n \n     uniforms: {\n       tEquirect: { value: null },\n     },\n \n     vertexShader: ShaderChunk.equirect_vert,\n     fragmentShader: ShaderChunk.equirect_frag\n \n   },\n \n   distanceRGBA: {\n \n     uniforms: mergeUniforms( [\n       UniformsLib.common,\n       UniformsLib.displacementmap,\n       {\n         referencePosition: { value: new Vector3() },\n         nearDistance: { value: 1 },\n         farDistance: { value: 1000 }\n       }\n     ] ),\n \n     vertexShader: ShaderChunk.distanceRGBA_vert,\n     fragmentShader: ShaderChunk.distanceRGBA_frag\n \n   },\n \n   shadow: {\n \n     uniforms: mergeUniforms( [\n       UniformsLib.lights,\n       UniformsLib.fog,\n       {\n         color: { value: new Color( 0x00000 ) },\n         opacity: { value: 1.0 }\n       },\n     ] ),\n \n     vertexShader: ShaderChunk.shadow_vert,\n     fragmentShader: ShaderChunk.shadow_frag\n \n   }\n \n };\n \n ShaderLib.physical = {\n \n   uniforms: mergeUniforms( [\n     ShaderLib.standard.uniforms,\n     {\n       clearcoat: { value: 0 },\n       clearcoatMap: { value: null },\n       clearcoatRoughness: { value: 0 },\n       clearcoatRoughnessMap: { value: null },\n       clearcoatNormalScale: { value: new Vector2( 1, 1 ) },\n       clearcoatNormalMap: { value: null },\n       sheen: { value: 0 },\n       sheenColor: { value: new Color( 0x000000 ) },\n       sheenColorMap: { value: null },\n       sheenRoughness: { value: 0 },\n       sheenRoughnessMap: { value: null },\n       transmission: { value: 0 },\n       transmissionMap: { value: null },\n       transmissionSamplerSize: { value: new Vector2() },\n       transmissionSamplerMap: { value: null },\n       thickness: { value: 0 },\n       thicknessMap: { value: null },\n       attenuationDistance: { value: 0 },\n       attenuationColor: { value: new Color( 0x000000 ) },\n       specularIntensity: { value: 0 },\n       specularIntensityMap: { value: null },\n       specularColor: { value: new Color( 1, 1, 1 ) },\n       specularColorMap: { value: null },\n     }\n   ] ),\n \n   vertexShader: ShaderChunk.meshphysical_vert,\n   fragmentShader: ShaderChunk.meshphysical_frag\n \n };\n \n function WebGLBackground( renderer, cubemaps, state, objects, premultipliedAlpha ) {\n \n   const clearColor = new Color( 0x000000 );\n   let clearAlpha = 0;\n \n   let planeMesh;\n   let boxMesh;\n \n   let currentBackground = null;\n   let currentBackgroundVersion = 0;\n   let currentTonemapping = null;\n \n   function render( renderList, scene ) {\n \n     let forceClear = false;\n     let background = scene.isScene === true ? scene.background : null;\n \n     if ( background && background.isTexture ) {\n \n       background = cubemaps.get( background );\n \n     }\n \n     // Ignore background in AR\n     // TODO: Reconsider this.\n \n     const xr = renderer.xr;\n     const session = xr.getSession && xr.getSession();\n \n     if ( session && session.environmentBlendMode === 'additive' ) {\n \n       background = null;\n \n     }\n \n     if ( background === null ) {\n \n       setClear( clearColor, clearAlpha );\n \n     } else if ( background && background.isColor ) {\n \n       setClear( background, 1 );\n       forceClear = true;\n \n     }\n \n     if ( renderer.autoClear || forceClear ) {\n \n       renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n \n     }\n \n     if ( background && ( background.isCubeTexture || background.mapping === CubeUVReflectionMapping ) ) {\n \n       if ( boxMesh === undefined ) {\n \n         boxMesh = new Mesh(\n           new BoxGeometry( 1, 1, 1 ),\n           new ShaderMaterial( {\n             name: 'BackgroundCubeMaterial',\n             uniforms: cloneUniforms( ShaderLib.cube.uniforms ),\n             vertexShader: ShaderLib.cube.vertexShader,\n             fragmentShader: ShaderLib.cube.fragmentShader,\n             side: BackSide,\n             depthTest: false,\n             depthWrite: false,\n             fog: false\n           } )\n         );\n \n         boxMesh.geometry.deleteAttribute( 'normal' );\n         boxMesh.geometry.deleteAttribute( 'uv' );\n \n         boxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n \n           this.matrixWorld.copyPosition( camera.matrixWorld );\n \n         };\n \n         // enable code injection for non-built-in material\n         Object.defineProperty( boxMesh.material, 'envMap', {\n \n           get: function () {\n \n             return this.uniforms.envMap.value;\n \n           }\n \n         } );\n \n         objects.update( boxMesh );\n \n       }\n \n       boxMesh.material.uniforms.envMap.value = background;\n       boxMesh.material.uniforms.flipEnvMap.value = ( background.isCubeTexture && background.isRenderTargetTexture === false ) ? - 1 : 1;\n \n       if ( currentBackground !== background ||\n         currentBackgroundVersion !== background.version ||\n         currentTonemapping !== renderer.toneMapping ) {\n \n         boxMesh.material.needsUpdate = true;\n \n         currentBackground = background;\n         currentBackgroundVersion = background.version;\n         currentTonemapping = renderer.toneMapping;\n \n       }\n \n       // push to the pre-sorted opaque render list\n       renderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n \n     } else if ( background && background.isTexture ) {\n \n       if ( planeMesh === undefined ) {\n \n         planeMesh = new Mesh(\n           new PlaneGeometry( 2, 2 ),\n           new ShaderMaterial( {\n             name: 'BackgroundMaterial',\n             uniforms: cloneUniforms( ShaderLib.background.uniforms ),\n             vertexShader: ShaderLib.background.vertexShader,\n             fragmentShader: ShaderLib.background.fragmentShader,\n             side: FrontSide,\n             depthTest: false,\n             depthWrite: false,\n             fog: false\n           } )\n         );\n \n         planeMesh.geometry.deleteAttribute( 'normal' );\n \n         // enable code injection for non-built-in material\n         Object.defineProperty( planeMesh.material, 'map', {\n \n           get: function () {\n \n             return this.uniforms.t2D.value;\n \n           }\n \n         } );\n \n         objects.update( planeMesh );\n \n       }\n \n       planeMesh.material.uniforms.t2D.value = background;\n \n       if ( background.matrixAutoUpdate === true ) {\n \n         background.updateMatrix();\n \n       }\n \n       planeMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n \n       if ( currentBackground !== background ||\n         currentBackgroundVersion !== background.version ||\n         currentTonemapping !== renderer.toneMapping ) {\n \n         planeMesh.material.needsUpdate = true;\n \n         currentBackground = background;\n         currentBackgroundVersion = background.version;\n         currentTonemapping = renderer.toneMapping;\n \n       }\n \n \n       // push to the pre-sorted opaque render list\n       renderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n \n     }\n \n   }\n \n   function setClear( color, alpha ) {\n \n     state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n \n   }\n \n   return {\n \n     getClearColor: function () {\n \n       return clearColor;\n \n     },\n     setClearColor: function ( color, alpha = 1 ) {\n \n       clearColor.set( color );\n       clearAlpha = alpha;\n       setClear( clearColor, clearAlpha );\n \n     },\n     getClearAlpha: function () {\n \n       return clearAlpha;\n \n     },\n     setClearAlpha: function ( alpha ) {\n \n       clearAlpha = alpha;\n       setClear( clearColor, clearAlpha );\n \n     },\n     render: render\n \n   };\n \n }\n \n function WebGLBindingStates( gl, extensions, attributes, capabilities ) {\n \n   const maxVertexAttributes = gl.getParameter( 34921 );\n \n   const extension = capabilities.isWebGL2 ? null : extensions.get( 'OES_vertex_array_object' );\n   const vaoAvailable = capabilities.isWebGL2 || extension !== null;\n \n   const bindingStates = {};\n \n   const defaultState = createBindingState( null );\n   let currentState = defaultState;\n \n   function setup( object, material, program, geometry, index ) {\n \n     let updateBuffers = false;\n \n     if ( vaoAvailable ) {\n \n       const state = getBindingState( geometry, program, material );\n \n       if ( currentState !== state ) {\n \n         currentState = state;\n         bindVertexArrayObject( currentState.object );\n \n       }\n \n       updateBuffers = needsUpdate( geometry, index );\n \n       if ( updateBuffers ) saveCache( geometry, index );\n \n     } else {\n \n       const wireframe = ( material.wireframe === true );\n \n       if ( currentState.geometry !== geometry.id ||\n         currentState.program !== program.id ||\n         currentState.wireframe !== wireframe ) {\n \n         currentState.geometry = geometry.id;\n         currentState.program = program.id;\n         currentState.wireframe = wireframe;\n \n         updateBuffers = true;\n \n       }\n \n     }\n \n     if ( object.isInstancedMesh === true ) {\n \n       updateBuffers = true;\n \n     }\n \n     if ( index !== null ) {\n \n       attributes.update( index, 34963 );\n \n     }\n \n     if ( updateBuffers ) {\n \n       setupVertexAttributes( object, material, program, geometry );\n \n       if ( index !== null ) {\n \n         gl.bindBuffer( 34963, attributes.get( index ).buffer );\n \n       }\n \n     }\n \n   }\n \n   function createVertexArrayObject() {\n \n     if ( capabilities.isWebGL2 ) return gl.createVertexArray();\n \n     return extension.createVertexArrayOES();\n \n   }\n \n   function bindVertexArrayObject( vao ) {\n \n     if ( capabilities.isWebGL2 ) return gl.bindVertexArray( vao );\n \n     return extension.bindVertexArrayOES( vao );\n \n   }\n \n   function deleteVertexArrayObject( vao ) {\n \n     if ( capabilities.isWebGL2 ) return gl.deleteVertexArray( vao );\n \n     return extension.deleteVertexArrayOES( vao );\n \n   }\n \n   function getBindingState( geometry, program, material ) {\n \n     const wireframe = ( material.wireframe === true );\n \n     let programMap = bindingStates[ geometry.id ];\n \n     if ( programMap === undefined ) {\n \n       programMap = {};\n       bindingStates[ geometry.id ] = programMap;\n \n     }\n \n     let stateMap = programMap[ program.id ];\n \n     if ( stateMap === undefined ) {\n \n       stateMap = {};\n       programMap[ program.id ] = stateMap;\n \n     }\n \n     let state = stateMap[ wireframe ];\n \n     if ( state === undefined ) {\n \n       state = createBindingState( createVertexArrayObject() );\n       stateMap[ wireframe ] = state;\n \n     }\n \n     return state;\n \n   }\n \n   function createBindingState( vao ) {\n \n     const newAttributes = [];\n     const enabledAttributes = [];\n     const attributeDivisors = [];\n \n     for ( let i = 0; i < maxVertexAttributes; i ++ ) {\n \n       newAttributes[ i ] = 0;\n       enabledAttributes[ i ] = 0;\n       attributeDivisors[ i ] = 0;\n \n     }\n \n     return {\n \n       // for backward compatibility on non-VAO support browser\n       geometry: null,\n       program: null,\n       wireframe: false,\n \n       newAttributes: newAttributes,\n       enabledAttributes: enabledAttributes,\n       attributeDivisors: attributeDivisors,\n       object: vao,\n       attributes: {},\n       index: null\n \n     };\n \n   }\n \n   function needsUpdate( geometry, index ) {\n \n     const cachedAttributes = currentState.attributes;\n     const geometryAttributes = geometry.attributes;\n \n     let attributesNum = 0;\n \n     for ( const key in geometryAttributes ) {\n \n       const cachedAttribute = cachedAttributes[ key ];\n       const geometryAttribute = geometryAttributes[ key ];\n \n       if ( cachedAttribute === undefined ) return true;\n \n       if ( cachedAttribute.attribute !== geometryAttribute ) return true;\n \n       if ( cachedAttribute.data !== geometryAttribute.data ) return true;\n \n       attributesNum ++;\n \n     }\n \n     if ( currentState.attributesNum !== attributesNum ) return true;\n \n     if ( currentState.index !== index ) return true;\n \n     return false;\n \n   }\n \n   function saveCache( geometry, index ) {\n \n     const cache = {};\n     const attributes = geometry.attributes;\n     let attributesNum = 0;\n \n     for ( const key in attributes ) {\n \n       const attribute = attributes[ key ];\n \n       const data = {};\n       data.attribute = attribute;\n \n       if ( attribute.data ) {\n \n         data.data = attribute.data;\n \n       }\n \n       cache[ key ] = data;\n \n       attributesNum ++;\n \n     }\n \n     currentState.attributes = cache;\n     currentState.attributesNum = attributesNum;\n \n     currentState.index = index;\n \n   }\n \n   function initAttributes() {\n \n     const newAttributes = currentState.newAttributes;\n \n     for ( let i = 0, il = newAttributes.length; i < il; i ++ ) {\n \n       newAttributes[ i ] = 0;\n \n     }\n \n   }\n \n   function enableAttribute( attribute ) {\n \n     enableAttributeAndDivisor( attribute, 0 );\n \n   }\n \n   function enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n \n     const newAttributes = currentState.newAttributes;\n     const enabledAttributes = currentState.enabledAttributes;\n     const attributeDivisors = currentState.attributeDivisors;\n \n     newAttributes[ attribute ] = 1;\n \n     if ( enabledAttributes[ attribute ] === 0 ) {\n \n       gl.enableVertexAttribArray( attribute );\n       enabledAttributes[ attribute ] = 1;\n \n     }\n \n     if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n \n       const extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n \n       extension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n       attributeDivisors[ attribute ] = meshPerAttribute;\n \n     }\n \n   }\n \n   function disableUnusedAttributes() {\n \n     const newAttributes = currentState.newAttributes;\n     const enabledAttributes = currentState.enabledAttributes;\n \n     for ( let i = 0, il = enabledAttributes.length; i < il; i ++ ) {\n \n       if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n \n         gl.disableVertexAttribArray( i );\n         enabledAttributes[ i ] = 0;\n \n       }\n \n     }\n \n   }\n \n   function vertexAttribPointer( index, size, type, normalized, stride, offset ) {\n \n     if ( capabilities.isWebGL2 === true && ( type === 5124 || type === 5125 ) ) {\n \n       gl.vertexAttribIPointer( index, size, type, stride, offset );\n \n     } else {\n \n       gl.vertexAttribPointer( index, size, type, normalized, stride, offset );\n \n     }\n \n   }\n \n   function setupVertexAttributes( object, material, program, geometry ) {\n \n     if ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\n \n       if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) return;\n \n     }\n \n     initAttributes();\n \n     const geometryAttributes = geometry.attributes;\n \n     const programAttributes = program.getAttributes();\n \n     const materialDefaultAttributeValues = material.defaultAttributeValues;\n \n     for ( const name in programAttributes ) {\n \n       const programAttribute = programAttributes[ name ];\n \n       if ( programAttribute.location >= 0 ) {\n \n         let geometryAttribute = geometryAttributes[ name ];\n \n         if ( geometryAttribute === undefined ) {\n \n           if ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;\n           if ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;\n \n         }\n \n         if ( geometryAttribute !== undefined ) {\n \n           const normalized = geometryAttribute.normalized;\n           const size = geometryAttribute.itemSize;\n \n           const attribute = attributes.get( geometryAttribute );\n \n           // TODO Attribute may not be available on context restore\n \n           if ( attribute === undefined ) continue;\n \n           const buffer = attribute.buffer;\n           const type = attribute.type;\n           const bytesPerElement = attribute.bytesPerElement;\n \n           if ( geometryAttribute.isInterleavedBufferAttribute ) {\n \n             const data = geometryAttribute.data;\n             const stride = data.stride;\n             const offset = geometryAttribute.offset;\n \n             if ( data && data.isInstancedInterleavedBuffer ) {\n \n               for ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n \n                 enableAttributeAndDivisor( programAttribute.location + i, data.meshPerAttribute );\n \n               }\n \n               if ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {\n \n                 geometry._maxInstanceCount = data.meshPerAttribute * data.count;\n \n               }\n \n             } else {\n \n               for ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n \n                 enableAttribute( programAttribute.location + i );\n \n               }\n \n             }\n \n             gl.bindBuffer( 34962, buffer );\n \n             for ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n \n               vertexAttribPointer(\n                 programAttribute.location + i,\n                 size / programAttribute.locationSize,\n                 type,\n                 normalized,\n                 stride * bytesPerElement,\n                 ( offset + ( size / programAttribute.locationSize ) * i ) * bytesPerElement\n               );\n \n             }\n \n           } else {\n \n             if ( geometryAttribute.isInstancedBufferAttribute ) {\n \n               for ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n \n                 enableAttributeAndDivisor( programAttribute.location + i, geometryAttribute.meshPerAttribute );\n \n               }\n \n               if ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {\n \n                 geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n \n               }\n \n             } else {\n \n               for ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n \n                 enableAttribute( programAttribute.location + i );\n \n               }\n \n             }\n \n             gl.bindBuffer( 34962, buffer );\n \n             for ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n \n               vertexAttribPointer(\n                 programAttribute.location + i,\n                 size / programAttribute.locationSize,\n                 type,\n                 normalized,\n                 size * bytesPerElement,\n                 ( size / programAttribute.locationSize ) * i * bytesPerElement\n               );\n \n             }\n \n           }\n \n         } else if ( materialDefaultAttributeValues !== undefined ) {\n \n           const value = materialDefaultAttributeValues[ name ];\n \n           if ( value !== undefined ) {\n \n             switch ( value.length ) {\n \n               case 2:\n                 gl.vertexAttrib2fv( programAttribute.location, value );\n                 break;\n \n               case 3:\n                 gl.vertexAttrib3fv( programAttribute.location, value );\n                 break;\n \n               case 4:\n                 gl.vertexAttrib4fv( programAttribute.location, value );\n                 break;\n \n               default:\n                 gl.vertexAttrib1fv( programAttribute.location, value );\n \n             }\n \n           }\n \n         }\n \n       }\n \n     }\n \n     disableUnusedAttributes();\n \n   }\n \n   function dispose() {\n \n     reset();\n \n     for ( const geometryId in bindingStates ) {\n \n       const programMap = bindingStates[ geometryId ];\n \n       for ( const programId in programMap ) {\n \n         const stateMap = programMap[ programId ];\n \n         for ( const wireframe in stateMap ) {\n \n           deleteVertexArrayObject( stateMap[ wireframe ].object );\n \n           delete stateMap[ wireframe ];\n \n         }\n \n         delete programMap[ programId ];\n \n       }\n \n       delete bindingStates[ geometryId ];\n \n     }\n \n   }\n \n   function releaseStatesOfGeometry( geometry ) {\n \n     if ( bindingStates[ geometry.id ] === undefined ) return;\n \n     const programMap = bindingStates[ geometry.id ];\n \n     for ( const programId in programMap ) {\n \n       const stateMap = programMap[ programId ];\n \n       for ( const wireframe in stateMap ) {\n \n         deleteVertexArrayObject( stateMap[ wireframe ].object );\n \n         delete stateMap[ wireframe ];\n \n       }\n \n       delete programMap[ programId ];\n \n     }\n \n     delete bindingStates[ geometry.id ];\n \n   }\n \n   function releaseStatesOfProgram( program ) {\n \n     for ( const geometryId in bindingStates ) {\n \n       const programMap = bindingStates[ geometryId ];\n \n       if ( programMap[ program.id ] === undefined ) continue;\n \n       const stateMap = programMap[ program.id ];\n \n       for ( const wireframe in stateMap ) {\n \n         deleteVertexArrayObject( stateMap[ wireframe ].object );\n \n         delete stateMap[ wireframe ];\n \n       }\n \n       delete programMap[ program.id ];\n \n     }\n \n   }\n \n   function reset() {\n \n     resetDefaultState();\n \n     if ( currentState === defaultState ) return;\n \n     currentState = defaultState;\n     bindVertexArrayObject( currentState.object );\n \n   }\n \n   // for backward-compatilibity\n \n   function resetDefaultState() {\n \n     defaultState.geometry = null;\n     defaultState.program = null;\n     defaultState.wireframe = false;\n \n   }\n \n   return {\n \n     setup: setup,\n     reset: reset,\n     resetDefaultState: resetDefaultState,\n     dispose: dispose,\n     releaseStatesOfGeometry: releaseStatesOfGeometry,\n     releaseStatesOfProgram: releaseStatesOfProgram,\n \n     initAttributes: initAttributes,\n     enableAttribute: enableAttribute,\n     disableUnusedAttributes: disableUnusedAttributes\n \n   };\n \n }\n \n function WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n \n   const isWebGL2 = capabilities.isWebGL2;\n \n   let mode;\n \n   function setMode( value ) {\n \n     mode = value;\n \n   }\n \n   function render( start, count ) {\n \n     gl.drawArrays( mode, start, count );\n \n     info.update( count, mode, 1 );\n \n   }\n \n   function renderInstances( start, count, primcount ) {\n \n     if ( primcount === 0 ) return;\n \n     let extension, methodName;\n \n     if ( isWebGL2 ) {\n \n       extension = gl;\n       methodName = 'drawArraysInstanced';\n \n     } else {\n \n       extension = extensions.get( 'ANGLE_instanced_arrays' );\n       methodName = 'drawArraysInstancedANGLE';\n \n       if ( extension === null ) {\n \n         console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n         return;\n \n       }\n \n     }\n \n     extension[ methodName ]( mode, start, count, primcount );\n \n     info.update( count, mode, primcount );\n \n   }\n \n   //\n \n   this.setMode = setMode;\n   this.render = render;\n   this.renderInstances = renderInstances;\n \n }\n \n function WebGLCapabilities( gl, extensions, parameters ) {\n \n   let maxAnisotropy;\n \n   function getMaxAnisotropy() {\n \n     if ( maxAnisotropy !== undefined ) return maxAnisotropy;\n \n     if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n \n       const extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n \n       maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n \n     } else {\n \n       maxAnisotropy = 0;\n \n     }\n \n     return maxAnisotropy;\n \n   }\n \n   function getMaxPrecision( precision ) {\n \n     if ( precision === 'highp' ) {\n \n       if ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&\n         gl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {\n \n         return 'highp';\n \n       }\n \n       precision = 'mediump';\n \n     }\n \n     if ( precision === 'mediump' ) {\n \n       if ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&\n         gl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {\n \n         return 'mediump';\n \n       }\n \n     }\n \n     return 'lowp';\n \n   }\n \n   /* eslint-disable no-undef */\n   const isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||\n     ( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );\n   /* eslint-enable no-undef */\n \n   let precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n   const maxPrecision = getMaxPrecision( precision );\n \n   if ( maxPrecision !== precision ) {\n \n     console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n     precision = maxPrecision;\n \n   }\n \n   const drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );\n \n   const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n \n   const maxTextures = gl.getParameter( 34930 );\n   const maxVertexTextures = gl.getParameter( 35660 );\n   const maxTextureSize = gl.getParameter( 3379 );\n   const maxCubemapSize = gl.getParameter( 34076 );\n \n   const maxAttributes = gl.getParameter( 34921 );\n   const maxVertexUniforms = gl.getParameter( 36347 );\n   const maxVaryings = gl.getParameter( 36348 );\n   const maxFragmentUniforms = gl.getParameter( 36349 );\n \n   const vertexTextures = maxVertexTextures > 0;\n   const floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );\n   const floatVertexTextures = vertexTextures && floatFragmentTextures;\n \n   const maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;\n \n   return {\n \n     isWebGL2: isWebGL2,\n \n     drawBuffers: drawBuffers,\n \n     getMaxAnisotropy: getMaxAnisotropy,\n     getMaxPrecision: getMaxPrecision,\n \n     precision: precision,\n     logarithmicDepthBuffer: logarithmicDepthBuffer,\n \n     maxTextures: maxTextures,\n     maxVertexTextures: maxVertexTextures,\n     maxTextureSize: maxTextureSize,\n     maxCubemapSize: maxCubemapSize,\n \n     maxAttributes: maxAttributes,\n     maxVertexUniforms: maxVertexUniforms,\n     maxVaryings: maxVaryings,\n     maxFragmentUniforms: maxFragmentUniforms,\n \n     vertexTextures: vertexTextures,\n     floatFragmentTextures: floatFragmentTextures,\n     floatVertexTextures: floatVertexTextures,\n \n     maxSamples: maxSamples\n \n   };\n \n }\n \n function WebGLClipping( properties ) {\n \n   const scope = this;\n \n   let globalState = null,\n     numGlobalPlanes = 0,\n     localClippingEnabled = false,\n     renderingShadows = false;\n \n   const plane = new Plane(),\n     viewNormalMatrix = new Matrix3(),\n \n     uniform = { value: null, needsUpdate: false };\n \n   this.uniform = uniform;\n   this.numPlanes = 0;\n   this.numIntersection = 0;\n \n   this.init = function ( planes, enableLocalClipping, camera ) {\n \n     const enabled =\n       planes.length !== 0 ||\n       enableLocalClipping ||\n       // enable state of previous frame - the clipping code has to\n       // run another frame in order to reset the state:\n       numGlobalPlanes !== 0 ||\n       localClippingEnabled;\n \n     localClippingEnabled = enableLocalClipping;\n \n     globalState = projectPlanes( planes, camera, 0 );\n     numGlobalPlanes = planes.length;\n \n     return enabled;\n \n   };\n \n   this.beginShadows = function () {\n \n     renderingShadows = true;\n     projectPlanes( null );\n \n   };\n \n   this.endShadows = function () {\n \n     renderingShadows = false;\n     resetGlobalState();\n \n   };\n \n   this.setState = function ( material, camera, useCache ) {\n \n     const planes = material.clippingPlanes,\n       clipIntersection = material.clipIntersection,\n       clipShadows = material.clipShadows;\n \n     const materialProperties = properties.get( material );\n \n     if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n \n       // there's no local clipping\n \n       if ( renderingShadows ) {\n \n         // there's no global clipping\n \n         projectPlanes( null );\n \n       } else {\n \n         resetGlobalState();\n \n       }\n \n     } else {\n \n       const nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n         lGlobal = nGlobal * 4;\n \n       let dstArray = materialProperties.clippingState || null;\n \n       uniform.value = dstArray; // ensure unique state\n \n       dstArray = projectPlanes( planes, camera, lGlobal, useCache );\n \n       for ( let i = 0; i !== lGlobal; ++ i ) {\n \n         dstArray[ i ] = globalState[ i ];\n \n       }\n \n       materialProperties.clippingState = dstArray;\n       this.numIntersection = clipIntersection ? this.numPlanes : 0;\n       this.numPlanes += nGlobal;\n \n     }\n \n \n   };\n \n   function resetGlobalState() {\n \n     if ( uniform.value !== globalState ) {\n \n       uniform.value = globalState;\n       uniform.needsUpdate = numGlobalPlanes > 0;\n \n     }\n \n     scope.numPlanes = numGlobalPlanes;\n     scope.numIntersection = 0;\n \n   }\n \n   function projectPlanes( planes, camera, dstOffset, skipTransform ) {\n \n     const nPlanes = planes !== null ? planes.length : 0;\n     let dstArray = null;\n \n     if ( nPlanes !== 0 ) {\n \n       dstArray = uniform.value;\n \n       if ( skipTransform !== true || dstArray === null ) {\n \n         const flatSize = dstOffset + nPlanes * 4,\n           viewMatrix = camera.matrixWorldInverse;\n \n         viewNormalMatrix.getNormalMatrix( viewMatrix );\n \n         if ( dstArray === null || dstArray.length < flatSize ) {\n \n           dstArray = new Float32Array( flatSize );\n \n         }\n \n         for ( let i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n \n           plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n \n           plane.normal.toArray( dstArray, i4 );\n           dstArray[ i4 + 3 ] = plane.constant;\n \n         }\n \n       }\n \n       uniform.value = dstArray;\n       uniform.needsUpdate = true;\n \n     }\n \n     scope.numPlanes = nPlanes;\n     scope.numIntersection = 0;\n \n     return dstArray;\n \n   }\n \n }\n \n function WebGLCubeMaps( renderer ) {\n \n   let cubemaps = new WeakMap();\n \n   function mapTextureMapping( texture, mapping ) {\n \n     if ( mapping === EquirectangularReflectionMapping ) {\n \n       texture.mapping = CubeReflectionMapping;\n \n     } else if ( mapping === EquirectangularRefractionMapping ) {\n \n       texture.mapping = CubeRefractionMapping;\n \n     }\n \n     return texture;\n \n   }\n \n   function get( texture ) {\n \n     if ( texture && texture.isTexture && texture.isRenderTargetTexture === false ) {\n \n       const mapping = texture.mapping;\n \n       if ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {\n \n         if ( cubemaps.has( texture ) ) {\n \n           const cubemap = cubemaps.get( texture ).texture;\n           return mapTextureMapping( cubemap, texture.mapping );\n \n         } else {\n \n           const image = texture.image;\n \n           if ( image && image.height > 0 ) {\n \n             const currentRenderTarget = renderer.getRenderTarget();\n \n             const renderTarget = new WebGLCubeRenderTarget( image.height / 2 );\n             renderTarget.fromEquirectangularTexture( renderer, texture );\n             cubemaps.set( texture, renderTarget );\n \n             renderer.setRenderTarget( currentRenderTarget );\n \n             texture.addEventListener( 'dispose', onTextureDispose );\n \n             return mapTextureMapping( renderTarget.texture, texture.mapping );\n \n           } else {\n \n             // image not yet ready. try the conversion next frame\n \n             return null;\n \n           }\n \n         }\n \n       }\n \n     }\n \n     return texture;\n \n   }\n \n   function onTextureDispose( event ) {\n \n     const texture = event.target;\n \n     texture.removeEventListener( 'dispose', onTextureDispose );\n \n     const cubemap = cubemaps.get( texture );\n \n     if ( cubemap !== undefined ) {\n \n       cubemaps.delete( texture );\n       cubemap.dispose();\n \n     }\n \n   }\n \n   function dispose() {\n \n     cubemaps = new WeakMap();\n \n   }\n \n   return {\n     get: get,\n     dispose: dispose\n   };\n \n }\n \n class OrthographicCamera extends Camera {\n \n   constructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {\n \n     super();\n \n     this.type = 'OrthographicCamera';\n \n     this.zoom = 1;\n     this.view = null;\n \n     this.left = left;\n     this.right = right;\n     this.top = top;\n     this.bottom = bottom;\n \n     this.near = near;\n     this.far = far;\n \n     this.updateProjectionMatrix();\n \n   }\n \n   copy( source, recursive ) {\n \n     super.copy( source, recursive );\n \n     this.left = source.left;\n     this.right = source.right;\n     this.top = source.top;\n     this.bottom = source.bottom;\n     this.near = source.near;\n     this.far = source.far;\n \n     this.zoom = source.zoom;\n     this.view = source.view === null ? null : Object.assign( {}, source.view );\n \n     return this;\n \n   }\n \n   setViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n \n     if ( this.view === null ) {\n \n       this.view = {\n         enabled: true,\n         fullWidth: 1,\n         fullHeight: 1,\n         offsetX: 0,\n         offsetY: 0,\n         width: 1,\n         height: 1\n       };\n \n     }\n \n     this.view.enabled = true;\n     this.view.fullWidth = fullWidth;\n     this.view.fullHeight = fullHeight;\n     this.view.offsetX = x;\n     this.view.offsetY = y;\n     this.view.width = width;\n     this.view.height = height;\n \n     this.updateProjectionMatrix();\n \n   }\n \n   clearViewOffset() {\n \n     if ( this.view !== null ) {\n \n       this.view.enabled = false;\n \n     }\n \n     this.updateProjectionMatrix();\n \n   }\n \n   updateProjectionMatrix() {\n \n     const dx = ( this.right - this.left ) / ( 2 * this.zoom );\n     const dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n     const cx = ( this.right + this.left ) / 2;\n     const cy = ( this.top + this.bottom ) / 2;\n \n     let left = cx - dx;\n     let right = cx + dx;\n     let top = cy + dy;\n     let bottom = cy - dy;\n \n     if ( this.view !== null && this.view.enabled ) {\n \n       const scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\n       const scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\n \n       left += scaleW * this.view.offsetX;\n       right = left + scaleW * this.view.width;\n       top -= scaleH * this.view.offsetY;\n       bottom = top - scaleH * this.view.height;\n \n     }\n \n     this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n \n     this.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n \n   }\n \n   toJSON( meta ) {\n \n     const data = super.toJSON( meta );\n \n     data.object.zoom = this.zoom;\n     data.object.left = this.left;\n     data.object.right = this.right;\n     data.object.top = this.top;\n     data.object.bottom = this.bottom;\n     data.object.near = this.near;\n     data.object.far = this.far;\n \n     if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n \n     return data;\n \n   }\n \n }\n \n OrthographicCamera.prototype.isOrthographicCamera = true;\n \n class RawShaderMaterial extends ShaderMaterial {\n \n   constructor( parameters ) {\n \n     super( parameters );\n \n     this.type = 'RawShaderMaterial';\n \n   }\n \n }\n \n RawShaderMaterial.prototype.isRawShaderMaterial = true;\n \n const LOD_MIN = 4;\n const LOD_MAX = 8;\n const SIZE_MAX = Math.pow( 2, LOD_MAX );\n \n // The standard deviations (radians) associated with the extra mips. These are\n // chosen to approximate a Trowbridge-Reitz distribution function times the\n // geometric shadowing function. These sigma values squared must match the\n // variance #defines in cube_uv_reflection_fragment.glsl.js.\n const EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\n \n const TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\n \n // The maximum length of the blur for loop. Smaller sigmas will use fewer\n // samples and exit early, but not recompile the shader.\n const MAX_SAMPLES = 20;\n \n const ENCODINGS = {\n   [ LinearEncoding ]: 0,\n   [ sRGBEncoding ]: 1,\n   [ RGBEEncoding ]: 2,\n   [ RGBM7Encoding ]: 3,\n   [ RGBM16Encoding ]: 4,\n   [ RGBDEncoding ]: 5,\n   [ GammaEncoding ]: 6\n };\n \n const _flatCamera = /*@__PURE__*/ new OrthographicCamera();\n const { _lodPlanes, _sizeLods, _sigmas } = /*@__PURE__*/ _createPlanes();\n const _clearColor = /*@__PURE__*/ new Color();\n let _oldTarget = null;\n \n // Golden Ratio\n const PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\n const INV_PHI = 1 / PHI;\n \n // Vertices of a dodecahedron (except the opposites, which represent the\n // same axis), used as axis directions evenly spread on a sphere.\n const _axisDirections = [\n   /*@__PURE__*/ new Vector3( 1, 1, 1 ),\n   /*@__PURE__*/ new Vector3( - 1, 1, 1 ),\n   /*@__PURE__*/ new Vector3( 1, 1, - 1 ),\n   /*@__PURE__*/ new Vector3( - 1, 1, - 1 ),\n   /*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),\n   /*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),\n   /*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),\n   /*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),\n   /*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),\n   /*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ) ];\n \n /**\n  * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n  * (PMREM) from a cubeMap environment texture. This allows different levels of\n  * blur to be quickly accessed based on material roughness. It is packed into a\n  * special CubeUV format that allows us to perform custom interpolation so that\n  * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n  * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n  * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n  * higher roughness levels. In this way we maintain resolution to smoothly\n  * interpolate diffuse lighting while limiting sampling computation.\n  *\n  * Paper: Fast, Accurate Image-Based Lighting\n  * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\n */\n \n class PMREMGenerator {\n \n   constructor( renderer ) {\n \n     this._renderer = renderer;\n     this._pingPongRenderTarget = null;\n \n     this._blurMaterial = _getBlurShader( MAX_SAMPLES );\n     this._equirectShader = null;\n     this._cubemapShader = null;\n \n     this._compileMaterial( this._blurMaterial );\n \n   }\n \n   /**\n    * Generates a PMREM from a supplied Scene, which can be faster than using an\n    * image if networking bandwidth is low. Optional sigma specifies a blur radius\n    * in radians to be applied to the scene before PMREM generation. Optional near\n    * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n    * is placed at the origin).\n    */\n   fromScene( scene, sigma = 0, near = 0.1, far = 100 ) {\n \n     _oldTarget = this._renderer.getRenderTarget();\n     const cubeUVRenderTarget = this._allocateTargets();\n \n     this._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );\n     if ( sigma > 0 ) {\n \n       this._blur( cubeUVRenderTarget, 0, 0, sigma );\n \n     }\n \n     this._applyPMREM( cubeUVRenderTarget );\n     this._cleanup( cubeUVRenderTarget );\n \n     return cubeUVRenderTarget;\n \n   }\n \n   /**\n    * Generates a PMREM from an equirectangular texture, which can be either LDR\n    * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n    * as this matches best with the 256 x 256 cubemap output.\n    */\n   fromEquirectangular( equirectangular ) {\n \n     return this._fromTexture( equirectangular );\n \n   }\n \n   /**\n    * Generates a PMREM from an cubemap texture, which can be either LDR\n    * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n    * as this matches best with the 256 x 256 cubemap output.\n    */\n   fromCubemap( cubemap ) {\n \n     return this._fromTexture( cubemap );\n \n   }\n \n   /**\n    * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n    * your texture's network fetch for increased concurrency.\n    */\n   compileCubemapShader() {\n \n     if ( this._cubemapShader === null ) {\n \n       this._cubemapShader = _getCubemapShader();\n       this._compileMaterial( this._cubemapShader );\n \n     }\n \n   }\n \n   /**\n    * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n    * your texture's network fetch for increased concurrency.\n    */\n   compileEquirectangularShader() {\n \n     if ( this._equirectShader === null ) {\n \n       this._equirectShader = _getEquirectShader();\n       this._compileMaterial( this._equirectShader );\n \n     }\n \n   }\n \n   /**\n    * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n    * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n    * one of them will cause any others to also become unusable.\n    */\n   dispose() {\n \n     this._blurMaterial.dispose();\n \n     if ( this._cubemapShader !== null ) this._cubemapShader.dispose();\n     if ( this._equirectShader !== null ) this._equirectShader.dispose();\n \n     for ( let i = 0; i < _lodPlanes.length; i ++ ) {\n \n       _lodPlanes[ i ].dispose();\n \n     }\n \n   }\n \n   // private interface\n \n   _cleanup( outputTarget ) {\n \n     this._pingPongRenderTarget.dispose();\n     this._renderer.setRenderTarget( _oldTarget );\n     outputTarget.scissorTest = false;\n     _setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );\n \n   }\n \n   _fromTexture( texture ) {\n \n     _oldTarget = this._renderer.getRenderTarget();\n     const cubeUVRenderTarget = this._allocateTargets( texture );\n     this._textureToCubeUV( texture, cubeUVRenderTarget );\n     this._applyPMREM( cubeUVRenderTarget );\n     this._cleanup( cubeUVRenderTarget );\n \n     return cubeUVRenderTarget;\n \n   }\n \n   _allocateTargets( texture ) { // warning: null texture is valid\n \n     const params = {\n       magFilter: NearestFilter,\n       minFilter: NearestFilter,\n       generateMipmaps: false,\n       type: UnsignedByteType,\n       format: RGBEFormat,\n       encoding: _isLDR( texture ) ? texture.encoding : RGBEEncoding,\n       depthBuffer: false\n     };\n \n     const cubeUVRenderTarget = _createRenderTarget( params );\n     cubeUVRenderTarget.depthBuffer = texture ? false : true;\n     this._pingPongRenderTarget = _createRenderTarget( params );\n     return cubeUVRenderTarget;\n \n   }\n \n   _compileMaterial( material ) {\n \n     const tmpMesh = new Mesh( _lodPlanes[ 0 ], material );\n     this._renderer.compile( tmpMesh, _flatCamera );\n \n   }\n \n   _sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {\n \n     const fov = 90;\n     const aspect = 1;\n     const cubeCamera = new PerspectiveCamera( fov, aspect, near, far );\n     const upSign = [ 1, - 1, 1, 1, 1, 1 ];\n     const forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];\n     const renderer = this._renderer;\n \n     const originalAutoClear = renderer.autoClear;\n     const outputEncoding = renderer.outputEncoding;\n     const toneMapping = renderer.toneMapping;\n     renderer.getClearColor( _clearColor );\n \n     renderer.toneMapping = NoToneMapping;\n     renderer.outputEncoding = LinearEncoding;\n     renderer.autoClear = false;\n \n     const backgroundMaterial = new MeshBasicMaterial( {\n       name: 'PMREM.Background',\n       side: BackSide,\n       depthWrite: false,\n       depthTest: false,\n     } );\n \n     const backgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );\n \n     let useSolidColor = false;\n     const background = scene.background;\n \n     if ( background ) {\n \n       if ( background.isColor ) {\n \n         backgroundMaterial.color.copy( background );\n         scene.background = null;\n         useSolidColor = true;\n \n       }\n \n     } else {\n \n       backgroundMaterial.color.copy( _clearColor );\n       useSolidColor = true;\n \n     }\n \n     for ( let i = 0; i < 6; i ++ ) {\n \n       const col = i % 3;\n       if ( col == 0 ) {\n \n         cubeCamera.up.set( 0, upSign[ i ], 0 );\n         cubeCamera.lookAt( forwardSign[ i ], 0, 0 );\n \n       } else if ( col == 1 ) {\n \n         cubeCamera.up.set( 0, 0, upSign[ i ] );\n         cubeCamera.lookAt( 0, forwardSign[ i ], 0 );\n \n       } else {\n \n         cubeCamera.up.set( 0, upSign[ i ], 0 );\n         cubeCamera.lookAt( 0, 0, forwardSign[ i ] );\n \n       }\n \n       _setViewport( cubeUVRenderTarget,\n         col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX );\n       renderer.setRenderTarget( cubeUVRenderTarget );\n \n       if ( useSolidColor ) {\n \n         renderer.render( backgroundBox, cubeCamera );\n \n       }\n \n       renderer.render( scene, cubeCamera );\n \n     }\n \n     backgroundBox.geometry.dispose();\n     backgroundBox.material.dispose();\n \n     renderer.toneMapping = toneMapping;\n     renderer.outputEncoding = outputEncoding;\n     renderer.autoClear = originalAutoClear;\n     scene.background = background;\n \n   }\n \n   _setEncoding( uniform, texture ) {\n \n     /* if ( this._renderer.capabilities.isWebGL2 === true && texture.format === RGBAFormat && texture.type === UnsignedByteType && texture.encoding === sRGBEncoding ) {\n \n       uniform.value = ENCODINGS[ LinearEncoding ];\n \n     } else {\n \n       uniform.value = ENCODINGS[ texture.encoding ];\n \n     } */\n \n     uniform.value = ENCODINGS[ texture.encoding ];\n \n   }\n \n   _textureToCubeUV( texture, cubeUVRenderTarget ) {\n \n     const renderer = this._renderer;\n \n     const isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );\n \n     if ( isCubeTexture ) {\n \n       if ( this._cubemapShader == null ) {\n \n         this._cubemapShader = _getCubemapShader();\n \n       }\n \n     } else {\n \n       if ( this._equirectShader == null ) {\n \n         this._equirectShader = _getEquirectShader();\n \n       }\n \n     }\n \n     const material = isCubeTexture ? this._cubemapShader : this._equirectShader;\n     const mesh = new Mesh( _lodPlanes[ 0 ], material );\n \n     const uniforms = material.uniforms;\n \n     uniforms[ 'envMap' ].value = texture;\n \n     if ( ! isCubeTexture ) {\n \n       uniforms[ 'texelSize' ].value.set( 1.0 / texture.image.width, 1.0 / texture.image.height );\n \n     }\n \n     this._setEncoding( uniforms[ 'inputEncoding' ], texture );\n     this._setEncoding( uniforms[ 'outputEncoding' ], cubeUVRenderTarget.texture );\n \n     _setViewport( cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX );\n \n     renderer.setRenderTarget( cubeUVRenderTarget );\n     renderer.render( mesh, _flatCamera );\n \n   }\n \n   _applyPMREM( cubeUVRenderTarget ) {\n \n     const renderer = this._renderer;\n     const autoClear = renderer.autoClear;\n     renderer.autoClear = false;\n \n     for ( let i = 1; i < TOTAL_LODS; i ++ ) {\n \n       const sigma = Math.sqrt( _sigmas[ i ] * _sigmas[ i ] - _sigmas[ i - 1 ] * _sigmas[ i - 1 ] );\n \n       const poleAxis = _axisDirections[ ( i - 1 ) % _axisDirections.length ];\n \n       this._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\n \n     }\n \n     renderer.autoClear = autoClear;\n \n   }\n \n   /**\n    * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n    * vertically and horizontally, but this breaks down on a cube. Here we apply\n    * the blur latitudinally (around the poles), and then longitudinally (towards\n    * the poles) to approximate the orthogonally-separable blur. It is least\n    * accurate at the poles, but still does a decent job.\n    */\n   _blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\n \n     const pingPongRenderTarget = this._pingPongRenderTarget;\n \n     this._halfBlur(\n       cubeUVRenderTarget,\n       pingPongRenderTarget,\n       lodIn,\n       lodOut,\n       sigma,\n       'latitudinal',\n       poleAxis );\n \n     this._halfBlur(\n       pingPongRenderTarget,\n       cubeUVRenderTarget,\n       lodOut,\n       lodOut,\n       sigma,\n       'longitudinal',\n       poleAxis );\n \n   }\n \n   _halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\n \n     const renderer = this._renderer;\n     const blurMaterial = this._blurMaterial;\n \n     if ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\n \n       console.error(\n         'blur direction must be either latitudinal or longitudinal!' );\n \n     }\n \n     // Number of standard deviations at which to cut off the discrete approximation.\n     const STANDARD_DEVIATIONS = 3;\n \n     const blurMesh = new Mesh( _lodPlanes[ lodOut ], blurMaterial );\n     const blurUniforms = blurMaterial.uniforms;\n \n     const pixels = _sizeLods[ lodIn ] - 1;\n     const radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\n     const sigmaPixels = sigmaRadians / radiansPerPixel;\n     const samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\n \n     if ( samples > MAX_SAMPLES ) {\n \n       console.warn( `sigmaRadians, ${\n         sigmaRadians}, is too large and will clip, as it requested ${\n         samples} samples when the maximum is set to ${MAX_SAMPLES}` );\n \n     }\n \n     const weights = [];\n     let sum = 0;\n \n     for ( let i = 0; i < MAX_SAMPLES; ++ i ) {\n \n       const x = i / sigmaPixels;\n       const weight = Math.exp( - x * x / 2 );\n       weights.push( weight );\n \n       if ( i == 0 ) {\n \n         sum += weight;\n \n       } else if ( i < samples ) {\n \n         sum += 2 * weight;\n \n       }\n \n     }\n \n     for ( let i = 0; i < weights.length; i ++ ) {\n \n       weights[ i ] = weights[ i ] / sum;\n \n     }\n \n     blurUniforms[ 'envMap' ].value = targetIn.texture;\n     blurUniforms[ 'samples' ].value = samples;\n     blurUniforms[ 'weights' ].value = weights;\n     blurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';\n \n     if ( poleAxis ) {\n \n       blurUniforms[ 'poleAxis' ].value = poleAxis;\n \n     }\n \n     blurUniforms[ 'dTheta' ].value = radiansPerPixel;\n     blurUniforms[ 'mipInt' ].value = LOD_MAX - lodIn;\n \n     this._setEncoding( blurUniforms[ 'inputEncoding' ], targetIn.texture );\n     this._setEncoding( blurUniforms[ 'outputEncoding' ], targetIn.texture );\n \n     const outputSize = _sizeLods[ lodOut ];\n     const x = 3 * Math.max( 0, SIZE_MAX - 2 * outputSize );\n     const y = ( lodOut === 0 ? 0 : 2 * SIZE_MAX ) + 2 * outputSize * ( lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0 );\n \n     _setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\n     renderer.setRenderTarget( targetOut );\n     renderer.render( blurMesh, _flatCamera );\n \n   }\n \n }\n \n function _isLDR( texture ) {\n \n   if ( texture === undefined || texture.type !== UnsignedByteType ) return false;\n \n   return texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;\n \n }\n \n function _createPlanes() {\n \n   const _lodPlanes = [];\n   const _sizeLods = [];\n   const _sigmas = [];\n \n   let lod = LOD_MAX;\n \n   for ( let i = 0; i < TOTAL_LODS; i ++ ) {\n \n     const sizeLod = Math.pow( 2, lod );\n     _sizeLods.push( sizeLod );\n     let sigma = 1.0 / sizeLod;\n \n     if ( i > LOD_MAX - LOD_MIN ) {\n \n       sigma = EXTRA_LOD_SIGMA[ i - LOD_MAX + LOD_MIN - 1 ];\n \n     } else if ( i == 0 ) {\n \n       sigma = 0;\n \n     }\n \n     _sigmas.push( sigma );\n \n     const texelSize = 1.0 / ( sizeLod - 1 );\n     const min = - texelSize / 2;\n     const max = 1 + texelSize / 2;\n     const uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\n \n     const cubeFaces = 6;\n     const vertices = 6;\n     const positionSize = 3;\n     const uvSize = 2;\n     const faceIndexSize = 1;\n \n     const position = new Float32Array( positionSize * vertices * cubeFaces );\n     const uv = new Float32Array( uvSize * vertices * cubeFaces );\n     const faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\n \n     for ( let face = 0; face < cubeFaces; face ++ ) {\n \n       const x = ( face % 3 ) * 2 / 3 - 1;\n       const y = face > 2 ? 0 : - 1;\n       const coordinates = [\n         x, y, 0,\n         x + 2 / 3, y, 0,\n         x + 2 / 3, y + 1, 0,\n         x, y, 0,\n         x + 2 / 3, y + 1, 0,\n         x, y + 1, 0\n       ];\n       position.set( coordinates, positionSize * vertices * face );\n       uv.set( uv1, uvSize * vertices * face );\n       const fill = [ face, face, face, face, face, face ];\n       faceIndex.set( fill, faceIndexSize * vertices * face );\n \n     }\n \n     const planes = new BufferGeometry();\n     planes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\n     planes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\n     planes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\n     _lodPlanes.push( planes );\n \n     if ( lod > LOD_MIN ) {\n \n       lod --;\n \n     }\n \n   }\n \n   return { _lodPlanes, _sizeLods, _sigmas };\n \n }\n \n function _createRenderTarget( params ) {\n \n   const cubeUVRenderTarget = new WebGLRenderTarget( 3 * SIZE_MAX, 3 * SIZE_MAX, params );\n   cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n   cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n   cubeUVRenderTarget.scissorTest = true;\n   return cubeUVRenderTarget;\n \n }\n \n function _setViewport( target, x, y, width, height ) {\n \n   target.viewport.set( x, y, width, height );\n   target.scissor.set( x, y, width, height );\n \n }\n \n function _getBlurShader( maxSamples ) {\n \n   const weights = new Float32Array( maxSamples );\n   const poleAxis = new Vector3( 0, 1, 0 );\n   const shaderMaterial = new RawShaderMaterial( {\n \n     name: 'SphericalGaussianBlur',\n \n     defines: { 'n': maxSamples },\n \n     uniforms: {\n       'envMap': { value: null },\n       'samples': { value: 1 },\n       'weights': { value: weights },\n       'latitudinal': { value: false },\n       'dTheta': { value: 0 },\n       'mipInt': { value: 0 },\n       'poleAxis': { value: poleAxis },\n       'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n       'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n     },\n \n     vertexShader: _getCommonVertexShader(),\n \n     fragmentShader: /* glsl */`\n \n       precision mediump float;\n       precision mediump int;\n \n       varying vec3 vOutputDirection;\n \n       uniform sampler2D envMap;\n       uniform int samples;\n       uniform float weights[ n ];\n       uniform bool latitudinal;\n       uniform float dTheta;\n       uniform float mipInt;\n       uniform vec3 poleAxis;\n \n       ${ _getEncodings() }\n \n       #define ENVMAP_TYPE_CUBE_UV\n       #include <cube_uv_reflection_fragment>\n \n       vec3 getSample( float theta, vec3 axis ) {\n \n         float cosTheta = cos( theta );\n         // Rodrigues' axis-angle rotation\n         vec3 sampleDirection = vOutputDirection * cosTheta\n           + cross( axis, vOutputDirection ) * sin( theta )\n           + axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n \n         return bilinearCubeUV( envMap, sampleDirection, mipInt );\n \n       }\n \n       void main() {\n \n         vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n \n         if ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n \n           axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n \n         }\n \n         axis = normalize( axis );\n \n         gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n         gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n \n         for ( int i = 1; i < n; i++ ) {\n \n           if ( i >= samples ) {\n \n             break;\n \n           }\n \n           float theta = dTheta * float( i );\n           gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n           gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n \n         }\n \n         gl_FragColor = linearToOutputTexel( gl_FragColor );\n \n       }\n     `,\n \n     blending: NoBlending,\n     depthTest: false,\n     depthWrite: false\n \n   } );\n \n   return shaderMaterial;\n \n }\n \n function _getEquirectShader() {\n \n   const texelSize = new Vector2( 1, 1 );\n   const shaderMaterial = new RawShaderMaterial( {\n \n     name: 'EquirectangularToCubeUV',\n \n     uniforms: {\n       'envMap': { value: null },\n       'texelSize': { value: texelSize },\n       'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n       'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n     },\n \n     vertexShader: _getCommonVertexShader(),\n \n     fragmentShader: /* glsl */`\n \n       precision mediump float;\n       precision mediump int;\n \n       varying vec3 vOutputDirection;\n \n       uniform sampler2D envMap;\n       uniform vec2 texelSize;\n \n       ${ _getEncodings() }\n \n       #include <common>\n \n       void main() {\n \n         gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n \n         vec3 outputDirection = normalize( vOutputDirection );\n         vec2 uv = equirectUv( outputDirection );\n \n         vec2 f = fract( uv / texelSize - 0.5 );\n         uv -= f * texelSize;\n         vec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n         uv.x += texelSize.x;\n         vec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n         uv.y += texelSize.y;\n         vec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n         uv.x -= texelSize.x;\n         vec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n \n         vec3 tm = mix( tl, tr, f.x );\n         vec3 bm = mix( bl, br, f.x );\n         gl_FragColor.rgb = mix( tm, bm, f.y );\n \n         gl_FragColor = linearToOutputTexel( gl_FragColor );\n \n       }\n     `,\n \n     blending: NoBlending,\n     depthTest: false,\n     depthWrite: false\n \n   } );\n \n   return shaderMaterial;\n \n }\n \n function _getCubemapShader() {\n \n   const shaderMaterial = new RawShaderMaterial( {\n \n     name: 'CubemapToCubeUV',\n \n     uniforms: {\n       'envMap': { value: null },\n       'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n       'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n     },\n \n     vertexShader: _getCommonVertexShader(),\n \n     fragmentShader: /* glsl */`\n \n       precision mediump float;\n       precision mediump int;\n \n       varying vec3 vOutputDirection;\n \n       uniform samplerCube envMap;\n \n       ${ _getEncodings() }\n \n       void main() {\n \n         gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n         gl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n         gl_FragColor = linearToOutputTexel( gl_FragColor );\n \n       }\n     `,\n \n     blending: NoBlending,\n     depthTest: false,\n     depthWrite: false\n \n   } );\n \n   return shaderMaterial;\n \n }\n \n function _getCommonVertexShader() {\n \n   return /* glsl */`\n \n     precision mediump float;\n     precision mediump int;\n \n     attribute vec3 position;\n     attribute vec2 uv;\n     attribute float faceIndex;\n \n     varying vec3 vOutputDirection;\n \n     // RH coordinate system; PMREM face-indexing convention\n     vec3 getDirection( vec2 uv, float face ) {\n \n       uv = 2.0 * uv - 1.0;\n \n       vec3 direction = vec3( uv, 1.0 );\n \n       if ( face == 0.0 ) {\n \n         direction = direction.zyx; // ( 1, v, u ) pos x\n \n       } else if ( face == 1.0 ) {\n \n         direction = direction.xzy;\n         direction.xz *= -1.0; // ( -u, 1, -v ) pos y\n \n       } else if ( face == 2.0 ) {\n \n         direction.x *= -1.0; // ( -u, v, 1 ) pos z\n \n       } else if ( face == 3.0 ) {\n \n         direction = direction.zyx;\n         direction.xz *= -1.0; // ( -1, v, -u ) neg x\n \n       } else if ( face == 4.0 ) {\n \n         direction = direction.xzy;\n         direction.xy *= -1.0; // ( -u, -1, v ) neg y\n \n       } else if ( face == 5.0 ) {\n \n         direction.z *= -1.0; // ( u, v, -1 ) neg z\n \n       }\n \n       return direction;\n \n     }\n \n     void main() {\n \n       vOutputDirection = getDirection( uv, faceIndex );\n       gl_Position = vec4( position, 1.0 );\n \n     }\n   `;\n \n }\n \n function _getEncodings() {\n \n   return /* glsl */`\n \n     uniform int inputEncoding;\n     uniform int outputEncoding;\n \n     #include <encodings_pars_fragment>\n \n     vec4 inputTexelToLinear( vec4 value ) {\n \n       if ( inputEncoding == 0 ) {\n \n         return value;\n \n       } else if ( inputEncoding == 1 ) {\n \n         return sRGBToLinear( value );\n \n       } else if ( inputEncoding == 2 ) {\n \n         return RGBEToLinear( value );\n \n       } else if ( inputEncoding == 3 ) {\n \n         return RGBMToLinear( value, 7.0 );\n \n       } else if ( inputEncoding == 4 ) {\n \n         return RGBMToLinear( value, 16.0 );\n \n       } else if ( inputEncoding == 5 ) {\n \n         return RGBDToLinear( value, 256.0 );\n \n       } else {\n \n         return GammaToLinear( value, 2.2 );\n \n       }\n \n     }\n \n     vec4 linearToOutputTexel( vec4 value ) {\n \n       if ( outputEncoding == 0 ) {\n \n         return value;\n \n       } else if ( outputEncoding == 1 ) {\n \n         return LinearTosRGB( value );\n \n       } else if ( outputEncoding == 2 ) {\n \n         return LinearToRGBE( value );\n \n       } else if ( outputEncoding == 3 ) {\n \n         return LinearToRGBM( value, 7.0 );\n \n       } else if ( outputEncoding == 4 ) {\n \n         return LinearToRGBM( value, 16.0 );\n \n       } else if ( outputEncoding == 5 ) {\n \n         return LinearToRGBD( value, 256.0 );\n \n       } else {\n \n         return LinearToGamma( value, 2.2 );\n \n       }\n \n     }\n \n     vec4 envMapTexelToLinear( vec4 color ) {\n \n       return inputTexelToLinear( color );\n \n     }\n   `;\n \n }\n \n function WebGLCubeUVMaps( renderer ) {\n \n   let cubeUVmaps = new WeakMap();\n \n   let pmremGenerator = null;\n \n   function get( texture ) {\n \n     if ( texture && texture.isTexture && texture.isRenderTargetTexture === false ) {\n \n       const mapping = texture.mapping;\n \n       const isEquirectMap = ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping );\n       const isCubeMap = ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );\n \n       if ( isEquirectMap || isCubeMap ) {\n \n         // equirect/cube map to cubeUV conversion\n \n         if ( cubeUVmaps.has( texture ) ) {\n \n           return cubeUVmaps.get( texture ).texture;\n \n         } else {\n \n           const image = texture.image;\n \n           if ( ( isEquirectMap && image && image.height > 0 ) || ( isCubeMap && image && isCubeTextureComplete( image ) ) ) {\n \n             const currentRenderTarget = renderer.getRenderTarget();\n \n             if ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );\n \n             const renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture ) : pmremGenerator.fromCubemap( texture );\n             cubeUVmaps.set( texture, renderTarget );\n \n             renderer.setRenderTarget( currentRenderTarget );\n \n             texture.addEventListener( 'dispose', onTextureDispose );\n \n             return renderTarget.texture;\n \n           } else {\n \n             // image not yet ready. try the conversion next frame\n \n             return null;\n \n           }\n \n         }\n \n       }\n \n     }\n \n     return texture;\n \n   }\n \n   function isCubeTextureComplete( image ) {\n \n     let count = 0;\n     const length = 6;\n \n     for ( let i = 0; i < length; i ++ ) {\n \n       if ( image[ i ] !== undefined ) count ++;\n \n     }\n \n     return count === length;\n \n \n   }\n \n   function onTextureDispose( event ) {\n \n     const texture = event.target;\n \n     texture.removeEventListener( 'dispose', onTextureDispose );\n \n     const cubemapUV = cubeUVmaps.get( texture );\n \n     if ( cubemapUV !== undefined ) {\n \n       cubeUVmaps.delete( texture );\n       cubemapUV.dispose();\n \n     }\n \n   }\n \n   function dispose() {\n \n     cubeUVmaps = new WeakMap();\n \n     if ( pmremGenerator !== null ) {\n \n       pmremGenerator.dispose();\n       pmremGenerator = null;\n \n     }\n \n   }\n \n   return {\n     get: get,\n     dispose: dispose\n   };\n \n }\n \n function WebGLExtensions( gl ) {\n \n   const extensions = {};\n \n   function getExtension( name ) {\n \n     if ( extensions[ name ] !== undefined ) {\n \n       return extensions[ name ];\n \n     }\n \n     let extension;\n \n     switch ( name ) {\n \n       case 'WEBGL_depth_texture':\n         extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n         break;\n \n       case 'EXT_texture_filter_anisotropic':\n         extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n         break;\n \n       case 'WEBGL_compressed_texture_s3tc':\n         extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n         break;\n \n       case 'WEBGL_compressed_texture_pvrtc':\n         extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n         break;\n \n       default:\n         extension = gl.getExtension( name );\n \n     }\n \n     extensions[ name ] = extension;\n \n     return extension;\n \n   }\n \n   return {\n \n     has: function ( name ) {\n \n       return getExtension( name ) !== null;\n \n     },\n \n     init: function ( capabilities ) {\n \n       if ( capabilities.isWebGL2 ) {\n \n         getExtension( 'EXT_color_buffer_float' );\n \n       } else {\n \n         getExtension( 'WEBGL_depth_texture' );\n         getExtension( 'OES_texture_float' );\n         getExtension( 'OES_texture_half_float' );\n         getExtension( 'OES_texture_half_float_linear' );\n         getExtension( 'OES_standard_derivatives' );\n         getExtension( 'OES_element_index_uint' );\n         getExtension( 'OES_vertex_array_object' );\n         getExtension( 'ANGLE_instanced_arrays' );\n \n       }\n \n       getExtension( 'OES_texture_float_linear' );\n       getExtension( 'EXT_color_buffer_half_float' );\n       getExtension( 'WEBGL_multisampled_render_to_texture' );\n \n     },\n \n     get: function ( name ) {\n \n       const extension = getExtension( name );\n \n       if ( extension === null ) {\n \n         console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n \n       }\n \n       return extension;\n \n     }\n \n   };\n \n }\n \n function WebGLGeometries( gl, attributes, info, bindingStates ) {\n \n   const geometries = {};\n   const wireframeAttributes = new WeakMap();\n \n   function onGeometryDispose( event ) {\n \n     const geometry = event.target;\n \n     if ( geometry.index !== null ) {\n \n       attributes.remove( geometry.index );\n \n     }\n \n     for ( const name in geometry.attributes ) {\n \n       attributes.remove( geometry.attributes[ name ] );\n \n     }\n \n     geometry.removeEventListener( 'dispose', onGeometryDispose );\n \n     delete geometries[ geometry.id ];\n \n     const attribute = wireframeAttributes.get( geometry );\n \n     if ( attribute ) {\n \n       attributes.remove( attribute );\n       wireframeAttributes.delete( geometry );\n \n     }\n \n     bindingStates.releaseStatesOfGeometry( geometry );\n \n     if ( geometry.isInstancedBufferGeometry === true ) {\n \n       delete geometry._maxInstanceCount;\n \n     }\n \n     //\n \n     info.memory.geometries --;\n \n   }\n \n   function get( object, geometry ) {\n \n     if ( geometries[ geometry.id ] === true ) return geometry;\n \n     geometry.addEventListener( 'dispose', onGeometryDispose );\n \n     geometries[ geometry.id ] = true;\n \n     info.memory.geometries ++;\n \n     return geometry;\n \n   }\n \n   function update( geometry ) {\n \n     const geometryAttributes = geometry.attributes;\n \n     // Updating index buffer in VAO now. See WebGLBindingStates.\n \n     for ( const name in geometryAttributes ) {\n \n       attributes.update( geometryAttributes[ name ], 34962 );\n \n     }\n \n     // morph targets\n \n     const morphAttributes = geometry.morphAttributes;\n \n     for ( const name in morphAttributes ) {\n \n       const array = morphAttributes[ name ];\n \n       for ( let i = 0, l = array.length; i < l; i ++ ) {\n \n         attributes.update( array[ i ], 34962 );\n \n       }\n \n     }\n \n   }\n \n   function updateWireframeAttribute( geometry ) {\n \n     const indices = [];\n \n     const geometryIndex = geometry.index;\n     const geometryPosition = geometry.attributes.position;\n     let version = 0;\n \n     if ( geometryIndex !== null ) {\n \n       const array = geometryIndex.array;\n       version = geometryIndex.version;\n \n       for ( let i = 0, l = array.length; i < l; i += 3 ) {\n \n         const a = array[ i + 0 ];\n         const b = array[ i + 1 ];\n         const c = array[ i + 2 ];\n \n         indices.push( a, b, b, c, c, a );\n \n       }\n \n     } else {\n \n       const array = geometryPosition.array;\n       version = geometryPosition.version;\n \n       for ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n \n         const a = i + 0;\n         const b = i + 1;\n         const c = i + 2;\n \n         indices.push( a, b, b, c, c, a );\n \n       }\n \n     }\n \n     const attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n     attribute.version = version;\n \n     // Updating index buffer in VAO now. See WebGLBindingStates\n \n     //\n \n     const previousAttribute = wireframeAttributes.get( geometry );\n \n     if ( previousAttribute ) attributes.remove( previousAttribute );\n \n     //\n \n     wireframeAttributes.set( geometry, attribute );\n \n   }\n \n   function getWireframeAttribute( geometry ) {\n \n     const currentAttribute = wireframeAttributes.get( geometry );\n \n     if ( currentAttribute ) {\n \n       const geometryIndex = geometry.index;\n \n       if ( geometryIndex !== null ) {\n \n         // if the attribute is obsolete, create a new one\n \n         if ( currentAttribute.version < geometryIndex.version ) {\n \n           updateWireframeAttribute( geometry );\n \n         }\n \n       }\n \n     } else {\n \n       updateWireframeAttribute( geometry );\n \n     }\n \n     return wireframeAttributes.get( geometry );\n \n   }\n \n   return {\n \n     get: get,\n     update: update,\n \n     getWireframeAttribute: getWireframeAttribute\n \n   };\n \n }\n \n function WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n \n   const isWebGL2 = capabilities.isWebGL2;\n \n   let mode;\n \n   function setMode( value ) {\n \n     mode = value;\n \n   }\n \n   let type, bytesPerElement;\n \n   function setIndex( value ) {\n \n     type = value.type;\n     bytesPerElement = value.bytesPerElement;\n \n   }\n \n   function render( start, count ) {\n \n     gl.drawElements( mode, count, type, start * bytesPerElement );\n \n     info.update( count, mode, 1 );\n \n   }\n \n   function renderInstances( start, count, primcount ) {\n \n     if ( primcount === 0 ) return;\n \n     let extension, methodName;\n \n     if ( isWebGL2 ) {\n \n       extension = gl;\n       methodName = 'drawElementsInstanced';\n \n     } else {\n \n       extension = extensions.get( 'ANGLE_instanced_arrays' );\n       methodName = 'drawElementsInstancedANGLE';\n \n       if ( extension === null ) {\n \n         console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n         return;\n \n       }\n \n     }\n \n     extension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\n \n     info.update( count, mode, primcount );\n \n   }\n \n   //\n \n   this.setMode = setMode;\n   this.setIndex = setIndex;\n   this.render = render;\n   this.renderInstances = renderInstances;\n \n }\n \n function WebGLInfo( gl ) {\n \n   const memory = {\n     geometries: 0,\n     textures: 0\n   };\n \n   const render = {\n     frame: 0,\n     calls: 0,\n     triangles: 0,\n     points: 0,\n     lines: 0\n   };\n \n   function update( count, mode, instanceCount ) {\n \n     render.calls ++;\n \n     switch ( mode ) {\n \n       case 4:\n         render.triangles += instanceCount * ( count / 3 );\n         break;\n \n       case 1:\n         render.lines += instanceCount * ( count / 2 );\n         break;\n \n       case 3:\n         render.lines += instanceCount * ( count - 1 );\n         break;\n \n       case 2:\n         render.lines += instanceCount * count;\n         break;\n \n       case 0:\n         render.points += instanceCount * count;\n         break;\n \n       default:\n         console.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n         break;\n \n     }\n \n   }\n \n   function reset() {\n \n     render.frame ++;\n     render.calls = 0;\n     render.triangles = 0;\n     render.points = 0;\n     render.lines = 0;\n \n   }\n \n   return {\n     memory: memory,\n     render: render,\n     programs: null,\n     autoReset: true,\n     reset: reset,\n     update: update\n   };\n \n }\n \n class DataTexture2DArray extends Texture {\n \n   constructor( data = null, width = 1, height = 1, depth = 1 ) {\n \n     super( null );\n \n     this.image = { data, width, height, depth };\n \n     this.magFilter = NearestFilter;\n     this.minFilter = NearestFilter;\n \n     this.wrapR = ClampToEdgeWrapping;\n \n     this.generateMipmaps = false;\n     this.flipY = false;\n     this.unpackAlignment = 1;\n \n     this.needsUpdate = true;\n \n   }\n \n }\n \n DataTexture2DArray.prototype.isDataTexture2DArray = true;\n \n function numericalSort( a, b ) {\n \n   return a[ 0 ] - b[ 0 ];\n \n }\n \n function absNumericalSort( a, b ) {\n \n   return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n \n }\n \n function denormalize( morph, attribute ) {\n \n   let denominator = 1;\n   const array = attribute.isInterleavedBufferAttribute ? attribute.data.array : attribute.array;\n \n   if ( array instanceof Int8Array ) denominator = 127;\n   else if ( array instanceof Int16Array ) denominator = 32767;\n   else if ( array instanceof Int32Array ) denominator = 2147483647;\n   else console.error( 'THREE.WebGLMorphtargets: Unsupported morph attribute data type: ', array );\n \n   morph.divideScalar( denominator );\n \n }\n \n function WebGLMorphtargets( gl, capabilities, textures ) {\n \n   const influencesList = {};\n   const morphInfluences = new Float32Array( 8 );\n   const morphTextures = new WeakMap();\n   const morph = new Vector3();\n \n   const workInfluences = [];\n \n   for ( let i = 0; i < 8; i ++ ) {\n \n     workInfluences[ i ] = [ i, 0 ];\n \n   }\n \n   function update( object, geometry, material, program ) {\n \n     const objectInfluences = object.morphTargetInfluences;\n \n     if ( capabilities.isWebGL2 === true ) {\n \n       // instead of using attributes, the WebGL 2 code path encodes morph targets\n       // into an array of data textures. Each layer represents a single morph target.\n \n       const numberOfMorphTargets = geometry.morphAttributes.position.length;\n \n       let entry = morphTextures.get( geometry );\n \n       if ( entry === undefined || entry.count !== numberOfMorphTargets ) {\n \n         if ( entry !== undefined ) entry.texture.dispose();\n \n         const hasMorphNormals = geometry.morphAttributes.normal !== undefined;\n \n         const morphTargets = geometry.morphAttributes.position;\n         const morphNormals = geometry.morphAttributes.normal || [];\n \n         const numberOfVertices = geometry.attributes.position.count;\n         const numberOfVertexData = ( hasMorphNormals === true ) ? 2 : 1; // (v,n) vs. (v)\n \n         let width = numberOfVertices * numberOfVertexData;\n         let height = 1;\n \n         if ( width > capabilities.maxTextureSize ) {\n \n           height = Math.ceil( width / capabilities.maxTextureSize );\n           width = capabilities.maxTextureSize;\n \n         }\n \n         const buffer = new Float32Array( width * height * 4 * numberOfMorphTargets );\n \n         const texture = new DataTexture2DArray( buffer, width, height, numberOfMorphTargets );\n         texture.format = RGBAFormat; // using RGBA since RGB might be emulated (and is thus slower)\n         texture.type = FloatType;\n \n         // fill buffer\n \n         const vertexDataStride = numberOfVertexData * 4;\n \n         for ( let i = 0; i < numberOfMorphTargets; i ++ ) {\n \n           const morphTarget = morphTargets[ i ];\n           const morphNormal = morphNormals[ i ];\n \n           const offset = width * height * 4 * i;\n \n           for ( let j = 0; j < morphTarget.count; j ++ ) {\n \n             morph.fromBufferAttribute( morphTarget, j );\n \n             if ( morphTarget.normalized === true ) denormalize( morph, morphTarget );\n \n             const stride = j * vertexDataStride;\n \n             buffer[ offset + stride + 0 ] = morph.x;\n             buffer[ offset + stride + 1 ] = morph.y;\n             buffer[ offset + stride + 2 ] = morph.z;\n             buffer[ offset + stride + 3 ] = 0;\n \n             if ( hasMorphNormals === true ) {\n \n               morph.fromBufferAttribute( morphNormal, j );\n \n               if ( morphNormal.normalized === true ) denormalize( morph, morphNormal );\n \n               buffer[ offset + stride + 4 ] = morph.x;\n               buffer[ offset + stride + 5 ] = morph.y;\n               buffer[ offset + stride + 6 ] = morph.z;\n               buffer[ offset + stride + 7 ] = 0;\n \n             }\n \n           }\n \n         }\n \n         entry = {\n           count: numberOfMorphTargets,\n           texture: texture,\n           size: new Vector2( width, height )\n         };\n \n         morphTextures.set( geometry, entry );\n \n       }\n \n       //\n \n       let morphInfluencesSum = 0;\n \n       for ( let i = 0; i < objectInfluences.length; i ++ ) {\n \n         morphInfluencesSum += objectInfluences[ i ];\n \n       }\n \n       const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n \n       program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n       program.getUniforms().setValue( gl, 'morphTargetInfluences', objectInfluences );\n \n       program.getUniforms().setValue( gl, 'morphTargetsTexture', entry.texture, textures );\n       program.getUniforms().setValue( gl, 'morphTargetsTextureSize', entry.size );\n \n \n     } else {\n \n       // When object doesn't have morph target influences defined, we treat it as a 0-length array\n       // This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n \n       const length = objectInfluences === undefined ? 0 : objectInfluences.length;\n \n       let influences = influencesList[ geometry.id ];\n \n       if ( influences === undefined || influences.length !== length ) {\n \n         // initialise list\n \n         influences = [];\n \n         for ( let i = 0; i < length; i ++ ) {\n \n           influences[ i ] = [ i, 0 ];\n \n         }\n \n         influencesList[ geometry.id ] = influences;\n \n       }\n \n       // Collect influences\n \n       for ( let i = 0; i < length; i ++ ) {\n \n         const influence = influences[ i ];\n \n         influence[ 0 ] = i;\n         influence[ 1 ] = objectInfluences[ i ];\n \n       }\n \n       influences.sort( absNumericalSort );\n \n       for ( let i = 0; i < 8; i ++ ) {\n \n         if ( i < length && influences[ i ][ 1 ] ) {\n \n           workInfluences[ i ][ 0 ] = influences[ i ][ 0 ];\n           workInfluences[ i ][ 1 ] = influences[ i ][ 1 ];\n \n         } else {\n \n           workInfluences[ i ][ 0 ] = Number.MAX_SAFE_INTEGER;\n           workInfluences[ i ][ 1 ] = 0;\n \n         }\n \n       }\n \n       workInfluences.sort( numericalSort );\n \n       const morphTargets = geometry.morphAttributes.position;\n       const morphNormals = geometry.morphAttributes.normal;\n \n       let morphInfluencesSum = 0;\n \n       for ( let i = 0; i < 8; i ++ ) {\n \n         const influence = workInfluences[ i ];\n         const index = influence[ 0 ];\n         const value = influence[ 1 ];\n \n         if ( index !== Number.MAX_SAFE_INTEGER && value ) {\n \n           if ( morphTargets && geometry.getAttribute( 'morphTarget' + i ) !== morphTargets[ index ] ) {\n \n             geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] );\n \n           }\n \n           if ( morphNormals && geometry.getAttribute( 'morphNormal' + i ) !== morphNormals[ index ] ) {\n \n             geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] );\n \n           }\n \n           morphInfluences[ i ] = value;\n           morphInfluencesSum += value;\n \n         } else {\n \n           if ( morphTargets && geometry.hasAttribute( 'morphTarget' + i ) === true ) {\n \n             geometry.deleteAttribute( 'morphTarget' + i );\n \n           }\n \n           if ( morphNormals && geometry.hasAttribute( 'morphNormal' + i ) === true ) {\n \n             geometry.deleteAttribute( 'morphNormal' + i );\n \n           }\n \n           morphInfluences[ i ] = 0;\n \n         }\n \n       }\n \n       // GLSL shader uses formula baseinfluence * base + sum(target * influence)\n       // This allows us to switch between absolute morphs and relative morphs without changing shader code\n       // When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n       const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n \n       program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n       program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n \n     }\n \n   }\n \n   return {\n \n     update: update\n \n   };\n \n }\n \n function WebGLObjects( gl, geometries, attributes, info ) {\n \n   let updateMap = new WeakMap();\n \n   function update( object ) {\n \n     const frame = info.render.frame;\n \n     const geometry = object.geometry;\n     const buffergeometry = geometries.get( object, geometry );\n \n     // Update once per frame\n \n     if ( updateMap.get( buffergeometry ) !== frame ) {\n \n       geometries.update( buffergeometry );\n \n       updateMap.set( buffergeometry, frame );\n \n     }\n \n     if ( object.isInstancedMesh ) {\n \n       if ( object.hasEventListener( 'dispose', onInstancedMeshDispose ) === false ) {\n \n         object.addEventListener( 'dispose', onInstancedMeshDispose );\n \n       }\n \n       attributes.update( object.instanceMatrix, 34962 );\n \n       if ( object.instanceColor !== null ) {\n \n         attributes.update( object.instanceColor, 34962 );\n \n       }\n \n     }\n \n     return buffergeometry;\n \n   }\n \n   function dispose() {\n \n     updateMap = new WeakMap();\n \n   }\n \n   function onInstancedMeshDispose( event ) {\n \n     const instancedMesh = event.target;\n \n     instancedMesh.removeEventListener( 'dispose', onInstancedMeshDispose );\n \n     attributes.remove( instancedMesh.instanceMatrix );\n \n     if ( instancedMesh.instanceColor !== null ) attributes.remove( instancedMesh.instanceColor );\n \n   }\n \n   return {\n \n     update: update,\n     dispose: dispose\n \n   };\n \n }\n \n class DataTexture3D extends Texture {\n \n   constructor( data = null, width = 1, height = 1, depth = 1 ) {\n \n     // We're going to add .setXXX() methods for setting properties later.\n     // Users can still set in DataTexture3D directly.\n     //\n     //\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n     // \ttexture.anisotropy = 16;\n     //\n     // See #14839\n \n     super( null );\n \n     this.image = { data, width, height, depth };\n \n     this.magFilter = NearestFilter;\n     this.minFilter = NearestFilter;\n \n     this.wrapR = ClampToEdgeWrapping;\n \n     this.generateMipmaps = false;\n     this.flipY = false;\n     this.unpackAlignment = 1;\n \n     this.needsUpdate = true;\n \n   }\n \n }\n \n DataTexture3D.prototype.isDataTexture3D = true;\n \n /**\n  * Uniforms of a program.\n  * Those form a tree structure with a special top-level container for the root,\n  * which you get by calling 'new WebGLUniforms( gl, program )'.\n  *\n  *\n  * Properties of inner nodes including the top-level container:\n  *\n  * .seq - array of nested uniforms\n  * .map - nested uniforms by name\n  *\n  *\n  * Methods of all nodes except the top-level container:\n  *\n  * .setValue( gl, value, [textures] )\n  *\n  * \t\tuploads a uniform value(s)\n  *  \tthe 'textures' parameter is needed for sampler uniforms\n  *\n  *\n  * Static methods of the top-level container (textures factorizations):\n  *\n  * .upload( gl, seq, values, textures )\n  *\n  * \t\tsets uniforms in 'seq' to 'values[id].value'\n  *\n  * .seqWithValue( seq, values ) : filteredSeq\n  *\n  * \t\tfilters 'seq' entries with corresponding entry in values\n  *\n  *\n  * Methods of the top-level container (textures factorizations):\n  *\n  * .setValue( gl, name, value, textures )\n  *\n  * \t\tsets uniform with  name 'name' to 'value'\n  *\n  * .setOptional( gl, obj, prop )\n  *\n  * \t\tlike .set for an optional property of the object\n  *\n  */\n \n const emptyTexture = new Texture();\n const emptyTexture2dArray = new DataTexture2DArray();\n const emptyTexture3d = new DataTexture3D();\n const emptyCubeTexture = new CubeTexture();\n \n // --- Utilities ---\n \n // Array Caches (provide typed arrays for temporary by size)\n \n const arrayCacheF32 = [];\n const arrayCacheI32 = [];\n \n // Float32Array caches used for uploading Matrix uniforms\n \n const mat4array = new Float32Array( 16 );\n const mat3array = new Float32Array( 9 );\n const mat2array = new Float32Array( 4 );\n \n // Flattening for arrays of vectors and matrices\n \n function flatten( array, nBlocks, blockSize ) {\n \n   const firstElem = array[ 0 ];\n \n   if ( firstElem <= 0 || firstElem > 0 ) return array;\n   // unoptimized: ! isNaN( firstElem )\n   // see http://jacksondunstan.com/articles/983\n \n   const n = nBlocks * blockSize;\n   let r = arrayCacheF32[ n ];\n \n   if ( r === undefined ) {\n \n     r = new Float32Array( n );\n     arrayCacheF32[ n ] = r;\n \n   }\n \n   if ( nBlocks !== 0 ) {\n \n     firstElem.toArray( r, 0 );\n \n     for ( let i = 1, offset = 0; i !== nBlocks; ++ i ) {\n \n       offset += blockSize;\n       array[ i ].toArray( r, offset );\n \n     }\n \n   }\n \n   return r;\n \n }\n \n function arraysEqual( a, b ) {\n \n   if ( a.length !== b.length ) return false;\n \n   for ( let i = 0, l = a.length; i < l; i ++ ) {\n \n     if ( a[ i ] !== b[ i ] ) return false;\n \n   }\n \n   return true;\n \n }\n \n function copyArray( a, b ) {\n \n   for ( let i = 0, l = b.length; i < l; i ++ ) {\n \n     a[ i ] = b[ i ];\n \n   }\n \n }\n \n // Texture unit allocation\n \n function allocTexUnits( textures, n ) {\n \n   let r = arrayCacheI32[ n ];\n \n   if ( r === undefined ) {\n \n     r = new Int32Array( n );\n     arrayCacheI32[ n ] = r;\n \n   }\n \n   for ( let i = 0; i !== n; ++ i ) {\n \n     r[ i ] = textures.allocateTextureUnit();\n \n   }\n \n   return r;\n \n }\n \n // --- Setters ---\n \n // Note: Defining these methods externally, because they come in a bunch\n // and this way their names minify.\n \n // Single scalar\n \n function setValueV1f( gl, v ) {\n \n   const cache = this.cache;\n \n   if ( cache[ 0 ] === v ) return;\n \n   gl.uniform1f( this.addr, v );\n \n   cache[ 0 ] = v;\n \n }\n \n // Single float vector (from flat array or THREE.VectorN)\n \n function setValueV2f( gl, v ) {\n \n   const cache = this.cache;\n \n   if ( v.x !== undefined ) {\n \n     if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n \n       gl.uniform2f( this.addr, v.x, v.y );\n \n       cache[ 0 ] = v.x;\n       cache[ 1 ] = v.y;\n \n     }\n \n   } else {\n \n     if ( arraysEqual( cache, v ) ) return;\n \n     gl.uniform2fv( this.addr, v );\n \n     copyArray( cache, v );\n \n   }\n \n }\n \n function setValueV3f( gl, v ) {\n \n   const cache = this.cache;\n \n   if ( v.x !== undefined ) {\n \n     if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n \n       gl.uniform3f( this.addr, v.x, v.y, v.z );\n \n       cache[ 0 ] = v.x;\n       cache[ 1 ] = v.y;\n       cache[ 2 ] = v.z;\n \n     }\n \n   } else if ( v.r !== undefined ) {\n \n     if ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n \n       gl.uniform3f( this.addr, v.r, v.g, v.b );\n \n       cache[ 0 ] = v.r;\n       cache[ 1 ] = v.g;\n       cache[ 2 ] = v.b;\n \n     }\n \n   } else {\n \n     if ( arraysEqual( cache, v ) ) return;\n \n     gl.uniform3fv( this.addr, v );\n \n     copyArray( cache, v );\n \n   }\n \n }\n \n function setValueV4f( gl, v ) {\n \n   const cache = this.cache;\n \n   if ( v.x !== undefined ) {\n \n     if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n \n       gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n \n       cache[ 0 ] = v.x;\n       cache[ 1 ] = v.y;\n       cache[ 2 ] = v.z;\n       cache[ 3 ] = v.w;\n \n     }\n \n   } else {\n \n     if ( arraysEqual( cache, v ) ) return;\n \n     gl.uniform4fv( this.addr, v );\n \n     copyArray( cache, v );\n \n   }\n \n }\n \n // Single matrix (from flat array or THREE.MatrixN)\n \n function setValueM2( gl, v ) {\n \n   const cache = this.cache;\n   const elements = v.elements;\n \n   if ( elements === undefined ) {\n \n     if ( arraysEqual( cache, v ) ) return;\n \n     gl.uniformMatrix2fv( this.addr, false, v );\n \n     copyArray( cache, v );\n \n   } else {\n \n     if ( arraysEqual( cache, elements ) ) return;\n \n     mat2array.set( elements );\n \n     gl.uniformMatrix2fv( this.addr, false, mat2array );\n \n     copyArray( cache, elements );\n \n   }\n \n }\n \n function setValueM3( gl, v ) {\n \n   const cache = this.cache;\n   const elements = v.elements;\n \n   if ( elements === undefined ) {\n \n     if ( arraysEqual( cache, v ) ) return;\n \n     gl.uniformMatrix3fv( this.addr, false, v );\n \n     copyArray( cache, v );\n \n   } else {\n \n     if ( arraysEqual( cache, elements ) ) return;\n \n     mat3array.set( elements );\n \n     gl.uniformMatrix3fv( this.addr, false, mat3array );\n \n     copyArray( cache, elements );\n \n   }\n \n }\n \n function setValueM4( gl, v ) {\n \n   const cache = this.cache;\n   const elements = v.elements;\n \n   if ( elements === undefined ) {\n \n     if ( arraysEqual( cache, v ) ) return;\n \n     gl.uniformMatrix4fv( this.addr, false, v );\n \n     copyArray( cache, v );\n \n   } else {\n \n     if ( arraysEqual( cache, elements ) ) return;\n \n     mat4array.set( elements );\n \n     gl.uniformMatrix4fv( this.addr, false, mat4array );\n \n     copyArray( cache, elements );\n \n   }\n \n }\n \n // Single integer / boolean\n \n function setValueV1i( gl, v ) {\n \n   const cache = this.cache;\n \n   if ( cache[ 0 ] === v ) return;\n \n   gl.uniform1i( this.addr, v );\n \n   cache[ 0 ] = v;\n \n }\n \n // Single integer / boolean vector (from flat array)\n \n function setValueV2i( gl, v ) {\n \n   const cache = this.cache;\n \n   if ( arraysEqual( cache, v ) ) return;\n \n   gl.uniform2iv( this.addr, v );\n \n   copyArray( cache, v );\n \n }\n \n function setValueV3i( gl, v ) {\n \n   const cache = this.cache;\n \n   if ( arraysEqual( cache, v ) ) return;\n \n   gl.uniform3iv( this.addr, v );\n \n   copyArray( cache, v );\n \n }\n \n function setValueV4i( gl, v ) {\n \n   const cache = this.cache;\n \n   if ( arraysEqual( cache, v ) ) return;\n \n   gl.uniform4iv( this.addr, v );\n \n   copyArray( cache, v );\n \n }\n \n // Single unsigned integer\n \n function setValueV1ui( gl, v ) {\n \n   const cache = this.cache;\n \n   if ( cache[ 0 ] === v ) return;\n \n   gl.uniform1ui( this.addr, v );\n \n   cache[ 0 ] = v;\n \n }\n \n // Single unsigned integer vector (from flat array)\n \n function setValueV2ui( gl, v ) {\n \n   const cache = this.cache;\n \n   if ( arraysEqual( cache, v ) ) return;\n \n   gl.uniform2uiv( this.addr, v );\n \n   copyArray( cache, v );\n \n }\n \n function setValueV3ui( gl, v ) {\n \n   const cache = this.cache;\n \n   if ( arraysEqual( cache, v ) ) return;\n \n   gl.uniform3uiv( this.addr, v );\n \n   copyArray( cache, v );\n \n }\n \n function setValueV4ui( gl, v ) {\n \n   const cache = this.cache;\n \n   if ( arraysEqual( cache, v ) ) return;\n \n   gl.uniform4uiv( this.addr, v );\n \n   copyArray( cache, v );\n \n }\n \n \n // Single texture (2D / Cube)\n \n function setValueT1( gl, v, textures ) {\n \n   const cache = this.cache;\n   const unit = textures.allocateTextureUnit();\n \n   if ( cache[ 0 ] !== unit ) {\n \n     gl.uniform1i( this.addr, unit );\n     cache[ 0 ] = unit;\n \n   }\n \n   textures.safeSetTexture2D( v || emptyTexture, unit );\n \n }\n \n function setValueT3D1( gl, v, textures ) {\n \n   const cache = this.cache;\n   const unit = textures.allocateTextureUnit();\n \n   if ( cache[ 0 ] !== unit ) {\n \n     gl.uniform1i( this.addr, unit );\n     cache[ 0 ] = unit;\n \n   }\n \n   textures.setTexture3D( v || emptyTexture3d, unit );\n \n }\n \n function setValueT6( gl, v, textures ) {\n \n   const cache = this.cache;\n   const unit = textures.allocateTextureUnit();\n \n   if ( cache[ 0 ] !== unit ) {\n \n     gl.uniform1i( this.addr, unit );\n     cache[ 0 ] = unit;\n \n   }\n \n   textures.safeSetTextureCube( v || emptyCubeTexture, unit );\n \n }\n \n function setValueT2DArray1( gl, v, textures ) {\n \n   const cache = this.cache;\n   const unit = textures.allocateTextureUnit();\n \n   if ( cache[ 0 ] !== unit ) {\n \n     gl.uniform1i( this.addr, unit );\n     cache[ 0 ] = unit;\n \n   }\n \n   textures.setTexture2DArray( v || emptyTexture2dArray, unit );\n \n }\n \n // Helper to pick the right setter for the singular case\n \n function getSingularSetter( type ) {\n \n   switch ( type ) {\n \n     case 0x1406: return setValueV1f; // FLOAT\n     case 0x8b50: return setValueV2f; // _VEC2\n     case 0x8b51: return setValueV3f; // _VEC3\n     case 0x8b52: return setValueV4f; // _VEC4\n \n     case 0x8b5a: return setValueM2; // _MAT2\n     case 0x8b5b: return setValueM3; // _MAT3\n     case 0x8b5c: return setValueM4; // _MAT4\n \n     case 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\n     case 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\n     case 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\n     case 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\n \n     case 0x1405: return setValueV1ui; // UINT\n     case 0x8dc6: return setValueV2ui; // _VEC2\n     case 0x8dc7: return setValueV3ui; // _VEC3\n     case 0x8dc8: return setValueV4ui; // _VEC4\n \n     case 0x8b5e: // SAMPLER_2D\n     case 0x8d66: // SAMPLER_EXTERNAL_OES\n     case 0x8dca: // INT_SAMPLER_2D\n     case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n     case 0x8b62: // SAMPLER_2D_SHADOW\n       return setValueT1;\n \n     case 0x8b5f: // SAMPLER_3D\n     case 0x8dcb: // INT_SAMPLER_3D\n     case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n       return setValueT3D1;\n \n     case 0x8b60: // SAMPLER_CUBE\n     case 0x8dcc: // INT_SAMPLER_CUBE\n     case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n     case 0x8dc5: // SAMPLER_CUBE_SHADOW\n       return setValueT6;\n \n     case 0x8dc1: // SAMPLER_2D_ARRAY\n     case 0x8dcf: // INT_SAMPLER_2D_ARRAY\n     case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n     case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n       return setValueT2DArray1;\n \n   }\n \n }\n \n \n // Array of scalars\n \n function setValueV1fArray( gl, v ) {\n \n   gl.uniform1fv( this.addr, v );\n \n }\n \n // Array of vectors (from flat array or array of THREE.VectorN)\n \n function setValueV2fArray( gl, v ) {\n \n   const data = flatten( v, this.size, 2 );\n \n   gl.uniform2fv( this.addr, data );\n \n }\n \n function setValueV3fArray( gl, v ) {\n \n   const data = flatten( v, this.size, 3 );\n \n   gl.uniform3fv( this.addr, data );\n \n }\n \n function setValueV4fArray( gl, v ) {\n \n   const data = flatten( v, this.size, 4 );\n \n   gl.uniform4fv( this.addr, data );\n \n }\n \n // Array of matrices (from flat array or array of THREE.MatrixN)\n \n function setValueM2Array( gl, v ) {\n \n   const data = flatten( v, this.size, 4 );\n \n   gl.uniformMatrix2fv( this.addr, false, data );\n \n }\n \n function setValueM3Array( gl, v ) {\n \n   const data = flatten( v, this.size, 9 );\n \n   gl.uniformMatrix3fv( this.addr, false, data );\n \n }\n \n function setValueM4Array( gl, v ) {\n \n   const data = flatten( v, this.size, 16 );\n \n   gl.uniformMatrix4fv( this.addr, false, data );\n \n }\n \n // Array of integer / boolean\n \n function setValueV1iArray( gl, v ) {\n \n   gl.uniform1iv( this.addr, v );\n \n }\n \n // Array of integer / boolean vectors (from flat array)\n \n function setValueV2iArray( gl, v ) {\n \n   gl.uniform2iv( this.addr, v );\n \n }\n \n function setValueV3iArray( gl, v ) {\n \n   gl.uniform3iv( this.addr, v );\n \n }\n \n function setValueV4iArray( gl, v ) {\n \n   gl.uniform4iv( this.addr, v );\n \n }\n \n // Array of unsigned integer\n \n function setValueV1uiArray( gl, v ) {\n \n   gl.uniform1uiv( this.addr, v );\n \n }\n \n // Array of unsigned integer vectors (from flat array)\n \n function setValueV2uiArray( gl, v ) {\n \n   gl.uniform2uiv( this.addr, v );\n \n }\n \n function setValueV3uiArray( gl, v ) {\n \n   gl.uniform3uiv( this.addr, v );\n \n }\n \n function setValueV4uiArray( gl, v ) {\n \n   gl.uniform4uiv( this.addr, v );\n \n }\n \n \n // Array of textures (2D / 3D / Cube / 2DArray)\n \n function setValueT1Array( gl, v, textures ) {\n \n   const n = v.length;\n \n   const units = allocTexUnits( textures, n );\n \n   gl.uniform1iv( this.addr, units );\n \n   for ( let i = 0; i !== n; ++ i ) {\n \n     textures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );\n \n   }\n \n }\n \n function setValueT3DArray( gl, v, textures ) {\n \n   const n = v.length;\n \n   const units = allocTexUnits( textures, n );\n \n   gl.uniform1iv( this.addr, units );\n \n   for ( let i = 0; i !== n; ++ i ) {\n \n     textures.setTexture3D( v[ i ] || emptyTexture3d, units[ i ] );\n \n   }\n \n }\n \n function setValueT6Array( gl, v, textures ) {\n \n   const n = v.length;\n \n   const units = allocTexUnits( textures, n );\n \n   gl.uniform1iv( this.addr, units );\n \n   for ( let i = 0; i !== n; ++ i ) {\n \n     textures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n \n   }\n \n }\n \n function setValueT2DArrayArray( gl, v, textures ) {\n \n   const n = v.length;\n \n   const units = allocTexUnits( textures, n );\n \n   gl.uniform1iv( this.addr, units );\n \n   for ( let i = 0; i !== n; ++ i ) {\n \n     textures.setTexture2DArray( v[ i ] || emptyTexture2dArray, units[ i ] );\n \n   }\n \n }\n \n \n // Helper to pick the right setter for a pure (bottom-level) array\n \n function getPureArraySetter( type ) {\n \n   switch ( type ) {\n \n     case 0x1406: return setValueV1fArray; // FLOAT\n     case 0x8b50: return setValueV2fArray; // _VEC2\n     case 0x8b51: return setValueV3fArray; // _VEC3\n     case 0x8b52: return setValueV4fArray; // _VEC4\n \n     case 0x8b5a: return setValueM2Array; // _MAT2\n     case 0x8b5b: return setValueM3Array; // _MAT3\n     case 0x8b5c: return setValueM4Array; // _MAT4\n \n     case 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\n     case 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\n     case 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\n     case 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\n \n     case 0x1405: return setValueV1uiArray; // UINT\n     case 0x8dc6: return setValueV2uiArray; // _VEC2\n     case 0x8dc7: return setValueV3uiArray; // _VEC3\n     case 0x8dc8: return setValueV4uiArray; // _VEC4\n \n     case 0x8b5e: // SAMPLER_2D\n     case 0x8d66: // SAMPLER_EXTERNAL_OES\n     case 0x8dca: // INT_SAMPLER_2D\n     case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n     case 0x8b62: // SAMPLER_2D_SHADOW\n       return setValueT1Array;\n \n     case 0x8b5f: // SAMPLER_3D\n     case 0x8dcb: // INT_SAMPLER_3D\n     case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n       return setValueT3DArray;\n \n     case 0x8b60: // SAMPLER_CUBE\n     case 0x8dcc: // INT_SAMPLER_CUBE\n     case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n     case 0x8dc5: // SAMPLER_CUBE_SHADOW\n       return setValueT6Array;\n \n     case 0x8dc1: // SAMPLER_2D_ARRAY\n     case 0x8dcf: // INT_SAMPLER_2D_ARRAY\n     case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n     case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n       return setValueT2DArrayArray;\n \n   }\n \n }\n \n // --- Uniform Classes ---\n \n function SingleUniform( id, activeInfo, addr ) {\n \n   this.id = id;\n   this.addr = addr;\n   this.cache = [];\n   this.setValue = getSingularSetter( activeInfo.type );\n \n   // this.path = activeInfo.name; // DEBUG\n \n }\n \n function PureArrayUniform( id, activeInfo, addr ) {\n \n   this.id = id;\n   this.addr = addr;\n   this.cache = [];\n   this.size = activeInfo.size;\n   this.setValue = getPureArraySetter( activeInfo.type );\n \n   // this.path = activeInfo.name; // DEBUG\n \n }\n \n PureArrayUniform.prototype.updateCache = function ( data ) {\n \n   const cache = this.cache;\n \n   if ( data instanceof Float32Array && cache.length !== data.length ) {\n \n     this.cache = new Float32Array( data.length );\n \n   }\n \n   copyArray( cache, data );\n \n };\n \n function StructuredUniform( id ) {\n \n   this.id = id;\n \n   this.seq = [];\n   this.map = {};\n \n }\n \n StructuredUniform.prototype.setValue = function ( gl, value, textures ) {\n \n   const seq = this.seq;\n \n   for ( let i = 0, n = seq.length; i !== n; ++ i ) {\n \n     const u = seq[ i ];\n     u.setValue( gl, value[ u.id ], textures );\n \n   }\n \n };\n \n // --- Top-level ---\n \n // Parser - builds up the property tree from the path strings\n \n const RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g;\n \n // extracts\n // \t- the identifier (member name or array index)\n //  - followed by an optional right bracket (found when array index)\n //  - followed by an optional left bracket or dot (type of subscript)\n //\n // Note: These portions can be read in a non-overlapping fashion and\n // allow straightforward parsing of the hierarchy that WebGL encodes\n // in the uniform names.\n \n function addUniform( container, uniformObject ) {\n \n   container.seq.push( uniformObject );\n   container.map[ uniformObject.id ] = uniformObject;\n \n }\n \n function parseUniform( activeInfo, addr, container ) {\n \n   const path = activeInfo.name,\n     pathLength = path.length;\n \n   // reset RegExp object, because of the early exit of a previous run\n   RePathPart.lastIndex = 0;\n \n   while ( true ) {\n \n     const match = RePathPart.exec( path ),\n       matchEnd = RePathPart.lastIndex;\n \n     let id = match[ 1 ];\n     const idIsIndex = match[ 2 ] === ']',\n       subscript = match[ 3 ];\n \n     if ( idIsIndex ) id = id | 0; // convert to integer\n \n     if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n \n       // bare name or \"pure\" bottom-level array \"[0]\" suffix\n \n       addUniform( container, subscript === undefined ?\n         new SingleUniform( id, activeInfo, addr ) :\n         new PureArrayUniform( id, activeInfo, addr ) );\n \n       break;\n \n     } else {\n \n       // step into inner node / create it in case it doesn't exist\n \n       const map = container.map;\n       let next = map[ id ];\n \n       if ( next === undefined ) {\n \n         next = new StructuredUniform( id );\n         addUniform( container, next );\n \n       }\n \n       container = next;\n \n     }\n \n   }\n \n }\n \n // Root Container\n \n function WebGLUniforms( gl, program ) {\n \n   this.seq = [];\n   this.map = {};\n \n   const n = gl.getProgramParameter( program, 35718 );\n \n   for ( let i = 0; i < n; ++ i ) {\n \n     const info = gl.getActiveUniform( program, i ),\n       addr = gl.getUniformLocation( program, info.name );\n \n     parseUniform( info, addr, this );\n \n   }\n \n }\n \n WebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {\n \n   const u = this.map[ name ];\n \n   if ( u !== undefined ) u.setValue( gl, value, textures );\n \n };\n \n WebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n \n   const v = object[ name ];\n \n   if ( v !== undefined ) this.setValue( gl, name, v );\n \n };\n \n \n // Static interface\n \n WebGLUniforms.upload = function ( gl, seq, values, textures ) {\n \n   for ( let i = 0, n = seq.length; i !== n; ++ i ) {\n \n     const u = seq[ i ],\n       v = values[ u.id ];\n \n     if ( v.needsUpdate !== false ) {\n \n       // note: always updating when .needsUpdate is undefined\n       u.setValue( gl, v.value, textures );\n \n     }\n \n   }\n \n };\n \n WebGLUniforms.seqWithValue = function ( seq, values ) {\n \n   const r = [];\n \n   for ( let i = 0, n = seq.length; i !== n; ++ i ) {\n \n     const u = seq[ i ];\n     if ( u.id in values ) r.push( u );\n \n   }\n \n   return r;\n \n };\n \n function WebGLShader( gl, type, string ) {\n \n   const shader = gl.createShader( type );\n \n   gl.shaderSource( shader, string );\n   gl.compileShader( shader );\n \n   return shader;\n \n }\n \n let programIdCount = 0;\n \n function addLineNumbers( string ) {\n \n   const lines = string.split( '\\n' );\n \n   for ( let i = 0; i < lines.length; i ++ ) {\n \n     lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n \n   }\n \n   return lines.join( '\\n' );\n \n }\n \n function getEncodingComponents( encoding ) {\n \n   switch ( encoding ) {\n \n     case LinearEncoding:\n       return [ 'Linear', '( value )' ];\n     case sRGBEncoding:\n       return [ 'sRGB', '( value )' ];\n     case RGBEEncoding:\n       return [ 'RGBE', '( value )' ];\n     case RGBM7Encoding:\n       return [ 'RGBM', '( value, 7.0 )' ];\n     case RGBM16Encoding:\n       return [ 'RGBM', '( value, 16.0 )' ];\n     case RGBDEncoding:\n       return [ 'RGBD', '( value, 256.0 )' ];\n     case GammaEncoding:\n       return [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\n     default:\n       console.warn( 'THREE.WebGLProgram: Unsupported encoding:', encoding );\n       return [ 'Linear', '( value )' ];\n \n   }\n \n }\n \n function getShaderErrors( gl, shader, type ) {\n \n   const status = gl.getShaderParameter( shader, 35713 );\n   const errors = gl.getShaderInfoLog( shader ).trim();\n \n   if ( status && errors === '' ) return '';\n \n   // --enable-privileged-webgl-extension\n   // console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n \n   return type.toUpperCase() + '\\n\\n' + errors + '\\n\\n' + addLineNumbers( gl.getShaderSource( shader ) );\n \n }\n \n function getTexelDecodingFunction( functionName, encoding ) {\n \n   const components = getEncodingComponents( encoding );\n   return 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\n \n }\n \n function getTexelEncodingFunction( functionName, encoding ) {\n \n   const components = getEncodingComponents( encoding );\n   return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n \n }\n \n function getToneMappingFunction( functionName, toneMapping ) {\n \n   let toneMappingName;\n \n   switch ( toneMapping ) {\n \n     case LinearToneMapping:\n       toneMappingName = 'Linear';\n       break;\n \n     case ReinhardToneMapping:\n       toneMappingName = 'Reinhard';\n       break;\n \n     case CineonToneMapping:\n       toneMappingName = 'OptimizedCineon';\n       break;\n \n     case ACESFilmicToneMapping:\n       toneMappingName = 'ACESFilmic';\n       break;\n \n     case CustomToneMapping:\n       toneMappingName = 'Custom';\n       break;\n \n     default:\n       console.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );\n       toneMappingName = 'Linear';\n \n   }\n \n   return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n \n }\n \n function generateExtensions( parameters ) {\n \n   const chunks = [\n     ( parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n     ( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',\n     ( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',\n     ( parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n   ];\n \n   return chunks.filter( filterEmptyLine ).join( '\\n' );\n \n }\n \n function generateDefines( defines ) {\n \n   const chunks = [];\n \n   for ( const name in defines ) {\n \n     const value = defines[ name ];\n \n     if ( value === false ) continue;\n \n     chunks.push( '#define ' + name + ' ' + value );\n \n   }\n \n   return chunks.join( '\\n' );\n \n }\n \n function fetchAttributeLocations( gl, program ) {\n \n   const attributes = {};\n \n   const n = gl.getProgramParameter( program, 35721 );\n \n   for ( let i = 0; i < n; i ++ ) {\n \n     const info = gl.getActiveAttrib( program, i );\n     const name = info.name;\n \n     let locationSize = 1;\n     if ( info.type === 35674 ) locationSize = 2;\n     if ( info.type === 35675 ) locationSize = 3;\n     if ( info.type === 35676 ) locationSize = 4;\n \n     // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n \n     attributes[ name ] = {\n       type: info.type,\n       location: gl.getAttribLocation( program, name ),\n       locationSize: locationSize\n     };\n \n   }\n \n   return attributes;\n \n }\n \n function filterEmptyLine( string ) {\n \n   return string !== '';\n \n }\n \n function replaceLightNums( string, parameters ) {\n \n   return string\n     .replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n     .replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n     .replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n     .replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n     .replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\n     .replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\n     .replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\n     .replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\n \n }\n \n function replaceClippingPlaneNums( string, parameters ) {\n \n   return string\n     .replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n     .replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n \n }\n \n // Resolve Includes\n \n const includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n \n function resolveIncludes( string ) {\n \n   return string.replace( includePattern, includeReplacer );\n \n }\n \n function includeReplacer( match, include ) {\n \n   const string = ShaderChunk[ include ];\n \n   if ( string === undefined ) {\n \n     throw new Error( 'Can not resolve #include <' + include + '>' );\n \n   }\n \n   return resolveIncludes( string );\n \n }\n \n // Unroll Loops\n \n const deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n const unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n \n function unrollLoops( string ) {\n \n   return string\n     .replace( unrollLoopPattern, loopReplacer )\n     .replace( deprecatedUnrollLoopPattern, deprecatedLoopReplacer );\n \n }\n \n function deprecatedLoopReplacer( match, start, end, snippet ) {\n \n   console.warn( 'WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.' );\n   return loopReplacer( match, start, end, snippet );\n \n }\n \n function loopReplacer( match, start, end, snippet ) {\n \n   let string = '';\n \n   for ( let i = parseInt( start ); i < parseInt( end ); i ++ ) {\n \n     string += snippet\n       .replace( /\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]' )\n       .replace( /UNROLLED_LOOP_INDEX/g, i );\n \n   }\n \n   return string;\n \n }\n \n //\n \n function generatePrecision( parameters ) {\n \n   let precisionstring = 'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\n \n   if ( parameters.precision === 'highp' ) {\n \n     precisionstring += '\\n#define HIGH_PRECISION';\n \n   } else if ( parameters.precision === 'mediump' ) {\n \n     precisionstring += '\\n#define MEDIUM_PRECISION';\n \n   } else if ( parameters.precision === 'lowp' ) {\n \n     precisionstring += '\\n#define LOW_PRECISION';\n \n   }\n \n   return precisionstring;\n \n }\n \n function generateShadowMapTypeDefine( parameters ) {\n \n   let shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n \n   if ( parameters.shadowMapType === PCFShadowMap ) {\n \n     shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n \n   } else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n \n     shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n \n   } else if ( parameters.shadowMapType === VSMShadowMap ) {\n \n     shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n \n   }\n \n   return shadowMapTypeDefine;\n \n }\n \n function generateEnvMapTypeDefine( parameters ) {\n \n   let envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n \n   if ( parameters.envMap ) {\n \n     switch ( parameters.envMapMode ) {\n \n       case CubeReflectionMapping:\n       case CubeRefractionMapping:\n         envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n         break;\n \n       case CubeUVReflectionMapping:\n       case CubeUVRefractionMapping:\n         envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n         break;\n \n     }\n \n   }\n \n   return envMapTypeDefine;\n \n }\n \n function generateEnvMapModeDefine( parameters ) {\n \n   let envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n \n   if ( parameters.envMap ) {\n \n     switch ( parameters.envMapMode ) {\n \n       case CubeRefractionMapping:\n       case CubeUVRefractionMapping:\n \n         envMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n         break;\n \n     }\n \n   }\n \n   return envMapModeDefine;\n \n }\n \n function generateEnvMapBlendingDefine( parameters ) {\n \n   let envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n \n   if ( parameters.envMap ) {\n \n     switch ( parameters.combine ) {\n \n       case MultiplyOperation:\n         envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n         break;\n \n       case MixOperation:\n         envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n         break;\n \n       case AddOperation:\n         envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n         break;\n \n     }\n \n   }\n \n   return envMapBlendingDefine;\n \n }\n \n function WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {\n \n   // TODO Send this event to Three.js DevTools\n   // console.log( 'WebGLProgram', cacheKey );\n \n   const gl = renderer.getContext();\n \n   const defines = parameters.defines;\n \n   let vertexShader = parameters.vertexShader;\n   let fragmentShader = parameters.fragmentShader;\n \n   const shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\n   const envMapTypeDefine = generateEnvMapTypeDefine( parameters );\n   const envMapModeDefine = generateEnvMapModeDefine( parameters );\n   const envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\n \n \n   const gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n \n   const customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );\n \n   const customDefines = generateDefines( defines );\n \n   const program = gl.createProgram();\n \n   let prefixVertex, prefixFragment;\n   let versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n \n   if ( parameters.isRawShaderMaterial ) {\n \n     prefixVertex = [\n \n       customDefines\n \n     ].filter( filterEmptyLine ).join( '\\n' );\n \n     if ( prefixVertex.length > 0 ) {\n \n       prefixVertex += '\\n';\n \n     }\n \n     prefixFragment = [\n \n       customExtensions,\n       customDefines\n \n     ].filter( filterEmptyLine ).join( '\\n' );\n \n     if ( prefixFragment.length > 0 ) {\n \n       prefixFragment += '\\n';\n \n     }\n \n   } else {\n \n     prefixVertex = [\n \n       generatePrecision( parameters ),\n \n       '#define SHADER_NAME ' + parameters.shaderName,\n \n       customDefines,\n \n       parameters.instancing ? '#define USE_INSTANCING' : '',\n       parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',\n \n       parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n \n       '#define GAMMA_FACTOR ' + gammaFactorDefine,\n \n       '#define MAX_BONES ' + parameters.maxBones,\n       ( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n       ( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n \n       parameters.map ? '#define USE_MAP' : '',\n       parameters.envMap ? '#define USE_ENVMAP' : '',\n       parameters.envMap ? '#define ' + envMapModeDefine : '',\n       parameters.lightMap ? '#define USE_LIGHTMAP' : '',\n       parameters.aoMap ? '#define USE_AOMAP' : '',\n       parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n       parameters.bumpMap ? '#define USE_BUMPMAP' : '',\n       parameters.normalMap ? '#define USE_NORMALMAP' : '',\n       ( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n       ( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n \n       parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n       parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n       parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n \n       parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n \n       parameters.specularMap ? '#define USE_SPECULARMAP' : '',\n       parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',\n       parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',\n \n       parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n       parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n       parameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n \n       parameters.transmission ? '#define USE_TRANSMISSION' : '',\n       parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\n       parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\n \n       parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',\n       parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',\n \n       parameters.vertexTangents ? '#define USE_TANGENT' : '',\n       parameters.vertexColors ? '#define USE_COLOR' : '',\n       parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\n       parameters.vertexUvs ? '#define USE_UV' : '',\n       parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n \n       parameters.flatShading ? '#define FLAT_SHADED' : '',\n \n       parameters.skinning ? '#define USE_SKINNING' : '',\n       parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n \n       parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n       parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n       ( parameters.morphTargets && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE' : '',\n       ( parameters.morphTargets && parameters.isWebGL2 ) ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',\n       parameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n       parameters.flipSided ? '#define FLIP_SIDED' : '',\n \n       parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n       parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n \n       parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n \n       parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n       ( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n \n       'uniform mat4 modelMatrix;',\n       'uniform mat4 modelViewMatrix;',\n       'uniform mat4 projectionMatrix;',\n       'uniform mat4 viewMatrix;',\n       'uniform mat3 normalMatrix;',\n       'uniform vec3 cameraPosition;',\n       'uniform bool isOrthographic;',\n \n       '#ifdef USE_INSTANCING',\n \n       '\tattribute mat4 instanceMatrix;',\n \n       '#endif',\n \n       '#ifdef USE_INSTANCING_COLOR',\n \n       '\tattribute vec3 instanceColor;',\n \n       '#endif',\n \n       'attribute vec3 position;',\n       'attribute vec3 normal;',\n       'attribute vec2 uv;',\n \n       '#ifdef USE_TANGENT',\n \n       '\tattribute vec4 tangent;',\n \n       '#endif',\n \n       '#if defined( USE_COLOR_ALPHA )',\n \n       '\tattribute vec4 color;',\n \n       '#elif defined( USE_COLOR )',\n \n       '\tattribute vec3 color;',\n \n       '#endif',\n \n       '#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )',\n \n       '\tattribute vec3 morphTarget0;',\n       '\tattribute vec3 morphTarget1;',\n       '\tattribute vec3 morphTarget2;',\n       '\tattribute vec3 morphTarget3;',\n \n       '\t#ifdef USE_MORPHNORMALS',\n \n       '\t\tattribute vec3 morphNormal0;',\n       '\t\tattribute vec3 morphNormal1;',\n       '\t\tattribute vec3 morphNormal2;',\n       '\t\tattribute vec3 morphNormal3;',\n \n       '\t#else',\n \n       '\t\tattribute vec3 morphTarget4;',\n       '\t\tattribute vec3 morphTarget5;',\n       '\t\tattribute vec3 morphTarget6;',\n       '\t\tattribute vec3 morphTarget7;',\n \n       '\t#endif',\n \n       '#endif',\n \n       '#ifdef USE_SKINNING',\n \n       '\tattribute vec4 skinIndex;',\n       '\tattribute vec4 skinWeight;',\n \n       '#endif',\n \n       '\\n'\n \n     ].filter( filterEmptyLine ).join( '\\n' );\n \n     prefixFragment = [\n \n       customExtensions,\n \n       generatePrecision( parameters ),\n \n       '#define SHADER_NAME ' + parameters.shaderName,\n \n       customDefines,\n \n       '#define GAMMA_FACTOR ' + gammaFactorDefine,\n \n       ( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n       ( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n \n       parameters.map ? '#define USE_MAP' : '',\n       parameters.matcap ? '#define USE_MATCAP' : '',\n       parameters.envMap ? '#define USE_ENVMAP' : '',\n       parameters.envMap ? '#define ' + envMapTypeDefine : '',\n       parameters.envMap ? '#define ' + envMapModeDefine : '',\n       parameters.envMap ? '#define ' + envMapBlendingDefine : '',\n       parameters.lightMap ? '#define USE_LIGHTMAP' : '',\n       parameters.aoMap ? '#define USE_AOMAP' : '',\n       parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n       parameters.bumpMap ? '#define USE_BUMPMAP' : '',\n       parameters.normalMap ? '#define USE_NORMALMAP' : '',\n       ( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n       ( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n \n       parameters.clearcoat ? '#define USE_CLEARCOAT' : '',\n       parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n       parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n       parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n \n       parameters.specularMap ? '#define USE_SPECULARMAP' : '',\n       parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',\n       parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',\n       parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n       parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n \n       parameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n       parameters.alphaTest ? '#define USE_ALPHATEST' : '',\n \n       parameters.sheen ? '#define USE_SHEEN' : '',\n       parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',\n       parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',\n \n       parameters.transmission ? '#define USE_TRANSMISSION' : '',\n       parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\n       parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\n \n       parameters.vertexTangents ? '#define USE_TANGENT' : '',\n       parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '',\n       parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\n       parameters.vertexUvs ? '#define USE_UV' : '',\n       parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n \n       parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n \n       parameters.flatShading ? '#define FLAT_SHADED' : '',\n \n       parameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n       parameters.flipSided ? '#define FLIP_SIDED' : '',\n \n       parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n       parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n \n       parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n \n       parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n \n       parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n       ( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n \n       ( ( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ) ? '#define TEXTURE_LOD_EXT' : '',\n \n       'uniform mat4 viewMatrix;',\n       'uniform vec3 cameraPosition;',\n       'uniform bool isOrthographic;',\n \n       ( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n       ( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n       ( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n \n       parameters.dithering ? '#define DITHERING' : '',\n       parameters.format === RGBFormat ? '#define OPAQUE' : '',\n \n       ShaderChunk[ 'encodings_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below\n       parameters.map ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n       parameters.matcap ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',\n       parameters.envMap ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n       parameters.emissiveMap ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n       parameters.specularColorMap ? getTexelDecodingFunction( 'specularColorMapTexelToLinear', parameters.specularColorMapEncoding ) : '',\n       parameters.sheenColorMap ? getTexelDecodingFunction( 'sheenColorMapTexelToLinear', parameters.sheenColorMapEncoding ) : '',\n       parameters.lightMap ? getTexelDecodingFunction( 'lightMapTexelToLinear', parameters.lightMapEncoding ) : '',\n       getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ),\n \n       parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',\n \n       '\\n'\n \n     ].filter( filterEmptyLine ).join( '\\n' );\n \n   }\n \n   vertexShader = resolveIncludes( vertexShader );\n   vertexShader = replaceLightNums( vertexShader, parameters );\n   vertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n \n   fragmentShader = resolveIncludes( fragmentShader );\n   fragmentShader = replaceLightNums( fragmentShader, parameters );\n   fragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n \n   vertexShader = unrollLoops( vertexShader );\n   fragmentShader = unrollLoops( fragmentShader );\n \n   if ( parameters.isWebGL2 && parameters.isRawShaderMaterial !== true ) {\n \n     // GLSL 3.0 conversion for built-in materials and ShaderMaterial\n \n     versionString = '#version 300 es\\n';\n \n     prefixVertex = [\n       'precision mediump sampler2DArray;',\n       '#define attribute in',\n       '#define varying out',\n       '#define texture2D texture'\n     ].join( '\\n' ) + '\\n' + prefixVertex;\n \n     prefixFragment = [\n       '#define varying in',\n       ( parameters.glslVersion === GLSL3 ) ? '' : 'out highp vec4 pc_fragColor;',\n       ( parameters.glslVersion === GLSL3 ) ? '' : '#define gl_FragColor pc_fragColor',\n       '#define gl_FragDepthEXT gl_FragDepth',\n       '#define texture2D texture',\n       '#define textureCube texture',\n       '#define texture2DProj textureProj',\n       '#define texture2DLodEXT textureLod',\n       '#define texture2DProjLodEXT textureProjLod',\n       '#define textureCubeLodEXT textureLod',\n       '#define texture2DGradEXT textureGrad',\n       '#define texture2DProjGradEXT textureProjGrad',\n       '#define textureCubeGradEXT textureGrad'\n     ].join( '\\n' ) + '\\n' + prefixFragment;\n \n   }\n \n   const vertexGlsl = versionString + prefixVertex + vertexShader;\n   const fragmentGlsl = versionString + prefixFragment + fragmentShader;\n \n   // console.log( '*VERTEX*', vertexGlsl );\n   // console.log( '*FRAGMENT*', fragmentGlsl );\n \n   const glVertexShader = WebGLShader( gl, 35633, vertexGlsl );\n   const glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );\n \n   gl.attachShader( program, glVertexShader );\n   gl.attachShader( program, glFragmentShader );\n \n   // Force a particular attribute to index 0.\n \n   if ( parameters.index0AttributeName !== undefined ) {\n \n     gl.bindAttribLocation( program, 0, parameters.index0AttributeName );\n \n   } else if ( parameters.morphTargets === true ) {\n \n     // programs with morphTargets displace position out of attribute 0\n     gl.bindAttribLocation( program, 0, 'position' );\n \n   }\n \n   gl.linkProgram( program );\n \n   // check for link errors\n   if ( renderer.debug.checkShaderErrors ) {\n \n     const programLog = gl.getProgramInfoLog( program ).trim();\n     const vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n     const fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n \n     let runnable = true;\n     let haveDiagnostics = true;\n \n     if ( gl.getProgramParameter( program, 35714 ) === false ) {\n \n       runnable = false;\n \n       const vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\n       const fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\n \n       console.error(\n         'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +\n         'VALIDATE_STATUS ' + gl.getProgramParameter( program, 35715 ) + '\\n\\n' +\n         'Program Info Log: ' + programLog + '\\n' +\n         vertexErrors + '\\n' +\n         fragmentErrors\n       );\n \n     } else if ( programLog !== '' ) {\n \n       console.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );\n \n     } else if ( vertexLog === '' || fragmentLog === '' ) {\n \n       haveDiagnostics = false;\n \n     }\n \n     if ( haveDiagnostics ) {\n \n       this.diagnostics = {\n \n         runnable: runnable,\n \n         programLog: programLog,\n \n         vertexShader: {\n \n           log: vertexLog,\n           prefix: prefixVertex\n \n         },\n \n         fragmentShader: {\n \n           log: fragmentLog,\n           prefix: prefixFragment\n \n         }\n \n       };\n \n     }\n \n   }\n \n   // Clean up\n \n   // Crashes in iOS9 and iOS10. #18402\n   // gl.detachShader( program, glVertexShader );\n   // gl.detachShader( program, glFragmentShader );\n \n   gl.deleteShader( glVertexShader );\n   gl.deleteShader( glFragmentShader );\n \n   // set up caching for uniform locations\n \n   let cachedUniforms;\n \n   this.getUniforms = function () {\n \n     if ( cachedUniforms === undefined ) {\n \n       cachedUniforms = new WebGLUniforms( gl, program );\n \n     }\n \n     return cachedUniforms;\n \n   };\n \n   // set up caching for attribute locations\n \n   let cachedAttributes;\n \n   this.getAttributes = function () {\n \n     if ( cachedAttributes === undefined ) {\n \n       cachedAttributes = fetchAttributeLocations( gl, program );\n \n     }\n \n     return cachedAttributes;\n \n   };\n \n   // free resource\n \n   this.destroy = function () {\n \n     bindingStates.releaseStatesOfProgram( this );\n \n     gl.deleteProgram( program );\n     this.program = undefined;\n \n   };\n \n   //\n \n   this.name = parameters.shaderName;\n   this.id = programIdCount ++;\n   this.cacheKey = cacheKey;\n   this.usedTimes = 1;\n   this.program = program;\n   this.vertexShader = glVertexShader;\n   this.fragmentShader = glFragmentShader;\n \n   return this;\n \n }\n \n function WebGLPrograms( renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping ) {\n \n   const programs = [];\n \n   const isWebGL2 = capabilities.isWebGL2;\n   const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n   const floatVertexTextures = capabilities.floatVertexTextures;\n   const maxVertexUniforms = capabilities.maxVertexUniforms;\n   const vertexTextures = capabilities.vertexTextures;\n \n   let precision = capabilities.precision;\n \n   const shaderIDs = {\n     MeshDepthMaterial: 'depth',\n     MeshDistanceMaterial: 'distanceRGBA',\n     MeshNormalMaterial: 'normal',\n     MeshBasicMaterial: 'basic',\n     MeshLambertMaterial: 'lambert',\n     MeshPhongMaterial: 'phong',\n     MeshToonMaterial: 'toon',\n     MeshStandardMaterial: 'physical',\n     MeshPhysicalMaterial: 'physical',\n     MeshMatcapMaterial: 'matcap',\n     LineBasicMaterial: 'basic',\n     LineDashedMaterial: 'dashed',\n     PointsMaterial: 'points',\n     ShadowMaterial: 'shadow',\n     SpriteMaterial: 'sprite'\n   };\n \n   const parameterNames = [\n     'precision', 'isWebGL2', 'supportsVertexTextures', 'outputEncoding', 'instancing', 'instancingColor',\n     'map', 'mapEncoding', 'matcap', 'matcapEncoding', 'envMap', 'envMapMode', 'envMapEncoding', 'envMapCubeUV',\n     'lightMap', 'lightMapEncoding', 'aoMap', 'emissiveMap', 'emissiveMapEncoding', 'bumpMap', 'normalMap',\n     'objectSpaceNormalMap', 'tangentSpaceNormalMap',\n     'clearcoat', 'clearcoatMap', 'clearcoatRoughnessMap', 'clearcoatNormalMap',\n     'displacementMap', 'specularMap', , 'roughnessMap', 'metalnessMap', 'gradientMap',\n     'alphaMap', 'alphaTest', 'combine', 'vertexColors', 'vertexAlphas', 'vertexTangents', 'vertexUvs', 'uvsVertexOnly', 'fog', 'useFog', 'fogExp2',\n     'flatShading', 'sizeAttenuation', 'logarithmicDepthBuffer', 'skinning',\n     'maxBones', 'useVertexTexture', 'morphTargets', 'morphNormals', 'morphTargetsCount', 'premultipliedAlpha',\n     'numDirLights', 'numPointLights', 'numSpotLights', 'numHemiLights', 'numRectAreaLights',\n     'numDirLightShadows', 'numPointLightShadows', 'numSpotLightShadows',\n     'shadowMapEnabled', 'shadowMapType', 'toneMapping', 'physicallyCorrectLights',\n     'doubleSided', 'flipSided', 'numClippingPlanes', 'numClipIntersection', 'depthPacking', 'dithering', 'format',\n     'specularIntensityMap', 'specularColorMap', 'specularColorMapEncoding',\n     'transmission', 'transmissionMap', 'thicknessMap',\n     'sheen', 'sheenColorMap', 'sheenColorMapEncoding', 'sheenRoughnessMap'\n   ];\n \n   function getMaxBones( object ) {\n \n     const skeleton = object.skeleton;\n     const bones = skeleton.bones;\n \n     if ( floatVertexTextures ) {\n \n       return 1024;\n \n     } else {\n \n       // default for when object is not specified\n       // ( for example when prebuilding shader to be used with multiple objects )\n       //\n       //  - leave some extra space for other uniforms\n       //  - limit here is ANGLE's 254 max uniform vectors\n       //    (up to 54 should be safe)\n \n       const nVertexUniforms = maxVertexUniforms;\n       const nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n \n       const maxBones = Math.min( nVertexMatrices, bones.length );\n \n       if ( maxBones < bones.length ) {\n \n         console.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n         return 0;\n \n       }\n \n       return maxBones;\n \n     }\n \n   }\n \n   function getTextureEncodingFromMap( map ) {\n \n     let encoding;\n \n     if ( map && map.isTexture ) {\n \n       encoding = map.encoding;\n \n     } else if ( map && map.isWebGLRenderTarget ) {\n \n       console.warn( 'THREE.WebGLPrograms.getTextureEncodingFromMap: don\\'t use render targets as textures. Use their .texture property instead.' );\n       encoding = map.texture.encoding;\n \n     } else {\n \n       encoding = LinearEncoding;\n \n     }\n \n     /* if ( isWebGL2 && map && map.isTexture && map.format === RGBAFormat && map.type === UnsignedByteType && map.encoding === sRGBEncoding ) {\n \n       encoding = LinearEncoding; // disable inline decode for sRGB textures in WebGL 2\n \n     } */\n \n     return encoding;\n \n   }\n \n   function getParameters( material, lights, shadows, scene, object ) {\n \n     const fog = scene.fog;\n     const environment = material.isMeshStandardMaterial ? scene.environment : null;\n \n     const envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\n \n     const shaderID = shaderIDs[ material.type ];\n \n     // heuristics to create shader parameters according to lights in the scene\n     // (not to blow over maxLights budget)\n \n     const maxBones = object.isSkinnedMesh ? getMaxBones( object ) : 0;\n \n     if ( material.precision !== null ) {\n \n       precision = capabilities.getMaxPrecision( material.precision );\n \n       if ( precision !== material.precision ) {\n \n         console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n \n       }\n \n     }\n \n     let vertexShader, fragmentShader;\n \n     if ( shaderID ) {\n \n       const shader = ShaderLib[ shaderID ];\n \n       vertexShader = shader.vertexShader;\n       fragmentShader = shader.fragmentShader;\n \n     } else {\n \n       vertexShader = material.vertexShader;\n       fragmentShader = material.fragmentShader;\n \n     }\n \n     const currentRenderTarget = renderer.getRenderTarget();\n \n     const useAlphaTest = material.alphaTest > 0;\n     const useClearcoat = material.clearcoat > 0;\n \n     const parameters = {\n \n       isWebGL2: isWebGL2,\n \n       shaderID: shaderID,\n       shaderName: material.type,\n \n       vertexShader: vertexShader,\n       fragmentShader: fragmentShader,\n       defines: material.defines,\n \n       isRawShaderMaterial: material.isRawShaderMaterial === true,\n       glslVersion: material.glslVersion,\n \n       precision: precision,\n \n       instancing: object.isInstancedMesh === true,\n       instancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n \n       supportsVertexTextures: vertexTextures,\n       outputEncoding: ( currentRenderTarget !== null ) ? getTextureEncodingFromMap( currentRenderTarget.texture ) : renderer.outputEncoding,\n       map: !! material.map,\n       mapEncoding: getTextureEncodingFromMap( material.map ),\n       matcap: !! material.matcap,\n       matcapEncoding: getTextureEncodingFromMap( material.matcap ),\n       envMap: !! envMap,\n       envMapMode: envMap && envMap.mapping,\n       envMapEncoding: getTextureEncodingFromMap( envMap ),\n       envMapCubeUV: ( !! envMap ) && ( ( envMap.mapping === CubeUVReflectionMapping ) || ( envMap.mapping === CubeUVRefractionMapping ) ),\n       lightMap: !! material.lightMap,\n       lightMapEncoding: getTextureEncodingFromMap( material.lightMap ),\n       aoMap: !! material.aoMap,\n       emissiveMap: !! material.emissiveMap,\n       emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap ),\n       bumpMap: !! material.bumpMap,\n       normalMap: !! material.normalMap,\n       objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n       tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n \n       clearcoat: useClearcoat,\n       clearcoatMap: useClearcoat && !! material.clearcoatMap,\n       clearcoatRoughnessMap: useClearcoat && !! material.clearcoatRoughnessMap,\n       clearcoatNormalMap: useClearcoat && !! material.clearcoatNormalMap,\n \n       displacementMap: !! material.displacementMap,\n       roughnessMap: !! material.roughnessMap,\n       metalnessMap: !! material.metalnessMap,\n       specularMap: !! material.specularMap,\n       specularIntensityMap: !! material.specularIntensityMap,\n       specularColorMap: !! material.specularColorMap,\n       specularColorMapEncoding: getTextureEncodingFromMap( material.specularColorMap ),\n \n       alphaMap: !! material.alphaMap,\n       alphaTest: useAlphaTest,\n \n       gradientMap: !! material.gradientMap,\n \n       sheen: material.sheen > 0,\n       sheenColorMap: !! material.sheenColorMap,\n       sheenColorMapEncoding: getTextureEncodingFromMap( material.sheenColorMap ),\n       sheenRoughnessMap: !! material.sheenRoughnessMap,\n \n       transmission: material.transmission > 0,\n       transmissionMap: !! material.transmissionMap,\n       thicknessMap: !! material.thicknessMap,\n \n       combine: material.combine,\n \n       vertexTangents: ( !! material.normalMap && !! object.geometry && !! object.geometry.attributes.tangent ),\n       vertexColors: material.vertexColors,\n       vertexAlphas: material.vertexColors === true && !! object.geometry && !! object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4,\n       vertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.displacementMap || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularColorMap || !! material.sheenColorMap || material.sheenRoughnessMap,\n       uvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || material.transmission > 0 || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularColorMap || material.sheen > 0 || !! material.sheenColorMap || !! material.sheenRoughnessMap ) && !! material.displacementMap,\n \n       fog: !! fog,\n       useFog: material.fog,\n       fogExp2: ( fog && fog.isFogExp2 ),\n \n       flatShading: !! material.flatShading,\n \n       sizeAttenuation: material.sizeAttenuation,\n       logarithmicDepthBuffer: logarithmicDepthBuffer,\n \n       skinning: object.isSkinnedMesh === true && maxBones > 0,\n       maxBones: maxBones,\n       useVertexTexture: floatVertexTextures,\n \n       morphTargets: !! object.geometry && !! object.geometry.morphAttributes.position,\n       morphNormals: !! object.geometry && !! object.geometry.morphAttributes.normal,\n       morphTargetsCount: ( !! object.geometry && !! object.geometry.morphAttributes.position ) ? object.geometry.morphAttributes.position.length : 0,\n \n       numDirLights: lights.directional.length,\n       numPointLights: lights.point.length,\n       numSpotLights: lights.spot.length,\n       numRectAreaLights: lights.rectArea.length,\n       numHemiLights: lights.hemi.length,\n \n       numDirLightShadows: lights.directionalShadowMap.length,\n       numPointLightShadows: lights.pointShadowMap.length,\n       numSpotLightShadows: lights.spotShadowMap.length,\n \n       numClippingPlanes: clipping.numPlanes,\n       numClipIntersection: clipping.numIntersection,\n \n       format: material.format,\n       dithering: material.dithering,\n \n       shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n       shadowMapType: renderer.shadowMap.type,\n \n       toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n       physicallyCorrectLights: renderer.physicallyCorrectLights,\n \n       premultipliedAlpha: material.premultipliedAlpha,\n \n       doubleSided: material.side === DoubleSide,\n       flipSided: material.side === BackSide,\n \n       depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false,\n \n       index0AttributeName: material.index0AttributeName,\n \n       extensionDerivatives: material.extensions && material.extensions.derivatives,\n       extensionFragDepth: material.extensions && material.extensions.fragDepth,\n       extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n       extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n \n       rendererExtensionFragDepth: isWebGL2 || extensions.has( 'EXT_frag_depth' ),\n       rendererExtensionDrawBuffers: isWebGL2 || extensions.has( 'WEBGL_draw_buffers' ),\n       rendererExtensionShaderTextureLod: isWebGL2 || extensions.has( 'EXT_shader_texture_lod' ),\n \n       customProgramCacheKey: material.customProgramCacheKey()\n \n     };\n \n     return parameters;\n \n   }\n \n   function getProgramCacheKey( parameters ) {\n \n     const array = [];\n \n     if ( parameters.shaderID ) {\n \n       array.push( parameters.shaderID );\n \n     } else {\n \n       array.push( hashString( parameters.fragmentShader ) );\n       array.push( hashString( parameters.vertexShader ) );\n \n     }\n \n     if ( parameters.defines !== undefined ) {\n \n       for ( const name in parameters.defines ) {\n \n         array.push( name );\n         array.push( parameters.defines[ name ] );\n \n       }\n \n     }\n \n     if ( parameters.isRawShaderMaterial === false ) {\n \n       for ( let i = 0; i < parameterNames.length; i ++ ) {\n \n         array.push( parameters[ parameterNames[ i ] ] );\n \n       }\n \n       array.push( renderer.outputEncoding );\n       array.push( renderer.gammaFactor );\n \n     }\n \n     array.push( parameters.customProgramCacheKey );\n \n     return array.join();\n \n   }\n \n   function getUniforms( material ) {\n \n     const shaderID = shaderIDs[ material.type ];\n     let uniforms;\n \n     if ( shaderID ) {\n \n       const shader = ShaderLib[ shaderID ];\n       uniforms = UniformsUtils.clone( shader.uniforms );\n \n     } else {\n \n       uniforms = material.uniforms;\n \n     }\n \n     return uniforms;\n \n   }\n \n   function acquireProgram( parameters, cacheKey ) {\n \n     let program;\n \n     // Check if code has been already compiled\n     for ( let p = 0, pl = programs.length; p < pl; p ++ ) {\n \n       const preexistingProgram = programs[ p ];\n \n       if ( preexistingProgram.cacheKey === cacheKey ) {\n \n         program = preexistingProgram;\n         ++ program.usedTimes;\n \n         break;\n \n       }\n \n     }\n \n     if ( program === undefined ) {\n \n       program = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );\n       programs.push( program );\n \n     }\n \n     return program;\n \n   }\n \n   function releaseProgram( program ) {\n \n     if ( -- program.usedTimes === 0 ) {\n \n       // Remove from unordered set\n       const i = programs.indexOf( program );\n       programs[ i ] = programs[ programs.length - 1 ];\n       programs.pop();\n \n       // Free WebGL resources\n       program.destroy();\n \n     }\n \n   }\n \n   return {\n     getParameters: getParameters,\n     getProgramCacheKey: getProgramCacheKey,\n     getUniforms: getUniforms,\n     acquireProgram: acquireProgram,\n     releaseProgram: releaseProgram,\n     // Exposed for resource monitoring & error feedback via renderer.info:\n     programs: programs\n   };\n \n }\n \n function WebGLProperties() {\n \n   let properties = new WeakMap();\n \n   function get( object ) {\n \n     let map = properties.get( object );\n \n     if ( map === undefined ) {\n \n       map = {};\n       properties.set( object, map );\n \n     }\n \n     return map;\n \n   }\n \n   function remove( object ) {\n \n     properties.delete( object );\n \n   }\n \n   function update( object, key, value ) {\n \n     properties.get( object )[ key ] = value;\n \n   }\n \n   function dispose() {\n \n     properties = new WeakMap();\n \n   }\n \n   return {\n     get: get,\n     remove: remove,\n     update: update,\n     dispose: dispose\n   };\n \n }\n \n function painterSortStable( a, b ) {\n \n   if ( a.groupOrder !== b.groupOrder ) {\n \n     return a.groupOrder - b.groupOrder;\n \n   } else if ( a.renderOrder !== b.renderOrder ) {\n \n     return a.renderOrder - b.renderOrder;\n \n   } else if ( a.program !== b.program ) {\n \n     return a.program.id - b.program.id;\n \n   } else if ( a.material.id !== b.material.id ) {\n \n     return a.material.id - b.material.id;\n \n   } else if ( a.z !== b.z ) {\n \n     return a.z - b.z;\n \n   } else {\n \n     return a.id - b.id;\n \n   }\n \n }\n \n function reversePainterSortStable( a, b ) {\n \n   if ( a.groupOrder !== b.groupOrder ) {\n \n     return a.groupOrder - b.groupOrder;\n \n   } else if ( a.renderOrder !== b.renderOrder ) {\n \n     return a.renderOrder - b.renderOrder;\n \n   } else if ( a.z !== b.z ) {\n \n     return b.z - a.z;\n \n   } else {\n \n     return a.id - b.id;\n \n   }\n \n }\n \n \n function WebGLRenderList( properties ) {\n \n   const renderItems = [];\n   let renderItemsIndex = 0;\n \n   const opaque = [];\n   const transmissive = [];\n   const transparent = [];\n \n   const defaultProgram = { id: - 1 };\n \n   function init() {\n \n     renderItemsIndex = 0;\n \n     opaque.length = 0;\n     transmissive.length = 0;\n     transparent.length = 0;\n \n   }\n \n   function getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n \n     let renderItem = renderItems[ renderItemsIndex ];\n     const materialProperties = properties.get( material );\n \n     if ( renderItem === undefined ) {\n \n       renderItem = {\n         id: object.id,\n         object: object,\n         geometry: geometry,\n         material: material,\n         program: materialProperties.program || defaultProgram,\n         groupOrder: groupOrder,\n         renderOrder: object.renderOrder,\n         z: z,\n         group: group\n       };\n \n       renderItems[ renderItemsIndex ] = renderItem;\n \n     } else {\n \n       renderItem.id = object.id;\n       renderItem.object = object;\n       renderItem.geometry = geometry;\n       renderItem.material = material;\n       renderItem.program = materialProperties.program || defaultProgram;\n       renderItem.groupOrder = groupOrder;\n       renderItem.renderOrder = object.renderOrder;\n       renderItem.z = z;\n       renderItem.group = group;\n \n     }\n \n     renderItemsIndex ++;\n \n     return renderItem;\n \n   }\n \n   function push( object, geometry, material, groupOrder, z, group ) {\n \n     const renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n \n     if ( material.transmission > 0.0 ) {\n \n       transmissive.push( renderItem );\n \n     } else if ( material.transparent === true ) {\n \n       transparent.push( renderItem );\n \n     } else {\n \n       opaque.push( renderItem );\n \n     }\n \n   }\n \n   function unshift( object, geometry, material, groupOrder, z, group ) {\n \n     const renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n \n     if ( material.transmission > 0.0 ) {\n \n       transmissive.unshift( renderItem );\n \n     } else if ( material.transparent === true ) {\n \n       transparent.unshift( renderItem );\n \n     } else {\n \n       opaque.unshift( renderItem );\n \n     }\n \n   }\n \n   function sort( customOpaqueSort, customTransparentSort ) {\n \n     if ( opaque.length > 1 ) opaque.sort( customOpaqueSort || painterSortStable );\n     if ( transmissive.length > 1 ) transmissive.sort( customTransparentSort || reversePainterSortStable );\n     if ( transparent.length > 1 ) transparent.sort( customTransparentSort || reversePainterSortStable );\n \n   }\n \n   function finish() {\n \n     // Clear references from inactive renderItems in the list\n \n     for ( let i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {\n \n       const renderItem = renderItems[ i ];\n \n       if ( renderItem.id === null ) break;\n \n       renderItem.id = null;\n       renderItem.object = null;\n       renderItem.geometry = null;\n       renderItem.material = null;\n       renderItem.program = null;\n       renderItem.group = null;\n \n     }\n \n   }\n \n   return {\n \n     opaque: opaque,\n     transmissive: transmissive,\n     transparent: transparent,\n \n     init: init,\n     push: push,\n     unshift: unshift,\n     finish: finish,\n \n     sort: sort\n   };\n \n }\n \n function WebGLRenderLists( properties ) {\n \n   let lists = new WeakMap();\n \n   function get( scene, renderCallDepth ) {\n \n     let list;\n \n     if ( lists.has( scene ) === false ) {\n \n       list = new WebGLRenderList( properties );\n       lists.set( scene, [ list ] );\n \n     } else {\n \n       if ( renderCallDepth >= lists.get( scene ).length ) {\n \n         list = new WebGLRenderList( properties );\n         lists.get( scene ).push( list );\n \n       } else {\n \n         list = lists.get( scene )[ renderCallDepth ];\n \n       }\n \n     }\n \n     return list;\n \n   }\n \n   function dispose() {\n \n     lists = new WeakMap();\n \n   }\n \n   return {\n     get: get,\n     dispose: dispose\n   };\n \n }\n \n function UniformsCache() {\n \n   const lights = {};\n \n   return {\n \n     get: function ( light ) {\n \n       if ( lights[ light.id ] !== undefined ) {\n \n         return lights[ light.id ];\n \n       }\n \n       let uniforms;\n \n       switch ( light.type ) {\n \n         case 'DirectionalLight':\n           uniforms = {\n             direction: new Vector3(),\n             color: new Color()\n           };\n           break;\n \n         case 'SpotLight':\n           uniforms = {\n             position: new Vector3(),\n             direction: new Vector3(),\n             color: new Color(),\n             distance: 0,\n             coneCos: 0,\n             penumbraCos: 0,\n             decay: 0\n           };\n           break;\n \n         case 'PointLight':\n           uniforms = {\n             position: new Vector3(),\n             color: new Color(),\n             distance: 0,\n             decay: 0\n           };\n           break;\n \n         case 'HemisphereLight':\n           uniforms = {\n             direction: new Vector3(),\n             skyColor: new Color(),\n             groundColor: new Color()\n           };\n           break;\n \n         case 'RectAreaLight':\n           uniforms = {\n             color: new Color(),\n             position: new Vector3(),\n             halfWidth: new Vector3(),\n             halfHeight: new Vector3()\n           };\n           break;\n \n       }\n \n       lights[ light.id ] = uniforms;\n \n       return uniforms;\n \n     }\n \n   };\n \n }\n \n function ShadowUniformsCache() {\n \n   const lights = {};\n \n   return {\n \n     get: function ( light ) {\n \n       if ( lights[ light.id ] !== undefined ) {\n \n         return lights[ light.id ];\n \n       }\n \n       let uniforms;\n \n       switch ( light.type ) {\n \n         case 'DirectionalLight':\n           uniforms = {\n             shadowBias: 0,\n             shadowNormalBias: 0,\n             shadowRadius: 1,\n             shadowMapSize: new Vector2()\n           };\n           break;\n \n         case 'SpotLight':\n           uniforms = {\n             shadowBias: 0,\n             shadowNormalBias: 0,\n             shadowRadius: 1,\n             shadowMapSize: new Vector2()\n           };\n           break;\n \n         case 'PointLight':\n           uniforms = {\n             shadowBias: 0,\n             shadowNormalBias: 0,\n             shadowRadius: 1,\n             shadowMapSize: new Vector2(),\n             shadowCameraNear: 1,\n             shadowCameraFar: 1000\n           };\n           break;\n \n         // TODO (abelnation): set RectAreaLight shadow uniforms\n \n       }\n \n       lights[ light.id ] = uniforms;\n \n       return uniforms;\n \n     }\n \n   };\n \n }\n \n \n \n let nextVersion = 0;\n \n function shadowCastingLightsFirst( lightA, lightB ) {\n \n   return ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );\n \n }\n \n function WebGLLights( extensions, capabilities ) {\n \n   const cache = new UniformsCache();\n \n   const shadowCache = ShadowUniformsCache();\n \n   const state = {\n \n     version: 0,\n \n     hash: {\n       directionalLength: - 1,\n       pointLength: - 1,\n       spotLength: - 1,\n       rectAreaLength: - 1,\n       hemiLength: - 1,\n \n       numDirectionalShadows: - 1,\n       numPointShadows: - 1,\n       numSpotShadows: - 1\n     },\n \n     ambient: [ 0, 0, 0 ],\n     probe: [],\n     directional: [],\n     directionalShadow: [],\n     directionalShadowMap: [],\n     directionalShadowMatrix: [],\n     spot: [],\n     spotShadow: [],\n     spotShadowMap: [],\n     spotShadowMatrix: [],\n     rectArea: [],\n     rectAreaLTC1: null,\n     rectAreaLTC2: null,\n     point: [],\n     pointShadow: [],\n     pointShadowMap: [],\n     pointShadowMatrix: [],\n     hemi: []\n \n   };\n \n   for ( let i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );\n \n   const vector3 = new Vector3();\n   const matrix4 = new Matrix4();\n   const matrix42 = new Matrix4();\n \n   function setup( lights, physicallyCorrectLights ) {\n \n     let r = 0, g = 0, b = 0;\n \n     for ( let i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );\n \n     let directionalLength = 0;\n     let pointLength = 0;\n     let spotLength = 0;\n     let rectAreaLength = 0;\n     let hemiLength = 0;\n \n     let numDirectionalShadows = 0;\n     let numPointShadows = 0;\n     let numSpotShadows = 0;\n \n     lights.sort( shadowCastingLightsFirst );\n \n     // artist-friendly light intensity scaling factor\n     const scaleFactor = ( physicallyCorrectLights !== true ) ? Math.PI : 1;\n \n     for ( let i = 0, l = lights.length; i < l; i ++ ) {\n \n       const light = lights[ i ];\n \n       const color = light.color;\n       const intensity = light.intensity;\n       const distance = light.distance;\n \n       const shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n \n       if ( light.isAmbientLight ) {\n \n         r += color.r * intensity * scaleFactor;\n         g += color.g * intensity * scaleFactor;\n         b += color.b * intensity * scaleFactor;\n \n       } else if ( light.isLightProbe ) {\n \n         for ( let j = 0; j < 9; j ++ ) {\n \n           state.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n \n         }\n \n       } else if ( light.isDirectionalLight ) {\n \n         const uniforms = cache.get( light );\n \n         uniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );\n \n         if ( light.castShadow ) {\n \n           const shadow = light.shadow;\n \n           const shadowUniforms = shadowCache.get( light );\n \n           shadowUniforms.shadowBias = shadow.bias;\n           shadowUniforms.shadowNormalBias = shadow.normalBias;\n           shadowUniforms.shadowRadius = shadow.radius;\n           shadowUniforms.shadowMapSize = shadow.mapSize;\n \n           state.directionalShadow[ directionalLength ] = shadowUniforms;\n           state.directionalShadowMap[ directionalLength ] = shadowMap;\n           state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n \n           numDirectionalShadows ++;\n \n         }\n \n         state.directional[ directionalLength ] = uniforms;\n \n         directionalLength ++;\n \n       } else if ( light.isSpotLight ) {\n \n         const uniforms = cache.get( light );\n \n         uniforms.position.setFromMatrixPosition( light.matrixWorld );\n \n         uniforms.color.copy( color ).multiplyScalar( intensity * scaleFactor );\n         uniforms.distance = distance;\n \n         uniforms.coneCos = Math.cos( light.angle );\n         uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n         uniforms.decay = light.decay;\n \n         if ( light.castShadow ) {\n \n           const shadow = light.shadow;\n \n           const shadowUniforms = shadowCache.get( light );\n \n           shadowUniforms.shadowBias = shadow.bias;\n           shadowUniforms.shadowNormalBias = shadow.normalBias;\n           shadowUniforms.shadowRadius = shadow.radius;\n           shadowUniforms.shadowMapSize = shadow.mapSize;\n \n           state.spotShadow[ spotLength ] = shadowUniforms;\n           state.spotShadowMap[ spotLength ] = shadowMap;\n           state.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n \n           numSpotShadows ++;\n \n         }\n \n         state.spot[ spotLength ] = uniforms;\n \n         spotLength ++;\n \n       } else if ( light.isRectAreaLight ) {\n \n         const uniforms = cache.get( light );\n \n         // (a) intensity is the total visible light emitted\n         //uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n \n         // (b) intensity is the brightness of the light\n         uniforms.color.copy( color ).multiplyScalar( intensity );\n \n         uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n         uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n \n         state.rectArea[ rectAreaLength ] = uniforms;\n \n         rectAreaLength ++;\n \n       } else if ( light.isPointLight ) {\n \n         const uniforms = cache.get( light );\n \n         uniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );\n         uniforms.distance = light.distance;\n         uniforms.decay = light.decay;\n \n         if ( light.castShadow ) {\n \n           const shadow = light.shadow;\n \n           const shadowUniforms = shadowCache.get( light );\n \n           shadowUniforms.shadowBias = shadow.bias;\n           shadowUniforms.shadowNormalBias = shadow.normalBias;\n           shadowUniforms.shadowRadius = shadow.radius;\n           shadowUniforms.shadowMapSize = shadow.mapSize;\n           shadowUniforms.shadowCameraNear = shadow.camera.near;\n           shadowUniforms.shadowCameraFar = shadow.camera.far;\n \n           state.pointShadow[ pointLength ] = shadowUniforms;\n           state.pointShadowMap[ pointLength ] = shadowMap;\n           state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n \n           numPointShadows ++;\n \n         }\n \n         state.point[ pointLength ] = uniforms;\n \n         pointLength ++;\n \n       } else if ( light.isHemisphereLight ) {\n \n         const uniforms = cache.get( light );\n \n         uniforms.skyColor.copy( light.color ).multiplyScalar( intensity * scaleFactor );\n         uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity * scaleFactor );\n \n         state.hemi[ hemiLength ] = uniforms;\n \n         hemiLength ++;\n \n       }\n \n     }\n \n     if ( rectAreaLength > 0 ) {\n \n       if ( capabilities.isWebGL2 ) {\n \n         // WebGL 2\n \n         state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n         state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n \n       } else {\n \n         // WebGL 1\n \n         if ( extensions.has( 'OES_texture_float_linear' ) === true ) {\n \n           state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n           state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n \n         } else if ( extensions.has( 'OES_texture_half_float_linear' ) === true ) {\n \n           state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n           state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n \n         } else {\n \n           console.error( 'THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.' );\n \n         }\n \n       }\n \n     }\n \n     state.ambient[ 0 ] = r;\n     state.ambient[ 1 ] = g;\n     state.ambient[ 2 ] = b;\n \n     const hash = state.hash;\n \n     if ( hash.directionalLength !== directionalLength ||\n       hash.pointLength !== pointLength ||\n       hash.spotLength !== spotLength ||\n       hash.rectAreaLength !== rectAreaLength ||\n       hash.hemiLength !== hemiLength ||\n       hash.numDirectionalShadows !== numDirectionalShadows ||\n       hash.numPointShadows !== numPointShadows ||\n       hash.numSpotShadows !== numSpotShadows ) {\n \n       state.directional.length = directionalLength;\n       state.spot.length = spotLength;\n       state.rectArea.length = rectAreaLength;\n       state.point.length = pointLength;\n       state.hemi.length = hemiLength;\n \n       state.directionalShadow.length = numDirectionalShadows;\n       state.directionalShadowMap.length = numDirectionalShadows;\n       state.pointShadow.length = numPointShadows;\n       state.pointShadowMap.length = numPointShadows;\n       state.spotShadow.length = numSpotShadows;\n       state.spotShadowMap.length = numSpotShadows;\n       state.directionalShadowMatrix.length = numDirectionalShadows;\n       state.pointShadowMatrix.length = numPointShadows;\n       state.spotShadowMatrix.length = numSpotShadows;\n \n       hash.directionalLength = directionalLength;\n       hash.pointLength = pointLength;\n       hash.spotLength = spotLength;\n       hash.rectAreaLength = rectAreaLength;\n       hash.hemiLength = hemiLength;\n \n       hash.numDirectionalShadows = numDirectionalShadows;\n       hash.numPointShadows = numPointShadows;\n       hash.numSpotShadows = numSpotShadows;\n \n       state.version = nextVersion ++;\n \n     }\n \n   }\n \n   function setupView( lights, camera ) {\n \n     let directionalLength = 0;\n     let pointLength = 0;\n     let spotLength = 0;\n     let rectAreaLength = 0;\n     let hemiLength = 0;\n \n     const viewMatrix = camera.matrixWorldInverse;\n \n     for ( let i = 0, l = lights.length; i < l; i ++ ) {\n \n       const light = lights[ i ];\n \n       if ( light.isDirectionalLight ) {\n \n         const uniforms = state.directional[ directionalLength ];\n \n         uniforms.direction.setFromMatrixPosition( light.matrixWorld );\n         vector3.setFromMatrixPosition( light.target.matrixWorld );\n         uniforms.direction.sub( vector3 );\n         uniforms.direction.transformDirection( viewMatrix );\n \n         directionalLength ++;\n \n       } else if ( light.isSpotLight ) {\n \n         const uniforms = state.spot[ spotLength ];\n \n         uniforms.position.setFromMatrixPosition( light.matrixWorld );\n         uniforms.position.applyMatrix4( viewMatrix );\n \n         uniforms.direction.setFromMatrixPosition( light.matrixWorld );\n         vector3.setFromMatrixPosition( light.target.matrixWorld );\n         uniforms.direction.sub( vector3 );\n         uniforms.direction.transformDirection( viewMatrix );\n \n         spotLength ++;\n \n       } else if ( light.isRectAreaLight ) {\n \n         const uniforms = state.rectArea[ rectAreaLength ];\n \n         uniforms.position.setFromMatrixPosition( light.matrixWorld );\n         uniforms.position.applyMatrix4( viewMatrix );\n \n         // extract local rotation of light to derive width/height half vectors\n         matrix42.identity();\n         matrix4.copy( light.matrixWorld );\n         matrix4.premultiply( viewMatrix );\n         matrix42.extractRotation( matrix4 );\n \n         uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n         uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n \n         uniforms.halfWidth.applyMatrix4( matrix42 );\n         uniforms.halfHeight.applyMatrix4( matrix42 );\n \n         rectAreaLength ++;\n \n       } else if ( light.isPointLight ) {\n \n         const uniforms = state.point[ pointLength ];\n \n         uniforms.position.setFromMatrixPosition( light.matrixWorld );\n         uniforms.position.applyMatrix4( viewMatrix );\n \n         pointLength ++;\n \n       } else if ( light.isHemisphereLight ) {\n \n         const uniforms = state.hemi[ hemiLength ];\n \n         uniforms.direction.setFromMatrixPosition( light.matrixWorld );\n         uniforms.direction.transformDirection( viewMatrix );\n         uniforms.direction.normalize();\n \n         hemiLength ++;\n \n       }\n \n     }\n \n   }\n \n   return {\n     setup: setup,\n     setupView: setupView,\n     state: state\n   };\n \n }\n \n function WebGLRenderState( extensions, capabilities ) {\n \n   const lights = new WebGLLights( extensions, capabilities );\n \n   const lightsArray = [];\n   const shadowsArray = [];\n \n   function init() {\n \n     lightsArray.length = 0;\n     shadowsArray.length = 0;\n \n   }\n \n   function pushLight( light ) {\n \n     lightsArray.push( light );\n \n   }\n \n   function pushShadow( shadowLight ) {\n \n     shadowsArray.push( shadowLight );\n \n   }\n \n   function setupLights( physicallyCorrectLights ) {\n \n     lights.setup( lightsArray, physicallyCorrectLights );\n \n   }\n \n   function setupLightsView( camera ) {\n \n     lights.setupView( lightsArray, camera );\n \n   }\n \n   const state = {\n     lightsArray: lightsArray,\n     shadowsArray: shadowsArray,\n \n     lights: lights\n   };\n \n   return {\n     init: init,\n     state: state,\n     setupLights: setupLights,\n     setupLightsView: setupLightsView,\n \n     pushLight: pushLight,\n     pushShadow: pushShadow\n   };\n \n }\n \n function WebGLRenderStates( extensions, capabilities ) {\n \n   let renderStates = new WeakMap();\n \n   function get( scene, renderCallDepth = 0 ) {\n \n     let renderState;\n \n     if ( renderStates.has( scene ) === false ) {\n \n       renderState = new WebGLRenderState( extensions, capabilities );\n       renderStates.set( scene, [ renderState ] );\n \n     } else {\n \n       if ( renderCallDepth >= renderStates.get( scene ).length ) {\n \n         renderState = new WebGLRenderState( extensions, capabilities );\n         renderStates.get( scene ).push( renderState );\n \n       } else {\n \n         renderState = renderStates.get( scene )[ renderCallDepth ];\n \n       }\n \n     }\n \n     return renderState;\n \n   }\n \n   function dispose() {\n \n     renderStates = new WeakMap();\n \n   }\n \n   return {\n     get: get,\n     dispose: dispose\n   };\n \n }\n \n /**\n  * parameters = {\n  *\n  *  opacity: <float>,\n  *\n  *  map: new THREE.Texture( <Image> ),\n  *\n  *  alphaMap: new THREE.Texture( <Image> ),\n  *\n  *  displacementMap: new THREE.Texture( <Image> ),\n  *  displacementScale: <float>,\n  *  displacementBias: <float>,\n  *\n  *  wireframe: <boolean>,\n  *  wireframeLinewidth: <float>\n  * }\n  */\n \n class MeshDepthMaterial extends Material {\n \n   constructor( parameters ) {\n \n     super();\n \n     this.type = 'MeshDepthMaterial';\n \n     this.depthPacking = BasicDepthPacking;\n \n     this.map = null;\n \n     this.alphaMap = null;\n \n     this.displacementMap = null;\n     this.displacementScale = 1;\n     this.displacementBias = 0;\n \n     this.wireframe = false;\n     this.wireframeLinewidth = 1;\n \n     this.fog = false;\n \n     this.setValues( parameters );\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.depthPacking = source.depthPacking;\n \n     this.map = source.map;\n \n     this.alphaMap = source.alphaMap;\n \n     this.displacementMap = source.displacementMap;\n     this.displacementScale = source.displacementScale;\n     this.displacementBias = source.displacementBias;\n \n     this.wireframe = source.wireframe;\n     this.wireframeLinewidth = source.wireframeLinewidth;\n \n     return this;\n \n   }\n \n }\n \n MeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n \n /**\n  * parameters = {\n  *\n  *  referencePosition: <float>,\n  *  nearDistance: <float>,\n  *  farDistance: <float>,\n  *\n  *  map: new THREE.Texture( <Image> ),\n  *\n  *  alphaMap: new THREE.Texture( <Image> ),\n  *\n  *  displacementMap: new THREE.Texture( <Image> ),\n  *  displacementScale: <float>,\n  *  displacementBias: <float>\n  *\n  * }\n  */\n \n class MeshDistanceMaterial extends Material {\n \n   constructor( parameters ) {\n \n     super();\n \n     this.type = 'MeshDistanceMaterial';\n \n     this.referencePosition = new Vector3();\n     this.nearDistance = 1;\n     this.farDistance = 1000;\n \n     this.map = null;\n \n     this.alphaMap = null;\n \n     this.displacementMap = null;\n     this.displacementScale = 1;\n     this.displacementBias = 0;\n \n     this.fog = false;\n \n     this.setValues( parameters );\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.referencePosition.copy( source.referencePosition );\n     this.nearDistance = source.nearDistance;\n     this.farDistance = source.farDistance;\n \n     this.map = source.map;\n \n     this.alphaMap = source.alphaMap;\n \n     this.displacementMap = source.displacementMap;\n     this.displacementScale = source.displacementScale;\n     this.displacementBias = source.displacementBias;\n \n     return this;\n \n   }\n \n }\n \n MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n \n const vertex = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n \n const fragment = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tconst float samples = float( VSM_SAMPLES );\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\\n\\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\\n\\tfor ( float i = 0.0; i < samples; i ++ ) {\\n\\t\\tfloat uvOffset = uvStart + i * uvStride;\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean / samples;\\n\\tsquared_mean = squared_mean / samples;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n \n function WebGLShadowMap( _renderer, _objects, _capabilities ) {\n \n   let _frustum = new Frustum();\n \n   const _shadowMapSize = new Vector2(),\n     _viewportSize = new Vector2(),\n \n     _viewport = new Vector4(),\n \n     _depthMaterial = new MeshDepthMaterial( { depthPacking: RGBADepthPacking } ),\n     _distanceMaterial = new MeshDistanceMaterial(),\n \n     _materialCache = {},\n \n     _maxTextureSize = _capabilities.maxTextureSize;\n \n   const shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n \n   const shadowMaterialVertical = new ShaderMaterial( {\n     defines: {\n       VSM_SAMPLES: 8\n     },\n     uniforms: {\n       shadow_pass: { value: null },\n       resolution: { value: new Vector2() },\n       radius: { value: 4.0 }\n     },\n \n     vertexShader: vertex,\n     fragmentShader: fragment\n \n   } );\n \n   const shadowMaterialHorizontal = shadowMaterialVertical.clone();\n   shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n \n   const fullScreenTri = new BufferGeometry();\n   fullScreenTri.setAttribute(\n     'position',\n     new BufferAttribute(\n       new Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\n       3\n     )\n   );\n \n   const fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\n \n   const scope = this;\n \n   this.enabled = false;\n \n   this.autoUpdate = true;\n   this.needsUpdate = false;\n \n   this.type = PCFShadowMap;\n \n   this.render = function ( lights, scene, camera ) {\n \n     if ( scope.enabled === false ) return;\n     if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n \n     if ( lights.length === 0 ) return;\n \n     const currentRenderTarget = _renderer.getRenderTarget();\n     const activeCubeFace = _renderer.getActiveCubeFace();\n     const activeMipmapLevel = _renderer.getActiveMipmapLevel();\n \n     const _state = _renderer.state;\n \n     // Set GL state for depth map.\n     _state.setBlending( NoBlending );\n     _state.buffers.color.setClear( 1, 1, 1, 1 );\n     _state.buffers.depth.setTest( true );\n     _state.setScissorTest( false );\n \n     // render depth map\n \n     for ( let i = 0, il = lights.length; i < il; i ++ ) {\n \n       const light = lights[ i ];\n       const shadow = light.shadow;\n \n       if ( shadow === undefined ) {\n \n         console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n         continue;\n \n       }\n \n       if ( shadow.autoUpdate === false && shadow.needsUpdate === false ) continue;\n \n       _shadowMapSize.copy( shadow.mapSize );\n \n       const shadowFrameExtents = shadow.getFrameExtents();\n \n       _shadowMapSize.multiply( shadowFrameExtents );\n \n       _viewportSize.copy( shadow.mapSize );\n \n       if ( _shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize ) {\n \n         if ( _shadowMapSize.x > _maxTextureSize ) {\n \n           _viewportSize.x = Math.floor( _maxTextureSize / shadowFrameExtents.x );\n           _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n           shadow.mapSize.x = _viewportSize.x;\n \n         }\n \n         if ( _shadowMapSize.y > _maxTextureSize ) {\n \n           _viewportSize.y = Math.floor( _maxTextureSize / shadowFrameExtents.y );\n           _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n           shadow.mapSize.y = _viewportSize.y;\n \n         }\n \n       }\n \n       if ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n \n         const pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n \n         shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n         shadow.map.texture.name = light.name + '.shadowMap';\n \n         shadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n \n         shadow.camera.updateProjectionMatrix();\n \n       }\n \n       if ( shadow.map === null ) {\n \n         const pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n \n         shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n         shadow.map.texture.name = light.name + '.shadowMap';\n \n         shadow.camera.updateProjectionMatrix();\n \n       }\n \n       _renderer.setRenderTarget( shadow.map );\n       _renderer.clear();\n \n       const viewportCount = shadow.getViewportCount();\n \n       for ( let vp = 0; vp < viewportCount; vp ++ ) {\n \n         const viewport = shadow.getViewport( vp );\n \n         _viewport.set(\n           _viewportSize.x * viewport.x,\n           _viewportSize.y * viewport.y,\n           _viewportSize.x * viewport.z,\n           _viewportSize.y * viewport.w\n         );\n \n         _state.viewport( _viewport );\n \n         shadow.updateMatrices( light, vp );\n \n         _frustum = shadow.getFrustum();\n \n         renderObject( scene, camera, shadow.camera, light, this.type );\n \n       }\n \n       // do blur pass for VSM\n \n       if ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n \n         VSMPass( shadow, camera );\n \n       }\n \n       shadow.needsUpdate = false;\n \n     }\n \n     scope.needsUpdate = false;\n \n     _renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\n \n   };\n \n   function VSMPass( shadow, camera ) {\n \n     const geometry = _objects.update( fullScreenMesh );\n \n     if ( shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples ) {\n \n       shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;\n       shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;\n \n       shadowMaterialVertical.needsUpdate = true;\n       shadowMaterialHorizontal.needsUpdate = true;\n \n     }\n \n     // vertical pass\n \n     shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n     shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n     shadowMaterialVertical.uniforms.radius.value = shadow.radius;\n     _renderer.setRenderTarget( shadow.mapPass );\n     _renderer.clear();\n     _renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\n \n     // horizontal pass\n \n     shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n     shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n     shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n     _renderer.setRenderTarget( shadow.map );\n     _renderer.clear();\n     _renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null );\n \n   }\n \n   function getDepthMaterial( object, geometry, material, light, shadowCameraNear, shadowCameraFar, type ) {\n \n     let result = null;\n \n     const customMaterial = ( light.isPointLight === true ) ? object.customDistanceMaterial : object.customDepthMaterial;\n \n     if ( customMaterial !== undefined ) {\n \n       result = customMaterial;\n \n     } else {\n \n       result = ( light.isPointLight === true ) ? _distanceMaterial : _depthMaterial;\n \n     }\n \n     if ( ( _renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0 ) ||\n       ( material.displacementMap && material.displacementScale !== 0 ) ||\n       ( material.alphaMap && material.alphaTest > 0 ) ) {\n \n       // in this case we need a unique material instance reflecting the\n       // appropriate state\n \n       const keyA = result.uuid, keyB = material.uuid;\n \n       let materialsForVariant = _materialCache[ keyA ];\n \n       if ( materialsForVariant === undefined ) {\n \n         materialsForVariant = {};\n         _materialCache[ keyA ] = materialsForVariant;\n \n       }\n \n       let cachedMaterial = materialsForVariant[ keyB ];\n \n       if ( cachedMaterial === undefined ) {\n \n         cachedMaterial = result.clone();\n         materialsForVariant[ keyB ] = cachedMaterial;\n \n       }\n \n       result = cachedMaterial;\n \n     }\n \n     result.visible = material.visible;\n     result.wireframe = material.wireframe;\n \n     if ( type === VSMShadowMap ) {\n \n       result.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\n \n     } else {\n \n       result.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\n \n     }\n \n     result.alphaMap = material.alphaMap;\n     result.alphaTest = material.alphaTest;\n \n     result.clipShadows = material.clipShadows;\n     result.clippingPlanes = material.clippingPlanes;\n     result.clipIntersection = material.clipIntersection;\n \n     result.displacementMap = material.displacementMap;\n     result.displacementScale = material.displacementScale;\n     result.displacementBias = material.displacementBias;\n \n     result.wireframeLinewidth = material.wireframeLinewidth;\n     result.linewidth = material.linewidth;\n \n     if ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\n \n       result.referencePosition.setFromMatrixPosition( light.matrixWorld );\n       result.nearDistance = shadowCameraNear;\n       result.farDistance = shadowCameraFar;\n \n     }\n \n     return result;\n \n   }\n \n   function renderObject( object, camera, shadowCamera, light, type ) {\n \n     if ( object.visible === false ) return;\n \n     const visible = object.layers.test( camera.layers );\n \n     if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n \n       if ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n \n         object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n \n         const geometry = _objects.update( object );\n         const material = object.material;\n \n         if ( Array.isArray( material ) ) {\n \n           const groups = geometry.groups;\n \n           for ( let k = 0, kl = groups.length; k < kl; k ++ ) {\n \n             const group = groups[ k ];\n             const groupMaterial = material[ group.materialIndex ];\n \n             if ( groupMaterial && groupMaterial.visible ) {\n \n               const depthMaterial = getDepthMaterial( object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );\n \n               _renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n \n             }\n \n           }\n \n         } else if ( material.visible ) {\n \n           const depthMaterial = getDepthMaterial( object, geometry, material, light, shadowCamera.near, shadowCamera.far, type );\n \n           _renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n \n         }\n \n       }\n \n     }\n \n     const children = object.children;\n \n     for ( let i = 0, l = children.length; i < l; i ++ ) {\n \n       renderObject( children[ i ], camera, shadowCamera, light, type );\n \n     }\n \n   }\n \n }\n \n function WebGLState( gl, extensions, capabilities ) {\n \n   const isWebGL2 = capabilities.isWebGL2;\n \n   function ColorBuffer() {\n \n     let locked = false;\n \n     const color = new Vector4();\n     let currentColorMask = null;\n     const currentColorClear = new Vector4( 0, 0, 0, 0 );\n \n     return {\n \n       setMask: function ( colorMask ) {\n \n         if ( currentColorMask !== colorMask && ! locked ) {\n \n           gl.colorMask( colorMask, colorMask, colorMask, colorMask );\n           currentColorMask = colorMask;\n \n         }\n \n       },\n \n       setLocked: function ( lock ) {\n \n         locked = lock;\n \n       },\n \n       setClear: function ( r, g, b, a, premultipliedAlpha ) {\n \n         if ( premultipliedAlpha === true ) {\n \n           r *= a; g *= a; b *= a;\n \n         }\n \n         color.set( r, g, b, a );\n \n         if ( currentColorClear.equals( color ) === false ) {\n \n           gl.clearColor( r, g, b, a );\n           currentColorClear.copy( color );\n \n         }\n \n       },\n \n       reset: function () {\n \n         locked = false;\n \n         currentColorMask = null;\n         currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n \n       }\n \n     };\n \n   }\n \n   function DepthBuffer() {\n \n     let locked = false;\n \n     let currentDepthMask = null;\n     let currentDepthFunc = null;\n     let currentDepthClear = null;\n \n     return {\n \n       setTest: function ( depthTest ) {\n \n         if ( depthTest ) {\n \n           enable( 2929 );\n \n         } else {\n \n           disable( 2929 );\n \n         }\n \n       },\n \n       setMask: function ( depthMask ) {\n \n         if ( currentDepthMask !== depthMask && ! locked ) {\n \n           gl.depthMask( depthMask );\n           currentDepthMask = depthMask;\n \n         }\n \n       },\n \n       setFunc: function ( depthFunc ) {\n \n         if ( currentDepthFunc !== depthFunc ) {\n \n           if ( depthFunc ) {\n \n             switch ( depthFunc ) {\n \n               case NeverDepth:\n \n                 gl.depthFunc( 512 );\n                 break;\n \n               case AlwaysDepth:\n \n                 gl.depthFunc( 519 );\n                 break;\n \n               case LessDepth:\n \n                 gl.depthFunc( 513 );\n                 break;\n \n               case LessEqualDepth:\n \n                 gl.depthFunc( 515 );\n                 break;\n \n               case EqualDepth:\n \n                 gl.depthFunc( 514 );\n                 break;\n \n               case GreaterEqualDepth:\n \n                 gl.depthFunc( 518 );\n                 break;\n \n               case GreaterDepth:\n \n                 gl.depthFunc( 516 );\n                 break;\n \n               case NotEqualDepth:\n \n                 gl.depthFunc( 517 );\n                 break;\n \n               default:\n \n                 gl.depthFunc( 515 );\n \n             }\n \n           } else {\n \n             gl.depthFunc( 515 );\n \n           }\n \n           currentDepthFunc = depthFunc;\n \n         }\n \n       },\n \n       setLocked: function ( lock ) {\n \n         locked = lock;\n \n       },\n \n       setClear: function ( depth ) {\n \n         if ( currentDepthClear !== depth ) {\n \n           gl.clearDepth( depth );\n           currentDepthClear = depth;\n \n         }\n \n       },\n \n       reset: function () {\n \n         locked = false;\n \n         currentDepthMask = null;\n         currentDepthFunc = null;\n         currentDepthClear = null;\n \n       }\n \n     };\n \n   }\n \n   function StencilBuffer() {\n \n     let locked = false;\n \n     let currentStencilMask = null;\n     let currentStencilFunc = null;\n     let currentStencilRef = null;\n     let currentStencilFuncMask = null;\n     let currentStencilFail = null;\n     let currentStencilZFail = null;\n     let currentStencilZPass = null;\n     let currentStencilClear = null;\n \n     return {\n \n       setTest: function ( stencilTest ) {\n \n         if ( ! locked ) {\n \n           if ( stencilTest ) {\n \n             enable( 2960 );\n \n           } else {\n \n             disable( 2960 );\n \n           }\n \n         }\n \n       },\n \n       setMask: function ( stencilMask ) {\n \n         if ( currentStencilMask !== stencilMask && ! locked ) {\n \n           gl.stencilMask( stencilMask );\n           currentStencilMask = stencilMask;\n \n         }\n \n       },\n \n       setFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n \n         if ( currentStencilFunc !== stencilFunc ||\n              currentStencilRef !== stencilRef ||\n              currentStencilFuncMask !== stencilMask ) {\n \n           gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n \n           currentStencilFunc = stencilFunc;\n           currentStencilRef = stencilRef;\n           currentStencilFuncMask = stencilMask;\n \n         }\n \n       },\n \n       setOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n \n         if ( currentStencilFail !== stencilFail ||\n              currentStencilZFail !== stencilZFail ||\n              currentStencilZPass !== stencilZPass ) {\n \n           gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n \n           currentStencilFail = stencilFail;\n           currentStencilZFail = stencilZFail;\n           currentStencilZPass = stencilZPass;\n \n         }\n \n       },\n \n       setLocked: function ( lock ) {\n \n         locked = lock;\n \n       },\n \n       setClear: function ( stencil ) {\n \n         if ( currentStencilClear !== stencil ) {\n \n           gl.clearStencil( stencil );\n           currentStencilClear = stencil;\n \n         }\n \n       },\n \n       reset: function () {\n \n         locked = false;\n \n         currentStencilMask = null;\n         currentStencilFunc = null;\n         currentStencilRef = null;\n         currentStencilFuncMask = null;\n         currentStencilFail = null;\n         currentStencilZFail = null;\n         currentStencilZPass = null;\n         currentStencilClear = null;\n \n       }\n \n     };\n \n   }\n \n   //\n \n   const colorBuffer = new ColorBuffer();\n   const depthBuffer = new DepthBuffer();\n   const stencilBuffer = new StencilBuffer();\n \n   let enabledCapabilities = {};\n \n   let currentBoundFramebuffers = {};\n \n   let currentProgram = null;\n \n   let currentBlendingEnabled = false;\n   let currentBlending = null;\n   let currentBlendEquation = null;\n   let currentBlendSrc = null;\n   let currentBlendDst = null;\n   let currentBlendEquationAlpha = null;\n   let currentBlendSrcAlpha = null;\n   let currentBlendDstAlpha = null;\n   let currentPremultipledAlpha = false;\n \n   let currentFlipSided = null;\n   let currentCullFace = null;\n \n   let currentLineWidth = null;\n \n   let currentPolygonOffsetFactor = null;\n   let currentPolygonOffsetUnits = null;\n \n   const maxTextures = gl.getParameter( 35661 );\n \n   let lineWidthAvailable = false;\n   let version = 0;\n   const glVersion = gl.getParameter( 7938 );\n \n   if ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n \n     version = parseFloat( /^WebGL (\\d)/.exec( glVersion )[ 1 ] );\n     lineWidthAvailable = ( version >= 1.0 );\n \n   } else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n \n     version = parseFloat( /^OpenGL ES (\\d)/.exec( glVersion )[ 1 ] );\n     lineWidthAvailable = ( version >= 2.0 );\n \n   }\n \n   let currentTextureSlot = null;\n   let currentBoundTextures = {};\n \n   const scissorParam = gl.getParameter( 3088 );\n   const viewportParam = gl.getParameter( 2978 );\n \n   const currentScissor = new Vector4().fromArray( scissorParam );\n   const currentViewport = new Vector4().fromArray( viewportParam );\n \n   function createTexture( type, target, count ) {\n \n     const data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n     const texture = gl.createTexture();\n \n     gl.bindTexture( type, texture );\n     gl.texParameteri( type, 10241, 9728 );\n     gl.texParameteri( type, 10240, 9728 );\n \n     for ( let i = 0; i < count; i ++ ) {\n \n       gl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );\n \n     }\n \n     return texture;\n \n   }\n \n   const emptyTextures = {};\n   emptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );\n   emptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );\n \n   // init\n \n   colorBuffer.setClear( 0, 0, 0, 1 );\n   depthBuffer.setClear( 1 );\n   stencilBuffer.setClear( 0 );\n \n   enable( 2929 );\n   depthBuffer.setFunc( LessEqualDepth );\n \n   setFlipSided( false );\n   setCullFace( CullFaceBack );\n   enable( 2884 );\n \n   setBlending( NoBlending );\n \n   //\n \n   function enable( id ) {\n \n     if ( enabledCapabilities[ id ] !== true ) {\n \n       gl.enable( id );\n       enabledCapabilities[ id ] = true;\n \n     }\n \n   }\n \n   function disable( id ) {\n \n     if ( enabledCapabilities[ id ] !== false ) {\n \n       gl.disable( id );\n       enabledCapabilities[ id ] = false;\n \n     }\n \n   }\n \n   function bindFramebuffer( target, framebuffer ) {\n \n     if ( currentBoundFramebuffers[ target ] !== framebuffer ) {\n \n       gl.bindFramebuffer( target, framebuffer );\n \n       currentBoundFramebuffers[ target ] = framebuffer;\n \n       if ( isWebGL2 ) {\n \n         // 36009 is equivalent to 36160\n \n         if ( target === 36009 ) {\n \n           currentBoundFramebuffers[ 36160 ] = framebuffer;\n \n         }\n \n         if ( target === 36160 ) {\n \n           currentBoundFramebuffers[ 36009 ] = framebuffer;\n \n         }\n \n       }\n \n       return true;\n \n     }\n \n     return false;\n \n   }\n \n   function useProgram( program ) {\n \n     if ( currentProgram !== program ) {\n \n       gl.useProgram( program );\n \n       currentProgram = program;\n \n       return true;\n \n     }\n \n     return false;\n \n   }\n \n   const equationToGL = {\n     [ AddEquation ]: 32774,\n     [ SubtractEquation ]: 32778,\n     [ ReverseSubtractEquation ]: 32779\n   };\n \n   if ( isWebGL2 ) {\n \n     equationToGL[ MinEquation ] = 32775;\n     equationToGL[ MaxEquation ] = 32776;\n \n   } else {\n \n     const extension = extensions.get( 'EXT_blend_minmax' );\n \n     if ( extension !== null ) {\n \n       equationToGL[ MinEquation ] = extension.MIN_EXT;\n       equationToGL[ MaxEquation ] = extension.MAX_EXT;\n \n     }\n \n   }\n \n   const factorToGL = {\n     [ ZeroFactor ]: 0,\n     [ OneFactor ]: 1,\n     [ SrcColorFactor ]: 768,\n     [ SrcAlphaFactor ]: 770,\n     [ SrcAlphaSaturateFactor ]: 776,\n     [ DstColorFactor ]: 774,\n     [ DstAlphaFactor ]: 772,\n     [ OneMinusSrcColorFactor ]: 769,\n     [ OneMinusSrcAlphaFactor ]: 771,\n     [ OneMinusDstColorFactor ]: 775,\n     [ OneMinusDstAlphaFactor ]: 773\n   };\n \n   function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n \n     if ( blending === NoBlending ) {\n \n       if ( currentBlendingEnabled === true ) {\n \n         disable( 3042 );\n         currentBlendingEnabled = false;\n \n       }\n \n       return;\n \n     }\n \n     if ( currentBlendingEnabled === false ) {\n \n       enable( 3042 );\n       currentBlendingEnabled = true;\n \n     }\n \n     if ( blending !== CustomBlending ) {\n \n       if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n \n         if ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n \n           gl.blendEquation( 32774 );\n \n           currentBlendEquation = AddEquation;\n           currentBlendEquationAlpha = AddEquation;\n \n         }\n \n         if ( premultipliedAlpha ) {\n \n           switch ( blending ) {\n \n             case NormalBlending:\n               gl.blendFuncSeparate( 1, 771, 1, 771 );\n               break;\n \n             case AdditiveBlending:\n               gl.blendFunc( 1, 1 );\n               break;\n \n             case SubtractiveBlending:\n               gl.blendFuncSeparate( 0, 0, 769, 771 );\n               break;\n \n             case MultiplyBlending:\n               gl.blendFuncSeparate( 0, 768, 0, 770 );\n               break;\n \n             default:\n               console.error( 'THREE.WebGLState: Invalid blending: ', blending );\n               break;\n \n           }\n \n         } else {\n \n           switch ( blending ) {\n \n             case NormalBlending:\n               gl.blendFuncSeparate( 770, 771, 1, 771 );\n               break;\n \n             case AdditiveBlending:\n               gl.blendFunc( 770, 1 );\n               break;\n \n             case SubtractiveBlending:\n               gl.blendFunc( 0, 769 );\n               break;\n \n             case MultiplyBlending:\n               gl.blendFunc( 0, 768 );\n               break;\n \n             default:\n               console.error( 'THREE.WebGLState: Invalid blending: ', blending );\n               break;\n \n           }\n \n         }\n \n         currentBlendSrc = null;\n         currentBlendDst = null;\n         currentBlendSrcAlpha = null;\n         currentBlendDstAlpha = null;\n \n         currentBlending = blending;\n         currentPremultipledAlpha = premultipliedAlpha;\n \n       }\n \n       return;\n \n     }\n \n     // custom blending\n \n     blendEquationAlpha = blendEquationAlpha || blendEquation;\n     blendSrcAlpha = blendSrcAlpha || blendSrc;\n     blendDstAlpha = blendDstAlpha || blendDst;\n \n     if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n \n       gl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n \n       currentBlendEquation = blendEquation;\n       currentBlendEquationAlpha = blendEquationAlpha;\n \n     }\n \n     if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n \n       gl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n \n       currentBlendSrc = blendSrc;\n       currentBlendDst = blendDst;\n       currentBlendSrcAlpha = blendSrcAlpha;\n       currentBlendDstAlpha = blendDstAlpha;\n \n     }\n \n     currentBlending = blending;\n     currentPremultipledAlpha = null;\n \n   }\n \n   function setMaterial( material, frontFaceCW ) {\n \n     material.side === DoubleSide\n       ? disable( 2884 )\n       : enable( 2884 );\n \n     let flipSided = ( material.side === BackSide );\n     if ( frontFaceCW ) flipSided = ! flipSided;\n \n     setFlipSided( flipSided );\n \n     ( material.blending === NormalBlending && material.transparent === false )\n       ? setBlending( NoBlending )\n       : setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n \n     depthBuffer.setFunc( material.depthFunc );\n     depthBuffer.setTest( material.depthTest );\n     depthBuffer.setMask( material.depthWrite );\n     colorBuffer.setMask( material.colorWrite );\n \n     const stencilWrite = material.stencilWrite;\n     stencilBuffer.setTest( stencilWrite );\n     if ( stencilWrite ) {\n \n       stencilBuffer.setMask( material.stencilWriteMask );\n       stencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n       stencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n \n     }\n \n     setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n \n     material.alphaToCoverage === true\n       ? enable( 32926 )\n       : disable( 32926 );\n \n   }\n \n   //\n \n   function setFlipSided( flipSided ) {\n \n     if ( currentFlipSided !== flipSided ) {\n \n       if ( flipSided ) {\n \n         gl.frontFace( 2304 );\n \n       } else {\n \n         gl.frontFace( 2305 );\n \n       }\n \n       currentFlipSided = flipSided;\n \n     }\n \n   }\n \n   function setCullFace( cullFace ) {\n \n     if ( cullFace !== CullFaceNone ) {\n \n       enable( 2884 );\n \n       if ( cullFace !== currentCullFace ) {\n \n         if ( cullFace === CullFaceBack ) {\n \n           gl.cullFace( 1029 );\n \n         } else if ( cullFace === CullFaceFront ) {\n \n           gl.cullFace( 1028 );\n \n         } else {\n \n           gl.cullFace( 1032 );\n \n         }\n \n       }\n \n     } else {\n \n       disable( 2884 );\n \n     }\n \n     currentCullFace = cullFace;\n \n   }\n \n   function setLineWidth( width ) {\n \n     if ( width !== currentLineWidth ) {\n \n       if ( lineWidthAvailable ) gl.lineWidth( width );\n \n       currentLineWidth = width;\n \n     }\n \n   }\n \n   function setPolygonOffset( polygonOffset, factor, units ) {\n \n     if ( polygonOffset ) {\n \n       enable( 32823 );\n \n       if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n \n         gl.polygonOffset( factor, units );\n \n         currentPolygonOffsetFactor = factor;\n         currentPolygonOffsetUnits = units;\n \n       }\n \n     } else {\n \n       disable( 32823 );\n \n     }\n \n   }\n \n   function setScissorTest( scissorTest ) {\n \n     if ( scissorTest ) {\n \n       enable( 3089 );\n \n     } else {\n \n       disable( 3089 );\n \n     }\n \n   }\n \n   // texture\n \n   function activeTexture( webglSlot ) {\n \n     if ( webglSlot === undefined ) webglSlot = 33984 + maxTextures - 1;\n \n     if ( currentTextureSlot !== webglSlot ) {\n \n       gl.activeTexture( webglSlot );\n       currentTextureSlot = webglSlot;\n \n     }\n \n   }\n \n   function bindTexture( webglType, webglTexture ) {\n \n     if ( currentTextureSlot === null ) {\n \n       activeTexture();\n \n     }\n \n     let boundTexture = currentBoundTextures[ currentTextureSlot ];\n \n     if ( boundTexture === undefined ) {\n \n       boundTexture = { type: undefined, texture: undefined };\n       currentBoundTextures[ currentTextureSlot ] = boundTexture;\n \n     }\n \n     if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n \n       gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n \n       boundTexture.type = webglType;\n       boundTexture.texture = webglTexture;\n \n     }\n \n   }\n \n   function unbindTexture() {\n \n     const boundTexture = currentBoundTextures[ currentTextureSlot ];\n \n     if ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n \n       gl.bindTexture( boundTexture.type, null );\n \n       boundTexture.type = undefined;\n       boundTexture.texture = undefined;\n \n     }\n \n   }\n \n   function compressedTexImage2D() {\n \n     try {\n \n       gl.compressedTexImage2D.apply( gl, arguments );\n \n     } catch ( error ) {\n \n       console.error( 'THREE.WebGLState:', error );\n \n     }\n \n   }\n \n   function texSubImage2D() {\n \n     try {\n \n       gl.texSubImage2D.apply( gl, arguments );\n \n     } catch ( error ) {\n \n       console.error( 'THREE.WebGLState:', error );\n \n     }\n \n   }\n \n   function texStorage2D() {\n \n     try {\n \n       gl.texStorage2D.apply( gl, arguments );\n \n     } catch ( error ) {\n \n       console.error( 'THREE.WebGLState:', error );\n \n     }\n \n   }\n \n   function texImage2D() {\n \n     try {\n \n       gl.texImage2D.apply( gl, arguments );\n \n     } catch ( error ) {\n \n       console.error( 'THREE.WebGLState:', error );\n \n     }\n \n   }\n \n   function texImage3D() {\n \n     try {\n \n       gl.texImage3D.apply( gl, arguments );\n \n     } catch ( error ) {\n \n       console.error( 'THREE.WebGLState:', error );\n \n     }\n \n   }\n \n   //\n \n   function scissor( scissor ) {\n \n     if ( currentScissor.equals( scissor ) === false ) {\n \n       gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n       currentScissor.copy( scissor );\n \n     }\n \n   }\n \n   function viewport( viewport ) {\n \n     if ( currentViewport.equals( viewport ) === false ) {\n \n       gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n       currentViewport.copy( viewport );\n \n     }\n \n   }\n \n   //\n \n   function reset() {\n \n     // reset state\n \n     gl.disable( 3042 );\n     gl.disable( 2884 );\n     gl.disable( 2929 );\n     gl.disable( 32823 );\n     gl.disable( 3089 );\n     gl.disable( 2960 );\n     gl.disable( 32926 );\n \n     gl.blendEquation( 32774 );\n     gl.blendFunc( 1, 0 );\n     gl.blendFuncSeparate( 1, 0, 1, 0 );\n \n     gl.colorMask( true, true, true, true );\n     gl.clearColor( 0, 0, 0, 0 );\n \n     gl.depthMask( true );\n     gl.depthFunc( 513 );\n     gl.clearDepth( 1 );\n \n     gl.stencilMask( 0xffffffff );\n     gl.stencilFunc( 519, 0, 0xffffffff );\n     gl.stencilOp( 7680, 7680, 7680 );\n     gl.clearStencil( 0 );\n \n     gl.cullFace( 1029 );\n     gl.frontFace( 2305 );\n \n     gl.polygonOffset( 0, 0 );\n \n     gl.activeTexture( 33984 );\n \n     gl.bindFramebuffer( 36160, null );\n \n     if ( isWebGL2 === true ) {\n \n       gl.bindFramebuffer( 36009, null );\n       gl.bindFramebuffer( 36008, null );\n \n     }\n \n     gl.useProgram( null );\n \n     gl.lineWidth( 1 );\n \n     gl.scissor( 0, 0, gl.canvas.width, gl.canvas.height );\n     gl.viewport( 0, 0, gl.canvas.width, gl.canvas.height );\n \n     // reset internals\n \n     enabledCapabilities = {};\n \n     currentTextureSlot = null;\n     currentBoundTextures = {};\n \n     currentBoundFramebuffers = {};\n \n     currentProgram = null;\n \n     currentBlendingEnabled = false;\n     currentBlending = null;\n     currentBlendEquation = null;\n     currentBlendSrc = null;\n     currentBlendDst = null;\n     currentBlendEquationAlpha = null;\n     currentBlendSrcAlpha = null;\n     currentBlendDstAlpha = null;\n     currentPremultipledAlpha = false;\n \n     currentFlipSided = null;\n     currentCullFace = null;\n \n     currentLineWidth = null;\n \n     currentPolygonOffsetFactor = null;\n     currentPolygonOffsetUnits = null;\n \n     currentScissor.set( 0, 0, gl.canvas.width, gl.canvas.height );\n     currentViewport.set( 0, 0, gl.canvas.width, gl.canvas.height );\n \n     colorBuffer.reset();\n     depthBuffer.reset();\n     stencilBuffer.reset();\n \n   }\n \n   return {\n \n     buffers: {\n       color: colorBuffer,\n       depth: depthBuffer,\n       stencil: stencilBuffer\n     },\n \n     enable: enable,\n     disable: disable,\n \n     bindFramebuffer: bindFramebuffer,\n \n     useProgram: useProgram,\n \n     setBlending: setBlending,\n     setMaterial: setMaterial,\n \n     setFlipSided: setFlipSided,\n     setCullFace: setCullFace,\n \n     setLineWidth: setLineWidth,\n     setPolygonOffset: setPolygonOffset,\n \n     setScissorTest: setScissorTest,\n \n     activeTexture: activeTexture,\n     bindTexture: bindTexture,\n     unbindTexture: unbindTexture,\n     compressedTexImage2D: compressedTexImage2D,\n     texImage2D: texImage2D,\n     texImage3D: texImage3D,\n \n     texStorage2D: texStorage2D,\n     texSubImage2D: texSubImage2D,\n \n     scissor: scissor,\n     viewport: viewport,\n \n     reset: reset\n \n   };\n \n }\n \n function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n \n   const isWebGL2 = capabilities.isWebGL2;\n   const maxTextures = capabilities.maxTextures;\n   const maxCubemapSize = capabilities.maxCubemapSize;\n   const maxTextureSize = capabilities.maxTextureSize;\n   const maxSamples = capabilities.maxSamples;\n   const hasMultisampledRenderToTexture = extensions.has( 'WEBGL_multisampled_render_to_texture' );\n   const MultisampledRenderToTextureExtension = hasMultisampledRenderToTexture ? extensions.get( 'WEBGL_multisampled_render_to_texture' ) : undefined;\n \n   const _videoTextures = new WeakMap();\n   let _canvas;\n \n   // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n   // also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n   // Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n \n   let useOffscreenCanvas = false;\n \n   try {\n \n     useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n       && ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;\n \n   } catch ( err ) {\n \n     // Ignore any errors\n \n   }\n \n   function createCanvas( width, height ) {\n \n     // Use OffscreenCanvas when available. Specially needed in web workers\n \n     return useOffscreenCanvas ?\n       new OffscreenCanvas( width, height ) : createElementNS( 'canvas' );\n \n   }\n \n   function resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n \n     let scale = 1;\n \n     // handle case if texture exceeds max size\n \n     if ( image.width > maxSize || image.height > maxSize ) {\n \n       scale = maxSize / Math.max( image.width, image.height );\n \n     }\n \n     // only perform resize if necessary\n \n     if ( scale < 1 || needsPowerOfTwo === true ) {\n \n       // only perform resize for certain image types\n \n       if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n         ( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n         ( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n \n         const floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;\n \n         const width = floor( scale * image.width );\n         const height = floor( scale * image.height );\n \n         if ( _canvas === undefined ) _canvas = createCanvas( width, height );\n \n         // cube textures can't reuse the same canvas\n \n         const canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n \n         canvas.width = width;\n         canvas.height = height;\n \n         const context = canvas.getContext( '2d' );\n         context.drawImage( image, 0, 0, width, height );\n \n         console.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n \n         return canvas;\n \n       } else {\n \n         if ( 'data' in image ) {\n \n           console.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n \n         }\n \n         return image;\n \n       }\n \n     }\n \n     return image;\n \n   }\n \n   function isPowerOfTwo$1( image ) {\n \n     return isPowerOfTwo( image.width ) && isPowerOfTwo( image.height );\n \n   }\n \n   function textureNeedsPowerOfTwo( texture ) {\n \n     if ( isWebGL2 ) return false;\n \n     return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n       ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n \n   }\n \n   function textureNeedsGenerateMipmaps( texture, supportsMips ) {\n \n     return texture.generateMipmaps && supportsMips &&\n       texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n \n   }\n \n   function generateMipmap( target ) {\n \n     _gl.generateMipmap( target );\n \n   }\n \n   function getInternalFormat( internalFormatName, glFormat, glType/*, encoding*/ ) {\n \n     if ( isWebGL2 === false ) return glFormat;\n \n     if ( internalFormatName !== null ) {\n \n       if ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];\n \n       console.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n \n     }\n \n     let internalFormat = glFormat;\n \n     if ( glFormat === 6403 ) {\n \n       if ( glType === 5126 ) internalFormat = 33326;\n       if ( glType === 5131 ) internalFormat = 33325;\n       if ( glType === 5121 ) internalFormat = 33321;\n \n     }\n \n     if ( glFormat === 6407 ) {\n \n       if ( glType === 5126 ) internalFormat = 34837;\n       if ( glType === 5131 ) internalFormat = 34843;\n       if ( glType === 5121 ) internalFormat = 32849;\n \n     }\n \n     if ( glFormat === 6408 ) {\n \n       if ( glType === 5126 ) internalFormat = 34836;\n       if ( glType === 5131 ) internalFormat = 34842;\n       //if ( glType === 5121 ) internalFormat = ( encoding === sRGBEncoding ) ? 35907 : 32856;\n       if ( glType === 5121 ) internalFormat = 32856;\n \n \n     }\n \n     if ( internalFormat === 33325 || internalFormat === 33326 ||\n       internalFormat === 34842 || internalFormat === 34836 ) {\n \n       extensions.get( 'EXT_color_buffer_float' );\n \n     }\n \n     return internalFormat;\n \n   }\n \n   function getMipLevels( texture, image, supportsMips ) {\n \n     if ( textureNeedsGenerateMipmaps( texture, supportsMips ) === true ) {\n \n       // generated mipmaps via gl.generateMipmap()\n \n       return Math.log2( Math.max( image.width, image.height ) ) + 1;\n \n     } else if ( texture.mipmaps.length > 0 ) {\n \n       // user-defined mipmaps\n \n       return texture.mipmaps.length;\n \n     } else {\n \n       // texture without mipmaps (only base level)\n \n       return 1;\n \n     }\n \n   }\n \n   // Fallback filters for non-power-of-2 textures\n \n   function filterFallback( f ) {\n \n     if ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n \n       return 9728;\n \n     }\n \n     return 9729;\n \n   }\n \n   //\n \n   function onTextureDispose( event ) {\n \n     const texture = event.target;\n \n     texture.removeEventListener( 'dispose', onTextureDispose );\n \n     deallocateTexture( texture );\n \n     if ( texture.isVideoTexture ) {\n \n       _videoTextures.delete( texture );\n \n     }\n \n     info.memory.textures --;\n \n   }\n \n   function onRenderTargetDispose( event ) {\n \n     const renderTarget = event.target;\n \n     renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n \n     deallocateRenderTarget( renderTarget );\n \n   }\n \n   //\n \n   function deallocateTexture( texture ) {\n \n     const textureProperties = properties.get( texture );\n \n     if ( textureProperties.__webglInit === undefined ) return;\n \n     _gl.deleteTexture( textureProperties.__webglTexture );\n \n     properties.remove( texture );\n \n   }\n \n   function deallocateRenderTarget( renderTarget ) {\n \n     const texture = renderTarget.texture;\n \n     const renderTargetProperties = properties.get( renderTarget );\n     const textureProperties = properties.get( texture );\n \n     if ( ! renderTarget ) return;\n \n     if ( textureProperties.__webglTexture !== undefined ) {\n \n       _gl.deleteTexture( textureProperties.__webglTexture );\n \n       info.memory.textures --;\n \n     }\n \n     if ( renderTarget.depthTexture ) {\n \n       renderTarget.depthTexture.dispose();\n \n     }\n \n     if ( renderTarget.isWebGLCubeRenderTarget ) {\n \n       for ( let i = 0; i < 6; i ++ ) {\n \n         _gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n         if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n \n       }\n \n     } else {\n \n       _gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n       if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n       if ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );\n       if ( renderTargetProperties.__webglColorRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer );\n       if ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );\n \n     }\n \n     if ( renderTarget.isWebGLMultipleRenderTargets ) {\n \n       for ( let i = 0, il = texture.length; i < il; i ++ ) {\n \n         const attachmentProperties = properties.get( texture[ i ] );\n \n         if ( attachmentProperties.__webglTexture ) {\n \n           _gl.deleteTexture( attachmentProperties.__webglTexture );\n \n           info.memory.textures --;\n \n         }\n \n         properties.remove( texture[ i ] );\n \n       }\n \n     }\n \n     properties.remove( texture );\n     properties.remove( renderTarget );\n \n   }\n \n   //\n \n   let textureUnits = 0;\n \n   function resetTextureUnits() {\n \n     textureUnits = 0;\n \n   }\n \n   function allocateTextureUnit() {\n \n     const textureUnit = textureUnits;\n \n     if ( textureUnit >= maxTextures ) {\n \n       console.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\n \n     }\n \n     textureUnits += 1;\n \n     return textureUnit;\n \n   }\n \n   //\n \n   function setTexture2D( texture, slot ) {\n \n     const textureProperties = properties.get( texture );\n \n     if ( texture.isVideoTexture ) updateVideoTexture( texture );\n \n     if ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n \n       const image = texture.image;\n \n       if ( image === undefined ) {\n \n         console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\n \n       } else if ( image.complete === false ) {\n \n         console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n \n       } else {\n \n         uploadTexture( textureProperties, texture, slot );\n         return;\n \n       }\n \n     }\n \n     state.activeTexture( 33984 + slot );\n     state.bindTexture( 3553, textureProperties.__webglTexture );\n \n   }\n \n   function setTexture2DArray( texture, slot ) {\n \n     const textureProperties = properties.get( texture );\n \n     if ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n \n       uploadTexture( textureProperties, texture, slot );\n       return;\n \n     }\n \n     state.activeTexture( 33984 + slot );\n     state.bindTexture( 35866, textureProperties.__webglTexture );\n \n   }\n \n   function setTexture3D( texture, slot ) {\n \n     const textureProperties = properties.get( texture );\n \n     if ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n \n       uploadTexture( textureProperties, texture, slot );\n       return;\n \n     }\n \n     state.activeTexture( 33984 + slot );\n     state.bindTexture( 32879, textureProperties.__webglTexture );\n \n   }\n \n   function setTextureCube( texture, slot ) {\n \n     const textureProperties = properties.get( texture );\n \n     if ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n \n       uploadCubeTexture( textureProperties, texture, slot );\n       return;\n \n     }\n \n     state.activeTexture( 33984 + slot );\n     state.bindTexture( 34067, textureProperties.__webglTexture );\n \n   }\n \n   const wrappingToGL = {\n     [ RepeatWrapping ]: 10497,\n     [ ClampToEdgeWrapping ]: 33071,\n     [ MirroredRepeatWrapping ]: 33648\n   };\n \n   const filterToGL = {\n     [ NearestFilter ]: 9728,\n     [ NearestMipmapNearestFilter ]: 9984,\n     [ NearestMipmapLinearFilter ]: 9986,\n \n     [ LinearFilter ]: 9729,\n     [ LinearMipmapNearestFilter ]: 9985,\n     [ LinearMipmapLinearFilter ]: 9987\n   };\n \n   function setTextureParameters( textureType, texture, supportsMips ) {\n \n     if ( supportsMips ) {\n \n       _gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );\n       _gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );\n \n       if ( textureType === 32879 || textureType === 35866 ) {\n \n         _gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );\n \n       }\n \n       _gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );\n       _gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );\n \n     } else {\n \n       _gl.texParameteri( textureType, 10242, 33071 );\n       _gl.texParameteri( textureType, 10243, 33071 );\n \n       if ( textureType === 32879 || textureType === 35866 ) {\n \n         _gl.texParameteri( textureType, 32882, 33071 );\n \n       }\n \n       if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n \n         console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n \n       }\n \n       _gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );\n       _gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );\n \n       if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n \n         console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n \n       }\n \n     }\n \n     if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n \n       const extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n \n       if ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2\n       if ( isWebGL2 === false && ( texture.type === HalfFloatType && extensions.has( 'OES_texture_half_float_linear' ) === false ) ) return; // verify extension for WebGL 1 only\n \n       if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n \n         _gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n         properties.get( texture ).__currentAnisotropy = texture.anisotropy;\n \n       }\n \n     }\n \n   }\n \n   function initTexture( textureProperties, texture ) {\n \n     if ( textureProperties.__webglInit === undefined ) {\n \n       textureProperties.__webglInit = true;\n \n       texture.addEventListener( 'dispose', onTextureDispose );\n \n       textureProperties.__webglTexture = _gl.createTexture();\n \n       info.memory.textures ++;\n \n     }\n \n   }\n \n   function uploadTexture( textureProperties, texture, slot ) {\n \n     let textureType = 3553;\n \n     if ( texture.isDataTexture2DArray ) textureType = 35866;\n     if ( texture.isDataTexture3D ) textureType = 32879;\n \n     initTexture( textureProperties, texture );\n \n     state.activeTexture( 33984 + slot );\n     state.bindTexture( textureType, textureProperties.__webglTexture );\n \n     _gl.pixelStorei( 37440, texture.flipY );\n     _gl.pixelStorei( 37441, texture.premultiplyAlpha );\n     _gl.pixelStorei( 3317, texture.unpackAlignment );\n     _gl.pixelStorei( 37443, 0 );\n \n     const needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo$1( texture.image ) === false;\n     const image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\n \n     const supportsMips = isPowerOfTwo$1( image ) || isWebGL2,\n       glFormat = utils.convert( texture.format );\n \n     let glType = utils.convert( texture.type ),\n       glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n \n     setTextureParameters( textureType, texture, supportsMips );\n \n     let mipmap;\n     const mipmaps = texture.mipmaps;\n \n     if ( texture.isDepthTexture ) {\n \n       // populate depth texture with dummy data\n \n       glInternalFormat = 6402;\n \n       if ( isWebGL2 ) {\n \n         if ( texture.type === FloatType ) {\n \n           glInternalFormat = 36012;\n \n         } else if ( texture.type === UnsignedIntType ) {\n \n           glInternalFormat = 33190;\n \n         } else if ( texture.type === UnsignedInt248Type ) {\n \n           glInternalFormat = 35056;\n \n         } else {\n \n           glInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D\n \n         }\n \n       } else {\n \n         if ( texture.type === FloatType ) {\n \n           console.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );\n \n         }\n \n       }\n \n       // validation checks for WebGL 1\n \n       if ( texture.format === DepthFormat && glInternalFormat === 6402 ) {\n \n         // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n         // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n         // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n         if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n \n           console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n \n           texture.type = UnsignedShortType;\n           glType = utils.convert( texture.type );\n \n         }\n \n       }\n \n       if ( texture.format === DepthStencilFormat && glInternalFormat === 6402 ) {\n \n         // Depth stencil textures need the DEPTH_STENCIL internal format\n         // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n         glInternalFormat = 34041;\n \n         // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n         // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n         // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n         if ( texture.type !== UnsignedInt248Type ) {\n \n           console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n \n           texture.type = UnsignedInt248Type;\n           glType = utils.convert( texture.type );\n \n         }\n \n       }\n \n       //\n \n       state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n \n     } else if ( texture.isDataTexture ) {\n \n       // use manually created mipmaps if available\n       // if there are no manual mipmaps\n       // set 0 level mipmap and then use GL to generate other mipmap levels\n \n       if ( mipmaps.length > 0 && supportsMips ) {\n \n         for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n \n           mipmap = mipmaps[ i ];\n           state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n \n         }\n \n         texture.generateMipmaps = false;\n \n       } else {\n \n         state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n \n       }\n \n     } else if ( texture.isCompressedTexture ) {\n \n       for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n \n         mipmap = mipmaps[ i ];\n \n         if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n \n           if ( glFormat !== null ) {\n \n             state.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n \n           } else {\n \n             console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n \n           }\n \n         } else {\n \n           state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n \n         }\n \n       }\n \n     } else if ( texture.isDataTexture2DArray ) {\n \n       state.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n \n     } else if ( texture.isDataTexture3D ) {\n \n       state.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n \n     } else {\n \n       // regular Texture (image, video, canvas)\n \n       // use manually created mipmaps if available\n       // if there are no manual mipmaps\n       // set 0 level mipmap and then use GL to generate other mipmap levels\n \n       const levels = getMipLevels( texture, image, supportsMips );\n       const useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );\n       const allocateMemory = ( textureProperties.__version === undefined );\n \n       if ( mipmaps.length > 0 && supportsMips ) {\n \n         if ( useTexStorage && allocateMemory ) {\n \n           state.texStorage2D( 3553, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n \n         }\n \n         for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n \n           mipmap = mipmaps[ i ];\n \n           if ( useTexStorage ) {\n \n             state.texSubImage2D( 3553, i, 0, 0, glFormat, glType, mipmap );\n \n           } else {\n \n             state.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );\n \n           }\n \n         }\n \n         texture.generateMipmaps = false;\n \n       } else {\n \n         if ( useTexStorage ) {\n \n           if ( allocateMemory ) {\n \n             state.texStorage2D( 3553, levels, glInternalFormat, image.width, image.height );\n \n           }\n \n           state.texSubImage2D( 3553, 0, 0, 0, glFormat, glType, image );\n \n         } else {\n \n           state.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );\n \n         }\n \n       }\n \n     }\n \n     if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n \n       generateMipmap( textureType );\n \n     }\n \n     textureProperties.__version = texture.version;\n \n     if ( texture.onUpdate ) texture.onUpdate( texture );\n \n   }\n \n   function uploadCubeTexture( textureProperties, texture, slot ) {\n \n     if ( texture.image.length !== 6 ) return;\n \n     initTexture( textureProperties, texture );\n \n     state.activeTexture( 33984 + slot );\n     state.bindTexture( 34067, textureProperties.__webglTexture );\n \n     _gl.pixelStorei( 37440, texture.flipY );\n     _gl.pixelStorei( 37441, texture.premultiplyAlpha );\n     _gl.pixelStorei( 3317, texture.unpackAlignment );\n     _gl.pixelStorei( 37443, 0 );\n \n     const isCompressed = ( texture && ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture ) );\n     const isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n \n     const cubeImage = [];\n \n     for ( let i = 0; i < 6; i ++ ) {\n \n       if ( ! isCompressed && ! isDataTexture ) {\n \n         cubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\n \n       } else {\n \n         cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n \n       }\n \n     }\n \n     const image = cubeImage[ 0 ],\n       supportsMips = isPowerOfTwo$1( image ) || isWebGL2,\n       glFormat = utils.convert( texture.format ),\n       glType = utils.convert( texture.type ),\n       glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n \n     setTextureParameters( 34067, texture, supportsMips );\n \n     let mipmaps;\n \n     if ( isCompressed ) {\n \n       for ( let i = 0; i < 6; i ++ ) {\n \n         mipmaps = cubeImage[ i ].mipmaps;\n \n         for ( let j = 0; j < mipmaps.length; j ++ ) {\n \n           const mipmap = mipmaps[ j ];\n \n           if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n \n             if ( glFormat !== null ) {\n \n               state.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n \n             } else {\n \n               console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n \n             }\n \n           } else {\n \n             state.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n \n           }\n \n         }\n \n       }\n \n     } else {\n \n       mipmaps = texture.mipmaps;\n \n       for ( let i = 0; i < 6; i ++ ) {\n \n         if ( isDataTexture ) {\n \n           state.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n \n           for ( let j = 0; j < mipmaps.length; j ++ ) {\n \n             const mipmap = mipmaps[ j ];\n             const mipmapImage = mipmap.image[ i ].image;\n \n             state.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n \n           }\n \n         } else {\n \n           state.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n \n           for ( let j = 0; j < mipmaps.length; j ++ ) {\n \n             const mipmap = mipmaps[ j ];\n \n             state.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\n \n           }\n \n         }\n \n       }\n \n     }\n \n     if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n \n       // We assume images for cube map have the same size.\n       generateMipmap( 34067 );\n \n     }\n \n     textureProperties.__version = texture.version;\n \n     if ( texture.onUpdate ) texture.onUpdate( texture );\n \n   }\n \n   // Render targets\n \n   // Setup storage for target texture and bind it to correct framebuffer\n   function setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget ) {\n \n     const glFormat = utils.convert( texture.format );\n     const glType = utils.convert( texture.type );\n     const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n     const renderTargetProperties = properties.get( renderTarget );\n \n     if ( ! renderTargetProperties.__hasExternalTextures ) {\n \n       if ( textureTarget === 32879 || textureTarget === 35866 ) {\n \n         state.texImage3D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null );\n \n       } else {\n \n         state.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n \n       }\n \n     }\n \n     state.bindFramebuffer( 36160, framebuffer );\n     if ( renderTarget.useRenderToTexture ) {\n \n       MultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT( 36160, attachment, textureTarget, properties.get( texture ).__webglTexture, 0, getRenderTargetSamples( renderTarget ) );\n \n     } else {\n \n       _gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( texture ).__webglTexture, 0 );\n \n     }\n \n     state.bindFramebuffer( 36160, null );\n \n   }\n \n \n   // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n   function setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n \n     _gl.bindRenderbuffer( 36161, renderbuffer );\n \n     if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n \n       let glInternalFormat = 33189;\n \n       if ( isMultisample || renderTarget.useRenderToTexture ) {\n \n         const depthTexture = renderTarget.depthTexture;\n \n         if ( depthTexture && depthTexture.isDepthTexture ) {\n \n           if ( depthTexture.type === FloatType ) {\n \n             glInternalFormat = 36012;\n \n           } else if ( depthTexture.type === UnsignedIntType ) {\n \n             glInternalFormat = 33190;\n \n           }\n \n         }\n \n         const samples = getRenderTargetSamples( renderTarget );\n \n         if ( renderTarget.useRenderToTexture ) {\n \n           MultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n \n         } else {\n \n           _gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n \n         }\n \n       } else {\n \n         _gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n \n       }\n \n       _gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );\n \n     } else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n \n       const samples = getRenderTargetSamples( renderTarget );\n \n       if ( isMultisample && renderTarget.useRenderbuffer ) {\n \n         _gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );\n \n       } else if ( renderTarget.useRenderToTexture ) {\n \n         MultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT( 36161, samples, 35056, renderTarget.width, renderTarget.height );\n \n       } else {\n \n         _gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );\n \n       }\n \n \n       _gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );\n \n     } else {\n \n       // Use the first texture for MRT so far\n       const texture = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture[ 0 ] : renderTarget.texture;\n \n       const glFormat = utils.convert( texture.format );\n       const glType = utils.convert( texture.type );\n       const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n       const samples = getRenderTargetSamples( renderTarget );\n \n       if ( isMultisample && renderTarget.useRenderbuffer ) {\n \n         _gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n \n       } else if ( renderTarget.useRenderToTexture ) {\n \n         MultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n \n       } else {\n \n         _gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n \n       }\n \n     }\n \n     _gl.bindRenderbuffer( 36161, null );\n \n   }\n \n   // Setup resources for a Depth Texture for a FBO (needs an extension)\n   function setupDepthTexture( framebuffer, renderTarget ) {\n \n     const isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\n     if ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\n \n     state.bindFramebuffer( 36160, framebuffer );\n \n     if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n \n       throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n \n     }\n \n     // upload an empty depth texture with framebuffer size\n     if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n         renderTarget.depthTexture.image.width !== renderTarget.width ||\n         renderTarget.depthTexture.image.height !== renderTarget.height ) {\n \n       renderTarget.depthTexture.image.width = renderTarget.width;\n       renderTarget.depthTexture.image.height = renderTarget.height;\n       renderTarget.depthTexture.needsUpdate = true;\n \n     }\n \n     setTexture2D( renderTarget.depthTexture, 0 );\n \n     const webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n     const samples = getRenderTargetSamples( renderTarget );\n \n     if ( renderTarget.depthTexture.format === DepthFormat ) {\n \n       if ( renderTarget.useRenderToTexture ) {\n \n         MultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT( 36160, 36096, 3553, webglDepthTexture, 0, samples );\n \n       } else {\n \n         _gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );\n \n       }\n \n     } else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n \n       if ( renderTarget.useRenderToTexture ) {\n \n         MultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT( 36160, 33306, 3553, webglDepthTexture, 0, samples );\n \n       } else {\n \n         _gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );\n \n       }\n \n     } else {\n \n       throw new Error( 'Unknown depthTexture format' );\n \n     }\n \n   }\n \n   // Setup GL resources for a non-texture depth buffer\n   function setupDepthRenderbuffer( renderTarget ) {\n \n     const renderTargetProperties = properties.get( renderTarget );\n     const isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n \n     if ( renderTarget.depthTexture && ! renderTargetProperties.__autoAllocateDepthBuffer ) {\n \n       if ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\n \n       setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n \n     } else {\n \n       if ( isCube ) {\n \n         renderTargetProperties.__webglDepthbuffer = [];\n \n         for ( let i = 0; i < 6; i ++ ) {\n \n           state.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );\n           renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n           setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );\n \n         }\n \n       } else {\n \n         state.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n         renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n         setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );\n \n       }\n \n     }\n \n     state.bindFramebuffer( 36160, null );\n \n   }\n \n   // rebind framebuffer with external textures\n   function rebindTextures( renderTarget, colorTexture, depthTexture ) {\n \n     const renderTargetProperties = properties.get( renderTarget );\n \n     if ( colorTexture !== undefined ) {\n \n       setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, 36064, 3553 );\n \n     }\n \n     if ( depthTexture !== undefined ) {\n \n       setupDepthRenderbuffer( renderTarget );\n \n     }\n \n   }\n \n   // Set up GL resources for the render target\n   function setupRenderTarget( renderTarget ) {\n \n     const texture = renderTarget.texture;\n \n     const renderTargetProperties = properties.get( renderTarget );\n     const textureProperties = properties.get( texture );\n \n     renderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n \n     if ( renderTarget.isWebGLMultipleRenderTargets !== true ) {\n \n       if ( textureProperties.__webglTexture === undefined ) {\n \n         textureProperties.__webglTexture = _gl.createTexture();\n \n       }\n \n       textureProperties.__version = texture.version;\n       info.memory.textures ++;\n \n     }\n \n     const isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n     const isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );\n     const isRenderTarget3D = texture.isDataTexture3D || texture.isDataTexture2DArray;\n     const supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;\n \n     // Handles WebGL2 RGBFormat fallback - #18858\n \n     if ( isWebGL2 && texture.format === RGBFormat && ( texture.type === FloatType || texture.type === HalfFloatType ) ) {\n \n       texture.format = RGBAFormat;\n \n       console.warn( 'THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.' );\n \n     }\n \n     // Setup framebuffer\n \n     if ( isCube ) {\n \n       renderTargetProperties.__webglFramebuffer = [];\n \n       for ( let i = 0; i < 6; i ++ ) {\n \n         renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n \n       }\n \n     } else {\n \n       renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n \n       if ( isMultipleRenderTargets ) {\n \n         if ( capabilities.drawBuffers ) {\n \n           const textures = renderTarget.texture;\n \n           for ( let i = 0, il = textures.length; i < il; i ++ ) {\n \n             const attachmentProperties = properties.get( textures[ i ] );\n \n             if ( attachmentProperties.__webglTexture === undefined ) {\n \n               attachmentProperties.__webglTexture = _gl.createTexture();\n \n               info.memory.textures ++;\n \n             }\n \n           }\n \n         } else {\n \n           console.warn( 'THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.' );\n \n         }\n \n       } else if ( renderTarget.useRenderbuffer ) {\n \n         if ( isWebGL2 ) {\n \n           renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n           renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n \n           _gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );\n \n           const glFormat = utils.convert( texture.format );\n           const glType = utils.convert( texture.type );\n           const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n           const samples = getRenderTargetSamples( renderTarget );\n           _gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n \n           state.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\n           _gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );\n           _gl.bindRenderbuffer( 36161, null );\n \n           if ( renderTarget.depthBuffer ) {\n \n             renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n             setupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n \n           }\n \n           state.bindFramebuffer( 36160, null );\n \n \n         } else {\n \n           console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n \n         }\n \n       }\n \n     }\n \n     // Setup color buffer\n \n     if ( isCube ) {\n \n       state.bindTexture( 34067, textureProperties.__webglTexture );\n       setTextureParameters( 34067, texture, supportsMips );\n \n       for ( let i = 0; i < 6; i ++ ) {\n \n         setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, 36064, 34069 + i );\n \n       }\n \n       if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n \n         generateMipmap( 34067 );\n \n       }\n \n       state.unbindTexture();\n \n     } else if ( isMultipleRenderTargets ) {\n \n       const textures = renderTarget.texture;\n \n       for ( let i = 0, il = textures.length; i < il; i ++ ) {\n \n         const attachment = textures[ i ];\n         const attachmentProperties = properties.get( attachment );\n \n         state.bindTexture( 3553, attachmentProperties.__webglTexture );\n         setTextureParameters( 3553, attachment, supportsMips );\n         setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, 36064 + i, 3553 );\n \n         if ( textureNeedsGenerateMipmaps( attachment, supportsMips ) ) {\n \n           generateMipmap( 3553 );\n \n         }\n \n       }\n \n       state.unbindTexture();\n \n     } else {\n \n       let glTextureType = 3553;\n \n       if ( isRenderTarget3D ) {\n \n         // Render targets containing layers, i.e: Texture 3D and 2d arrays\n \n         if ( isWebGL2 ) {\n \n           const isTexture3D = texture.isDataTexture3D;\n           glTextureType = isTexture3D ? 32879 : 35866;\n \n         } else {\n \n           console.warn( 'THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.' );\n \n         }\n \n       }\n \n       state.bindTexture( glTextureType, textureProperties.__webglTexture );\n       setTextureParameters( glTextureType, texture, supportsMips );\n       setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, 36064, glTextureType );\n \n       if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n \n         generateMipmap( glTextureType );\n \n       }\n \n       state.unbindTexture();\n \n     }\n \n     // Setup depth and stencil buffers\n \n     if ( renderTarget.depthBuffer ) {\n \n       setupDepthRenderbuffer( renderTarget );\n \n     }\n \n   }\n \n   function updateRenderTargetMipmap( renderTarget ) {\n \n     const supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;\n \n     const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];\n \n     for ( let i = 0, il = textures.length; i < il; i ++ ) {\n \n       const texture = textures[ i ];\n \n       if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n \n         const target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;\n         const webglTexture = properties.get( texture ).__webglTexture;\n \n         state.bindTexture( target, webglTexture );\n         generateMipmap( target );\n         state.unbindTexture();\n \n       }\n \n     }\n \n   }\n \n   function updateMultisampleRenderTarget( renderTarget ) {\n \n     if ( renderTarget.useRenderbuffer ) {\n \n       if ( isWebGL2 ) {\n \n         const width = renderTarget.width;\n         const height = renderTarget.height;\n         let mask = 16384;\n         const invalidationArray = [ 36064 ];\n         const depthStyle = renderTarget.stencilBuffer ? 33306 : 36096;\n \n         if ( renderTarget.depthBuffer ) {\n \n           invalidationArray.push( depthStyle );\n \n         }\n \n         if ( ! renderTarget.ignoreDepthForMultisampleCopy ) {\n \n           if ( renderTarget.depthBuffer ) mask |= 256;\n           if ( renderTarget.stencilBuffer ) mask |= 1024;\n \n         }\n \n         const renderTargetProperties = properties.get( renderTarget );\n \n         state.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );\n         state.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );\n \n         if ( renderTarget.ignoreDepthForMultisampleCopy ) {\n \n           _gl.invalidateFramebuffer( 36008, [ depthStyle ] );\n           _gl.invalidateFramebuffer( 36009, [ depthStyle ] );\n \n         }\n \n         _gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );\n         _gl.invalidateFramebuffer( 36008, invalidationArray );\n \n         state.bindFramebuffer( 36008, null );\n         state.bindFramebuffer( 36009, renderTargetProperties.__webglMultisampledFramebuffer );\n \n       } else {\n \n         console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n \n       }\n \n     }\n \n   }\n \n   function getRenderTargetSamples( renderTarget ) {\n \n     return ( isWebGL2 && ( renderTarget.useRenderbuffer || renderTarget.useRenderToTexture ) ) ?\n       Math.min( maxSamples, renderTarget.samples ) : 0;\n \n   }\n \n   function updateVideoTexture( texture ) {\n \n     const frame = info.render.frame;\n \n     // Check the last frame we updated the VideoTexture\n \n     if ( _videoTextures.get( texture ) !== frame ) {\n \n       _videoTextures.set( texture, frame );\n       texture.update();\n \n     }\n \n   }\n \n   // backwards compatibility\n \n   let warnedTexture2D = false;\n   let warnedTextureCube = false;\n \n   function safeSetTexture2D( texture, slot ) {\n \n     if ( texture && texture.isWebGLRenderTarget ) {\n \n       if ( warnedTexture2D === false ) {\n \n         console.warn( 'THREE.WebGLTextures.safeSetTexture2D: don\\'t use render targets as textures. Use their .texture property instead.' );\n         warnedTexture2D = true;\n \n       }\n \n       texture = texture.texture;\n \n     }\n \n     setTexture2D( texture, slot );\n \n   }\n \n   function safeSetTextureCube( texture, slot ) {\n \n     if ( texture && texture.isWebGLCubeRenderTarget ) {\n \n       if ( warnedTextureCube === false ) {\n \n         console.warn( 'THREE.WebGLTextures.safeSetTextureCube: don\\'t use cube render targets as textures. Use their .texture property instead.' );\n         warnedTextureCube = true;\n \n       }\n \n       texture = texture.texture;\n \n     }\n \n \n     setTextureCube( texture, slot );\n \n   }\n \n   //\n \n   this.allocateTextureUnit = allocateTextureUnit;\n   this.resetTextureUnits = resetTextureUnits;\n \n   this.setTexture2D = setTexture2D;\n   this.setTexture2DArray = setTexture2DArray;\n   this.setTexture3D = setTexture3D;\n   this.setTextureCube = setTextureCube;\n   this.rebindTextures = rebindTextures;\n   this.setupRenderTarget = setupRenderTarget;\n   this.updateRenderTargetMipmap = updateRenderTargetMipmap;\n   this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n   this.setupDepthRenderbuffer = setupDepthRenderbuffer;\n   this.setupFrameBufferTexture = setupFrameBufferTexture;\n \n   this.safeSetTexture2D = safeSetTexture2D;\n   this.safeSetTextureCube = safeSetTextureCube;\n \n }\n \n function WebGLUtils( gl, extensions, capabilities ) {\n \n   const isWebGL2 = capabilities.isWebGL2;\n \n   function convert( p ) {\n \n     let extension;\n \n     if ( p === UnsignedByteType ) return 5121;\n     if ( p === UnsignedShort4444Type ) return 32819;\n     if ( p === UnsignedShort5551Type ) return 32820;\n     if ( p === UnsignedShort565Type ) return 33635;\n \n     if ( p === ByteType ) return 5120;\n     if ( p === ShortType ) return 5122;\n     if ( p === UnsignedShortType ) return 5123;\n     if ( p === IntType ) return 5124;\n     if ( p === UnsignedIntType ) return 5125;\n     if ( p === FloatType ) return 5126;\n \n     if ( p === HalfFloatType ) {\n \n       if ( isWebGL2 ) return 5131;\n \n       extension = extensions.get( 'OES_texture_half_float' );\n \n       if ( extension !== null ) {\n \n         return extension.HALF_FLOAT_OES;\n \n       } else {\n \n         return null;\n \n       }\n \n     }\n \n     if ( p === AlphaFormat ) return 6406;\n     if ( p === RGBFormat ) return 6407;\n     if ( p === RGBAFormat ) return 6408;\n     if ( p === LuminanceFormat ) return 6409;\n     if ( p === LuminanceAlphaFormat ) return 6410;\n     if ( p === DepthFormat ) return 6402;\n     if ( p === DepthStencilFormat ) return 34041;\n     if ( p === RedFormat ) return 6403;\n \n     // WebGL2 formats.\n \n     if ( p === RedIntegerFormat ) return 36244;\n     if ( p === RGFormat ) return 33319;\n     if ( p === RGIntegerFormat ) return 33320;\n     if ( p === RGBIntegerFormat ) return 36248;\n     if ( p === RGBAIntegerFormat ) return 36249;\n \n     if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n       p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n \n       extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n \n       if ( extension !== null ) {\n \n         if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n         if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n         if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n         if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n \n       } else {\n \n         return null;\n \n       }\n \n     }\n \n     if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n       p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n \n       extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n \n       if ( extension !== null ) {\n \n         if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n         if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n         if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n         if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n \n       } else {\n \n         return null;\n \n       }\n \n     }\n \n     if ( p === RGB_ETC1_Format ) {\n \n       extension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n \n       if ( extension !== null ) {\n \n         return extension.COMPRESSED_RGB_ETC1_WEBGL;\n \n       } else {\n \n         return null;\n \n       }\n \n     }\n \n     if ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {\n \n       extension = extensions.get( 'WEBGL_compressed_texture_etc' );\n \n       if ( extension !== null ) {\n \n         if ( p === RGB_ETC2_Format ) return extension.COMPRESSED_RGB8_ETC2;\n         if ( p === RGBA_ETC2_EAC_Format ) return extension.COMPRESSED_RGBA8_ETC2_EAC;\n \n       }\n \n     }\n \n     if ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n       p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n       p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n       p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n       p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ||\n       p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format ||\n       p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format ||\n       p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format ||\n       p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format ||\n       p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format ) {\n \n       extension = extensions.get( 'WEBGL_compressed_texture_astc' );\n \n       if ( extension !== null ) {\n \n         // TODO Complete?\n \n         return p;\n \n       } else {\n \n         return null;\n \n       }\n \n     }\n \n     if ( p === RGBA_BPTC_Format ) {\n \n       extension = extensions.get( 'EXT_texture_compression_bptc' );\n \n       if ( extension !== null ) {\n \n         // TODO Complete?\n \n         return p;\n \n       } else {\n \n         return null;\n \n       }\n \n     }\n \n     if ( p === UnsignedInt248Type ) {\n \n       if ( isWebGL2 ) return 34042;\n \n       extension = extensions.get( 'WEBGL_depth_texture' );\n \n       if ( extension !== null ) {\n \n         return extension.UNSIGNED_INT_24_8_WEBGL;\n \n       } else {\n \n         return null;\n \n       }\n \n     }\n \n   }\n \n   return { convert: convert };\n \n }\n \n class ArrayCamera extends PerspectiveCamera {\n \n   constructor( array = [] ) {\n \n     super();\n \n     this.cameras = array;\n \n   }\n \n }\n \n ArrayCamera.prototype.isArrayCamera = true;\n \n class Group extends Object3D {\n \n   constructor() {\n \n     super();\n \n     this.type = 'Group';\n \n   }\n \n }\n \n Group.prototype.isGroup = true;\n \n const _moveEvent = { type: 'move' };\n \n class WebXRController {\n \n   constructor() {\n \n     this._targetRay = null;\n     this._grip = null;\n     this._hand = null;\n \n   }\n \n   getHandSpace() {\n \n     if ( this._hand === null ) {\n \n       this._hand = new Group();\n       this._hand.matrixAutoUpdate = false;\n       this._hand.visible = false;\n \n       this._hand.joints = {};\n       this._hand.inputState = { pinching: false };\n \n     }\n \n     return this._hand;\n \n   }\n \n   getTargetRaySpace() {\n \n     if ( this._targetRay === null ) {\n \n       this._targetRay = new Group();\n       this._targetRay.matrixAutoUpdate = false;\n       this._targetRay.visible = false;\n       this._targetRay.hasLinearVelocity = false;\n       this._targetRay.linearVelocity = new Vector3();\n       this._targetRay.hasAngularVelocity = false;\n       this._targetRay.angularVelocity = new Vector3();\n \n     }\n \n     return this._targetRay;\n \n   }\n \n   getGripSpace() {\n \n     if ( this._grip === null ) {\n \n       this._grip = new Group();\n       this._grip.matrixAutoUpdate = false;\n       this._grip.visible = false;\n       this._grip.hasLinearVelocity = false;\n       this._grip.linearVelocity = new Vector3();\n       this._grip.hasAngularVelocity = false;\n       this._grip.angularVelocity = new Vector3();\n \n     }\n \n     return this._grip;\n \n   }\n \n   dispatchEvent( event ) {\n \n     if ( this._targetRay !== null ) {\n \n       this._targetRay.dispatchEvent( event );\n \n     }\n \n     if ( this._grip !== null ) {\n \n       this._grip.dispatchEvent( event );\n \n     }\n \n     if ( this._hand !== null ) {\n \n       this._hand.dispatchEvent( event );\n \n     }\n \n     return this;\n \n   }\n \n   disconnect( inputSource ) {\n \n     this.dispatchEvent( { type: 'disconnected', data: inputSource } );\n \n     if ( this._targetRay !== null ) {\n \n       this._targetRay.visible = false;\n \n     }\n \n     if ( this._grip !== null ) {\n \n       this._grip.visible = false;\n \n     }\n \n     if ( this._hand !== null ) {\n \n       this._hand.visible = false;\n \n     }\n \n     return this;\n \n   }\n \n   update( inputSource, frame, referenceSpace ) {\n \n     let inputPose = null;\n     let gripPose = null;\n     let handPose = null;\n \n     const targetRay = this._targetRay;\n     const grip = this._grip;\n     const hand = this._hand;\n \n     if ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {\n \n       if ( targetRay !== null ) {\n \n         inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n \n         if ( inputPose !== null ) {\n \n           targetRay.matrix.fromArray( inputPose.transform.matrix );\n           targetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );\n \n           if ( inputPose.linearVelocity ) {\n \n             targetRay.hasLinearVelocity = true;\n             targetRay.linearVelocity.copy( inputPose.linearVelocity );\n \n           } else {\n \n             targetRay.hasLinearVelocity = false;\n \n           }\n \n           if ( inputPose.angularVelocity ) {\n \n             targetRay.hasAngularVelocity = true;\n             targetRay.angularVelocity.copy( inputPose.angularVelocity );\n \n           } else {\n \n             targetRay.hasAngularVelocity = false;\n \n           }\n \n           this.dispatchEvent( _moveEvent );\n \n         }\n \n       }\n \n       if ( hand && inputSource.hand ) {\n \n         handPose = true;\n \n         for ( const inputjoint of inputSource.hand.values() ) {\n \n           // Update the joints groups with the XRJoint poses\n           const jointPose = frame.getJointPose( inputjoint, referenceSpace );\n \n           if ( hand.joints[ inputjoint.jointName ] === undefined ) {\n \n             // The transform of this joint will be updated with the joint pose on each frame\n             const joint = new Group();\n             joint.matrixAutoUpdate = false;\n             joint.visible = false;\n             hand.joints[ inputjoint.jointName ] = joint;\n             // ??\n             hand.add( joint );\n \n           }\n \n           const joint = hand.joints[ inputjoint.jointName ];\n \n           if ( jointPose !== null ) {\n \n             joint.matrix.fromArray( jointPose.transform.matrix );\n             joint.matrix.decompose( joint.position, joint.rotation, joint.scale );\n             joint.jointRadius = jointPose.radius;\n \n           }\n \n           joint.visible = jointPose !== null;\n \n         }\n \n         // Custom events\n \n         // Check pinchz\n         const indexTip = hand.joints[ 'index-finger-tip' ];\n         const thumbTip = hand.joints[ 'thumb-tip' ];\n         const distance = indexTip.position.distanceTo( thumbTip.position );\n \n         const distanceToPinch = 0.02;\n         const threshold = 0.005;\n \n         if ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {\n \n           hand.inputState.pinching = false;\n           this.dispatchEvent( {\n             type: 'pinchend',\n             handedness: inputSource.handedness,\n             target: this\n           } );\n \n         } else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {\n \n           hand.inputState.pinching = true;\n           this.dispatchEvent( {\n             type: 'pinchstart',\n             handedness: inputSource.handedness,\n             target: this\n           } );\n \n         }\n \n       } else {\n \n         if ( grip !== null && inputSource.gripSpace ) {\n \n           gripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n \n           if ( gripPose !== null ) {\n \n             grip.matrix.fromArray( gripPose.transform.matrix );\n             grip.matrix.decompose( grip.position, grip.rotation, grip.scale );\n \n             if ( gripPose.linearVelocity ) {\n \n               grip.hasLinearVelocity = true;\n               grip.linearVelocity.copy( gripPose.linearVelocity );\n \n             } else {\n \n               grip.hasLinearVelocity = false;\n \n             }\n \n             if ( gripPose.angularVelocity ) {\n \n               grip.hasAngularVelocity = true;\n               grip.angularVelocity.copy( gripPose.angularVelocity );\n \n             } else {\n \n               grip.hasAngularVelocity = false;\n \n             }\n \n           }\n \n         }\n \n       }\n \n     }\n \n     if ( targetRay !== null ) {\n \n       targetRay.visible = ( inputPose !== null );\n \n     }\n \n     if ( grip !== null ) {\n \n       grip.visible = ( gripPose !== null );\n \n     }\n \n     if ( hand !== null ) {\n \n       hand.visible = ( handPose !== null );\n \n     }\n \n     return this;\n \n   }\n \n }\n \n class DepthTexture extends Texture {\n \n   constructor( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n \n     format = format !== undefined ? format : DepthFormat;\n \n     if ( format !== DepthFormat && format !== DepthStencilFormat ) {\n \n       throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n \n     }\n \n     if ( type === undefined && format === DepthFormat ) type = UnsignedShortType;\n     if ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\n \n     super( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n \n     this.image = { width: width, height: height };\n \n     this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n     this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n \n     this.flipY = false;\n     this.generateMipmaps\t= false;\n \n   }\n \n \n }\n \n DepthTexture.prototype.isDepthTexture = true;\n \n class WebXRManager extends EventDispatcher {\n \n   constructor( renderer, gl ) {\n \n     super();\n \n     const scope = this;\n \n     let session = null;\n     let framebufferScaleFactor = 1.0;\n \n     let referenceSpace = null;\n     let referenceSpaceType = 'local-floor';\n     const hasMultisampledRenderToTexture = renderer.extensions.has( 'WEBGL_multisampled_render_to_texture' );\n \n     let pose = null;\n     let glBinding = null;\n     let glProjLayer = null;\n     let glBaseLayer = null;\n     let isMultisample = false;\n     let xrFrame = null;\n     const attributes = gl.getContextAttributes();\n     let initialRenderTarget = null;\n     let newRenderTarget = null;\n \n     const controllers = [];\n     const inputSourcesMap = new Map();\n \n     //\n \n     const cameraL = new PerspectiveCamera();\n     cameraL.layers.enable( 1 );\n     cameraL.viewport = new Vector4();\n \n     const cameraR = new PerspectiveCamera();\n     cameraR.layers.enable( 2 );\n     cameraR.viewport = new Vector4();\n \n     const cameras = [ cameraL, cameraR ];\n \n     const cameraVR = new ArrayCamera();\n     cameraVR.layers.enable( 1 );\n     cameraVR.layers.enable( 2 );\n \n     let _currentDepthNear = null;\n     let _currentDepthFar = null;\n \n     //\n \n     this.cameraAutoUpdate = true;\n     this.enabled = false;\n \n     this.isPresenting = false;\n \n     this.getController = function ( index ) {\n \n       let controller = controllers[ index ];\n \n       if ( controller === undefined ) {\n \n         controller = new WebXRController();\n         controllers[ index ] = controller;\n \n       }\n \n       return controller.getTargetRaySpace();\n \n     };\n \n     this.getControllerGrip = function ( index ) {\n \n       let controller = controllers[ index ];\n \n       if ( controller === undefined ) {\n \n         controller = new WebXRController();\n         controllers[ index ] = controller;\n \n       }\n \n       return controller.getGripSpace();\n \n     };\n \n     this.getHand = function ( index ) {\n \n       let controller = controllers[ index ];\n \n       if ( controller === undefined ) {\n \n         controller = new WebXRController();\n         controllers[ index ] = controller;\n \n       }\n \n       return controller.getHandSpace();\n \n     };\n \n     //\n \n     function onSessionEvent( event ) {\n \n       const controller = inputSourcesMap.get( event.inputSource );\n \n       if ( controller ) {\n \n         controller.dispatchEvent( { type: event.type, data: event.inputSource } );\n \n       }\n \n     }\n \n     function onSessionEnd() {\n \n       inputSourcesMap.forEach( function ( controller, inputSource ) {\n \n         controller.disconnect( inputSource );\n \n       } );\n \n       inputSourcesMap.clear();\n \n       _currentDepthNear = null;\n       _currentDepthFar = null;\n \n       // restore framebuffer/rendering state\n \n       renderer.setRenderTarget( initialRenderTarget );\n \n       glBaseLayer = null;\n       glProjLayer = null;\n       glBinding = null;\n       session = null;\n       newRenderTarget = null;\n \n       //\n \n       animation.stop();\n \n       scope.isPresenting = false;\n \n       scope.dispatchEvent( { type: 'sessionend' } );\n \n     }\n \n     this.setFramebufferScaleFactor = function ( value ) {\n \n       framebufferScaleFactor = value;\n \n       if ( scope.isPresenting === true ) {\n \n         console.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );\n \n       }\n \n     };\n \n     this.setReferenceSpaceType = function ( value ) {\n \n       referenceSpaceType = value;\n \n       if ( scope.isPresenting === true ) {\n \n         console.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );\n \n       }\n \n     };\n \n     this.getReferenceSpace = function () {\n \n       return referenceSpace;\n \n     };\n \n     this.getBaseLayer = function () {\n \n       return glProjLayer !== null ? glProjLayer : glBaseLayer;\n \n     };\n \n     this.getBinding = function () {\n \n       return glBinding;\n \n     };\n \n     this.getFrame = function () {\n \n       return xrFrame;\n \n     };\n \n     this.getSession = function () {\n \n       return session;\n \n     };\n \n     this.setSession = async function ( value ) {\n \n       session = value;\n \n       if ( session !== null ) {\n \n         initialRenderTarget = renderer.getRenderTarget();\n \n         session.addEventListener( 'select', onSessionEvent );\n         session.addEventListener( 'selectstart', onSessionEvent );\n         session.addEventListener( 'selectend', onSessionEvent );\n         session.addEventListener( 'squeeze', onSessionEvent );\n         session.addEventListener( 'squeezestart', onSessionEvent );\n         session.addEventListener( 'squeezeend', onSessionEvent );\n         session.addEventListener( 'end', onSessionEnd );\n         session.addEventListener( 'inputsourceschange', onInputSourcesChange );\n \n         if ( attributes.xrCompatible !== true ) {\n \n           await gl.makeXRCompatible();\n \n         }\n \n         if ( ( session.renderState.layers === undefined ) || ( renderer.capabilities.isWebGL2 === false ) ) {\n \n           const layerInit = {\n             antialias: ( session.renderState.layers === undefined ) ? attributes.antialias : true,\n             alpha: attributes.alpha,\n             depth: attributes.depth,\n             stencil: attributes.stencil,\n             framebufferScaleFactor: framebufferScaleFactor\n           };\n \n           glBaseLayer = new XRWebGLLayer( session, gl, layerInit );\n \n           session.updateRenderState( { baseLayer: glBaseLayer } );\n \n           newRenderTarget = new WebGLRenderTarget(\n             glBaseLayer.framebufferWidth,\n             glBaseLayer.framebufferHeight\n           );\n \n         } else {\n \n           isMultisample = attributes.antialias;\n           let depthFormat = null;\n           let depthType = null;\n           let glDepthFormat = null;\n \n           if ( attributes.depth ) {\n \n             glDepthFormat = attributes.stencil ? 35056 : 33189;\n             depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;\n             depthType = attributes.stencil ? UnsignedInt248Type : UnsignedShortType;\n \n           }\n \n           const projectionlayerInit = {\n             colorFormat: ( attributes.alpha || isMultisample ) ? 32856 : 32849,\n             depthFormat: glDepthFormat,\n             scaleFactor: framebufferScaleFactor\n           };\n \n           glBinding = new XRWebGLBinding( session, gl );\n \n           glProjLayer = glBinding.createProjectionLayer( projectionlayerInit );\n \n           session.updateRenderState( { layers: [ glProjLayer ] } );\n \n           if ( isMultisample ) {\n \n             newRenderTarget = new WebGLMultisampleRenderTarget(\n               glProjLayer.textureWidth,\n               glProjLayer.textureHeight,\n               {\n                 format: RGBAFormat,\n                 type: UnsignedByteType,\n                 depthTexture: new DepthTexture( glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat ),\n                 stencilBuffer: attributes.stencil,\n                 ignoreDepth: glProjLayer.ignoreDepthValues,\n                 useRenderToTexture: hasMultisampledRenderToTexture,\n               } );\n \n           } else {\n \n             newRenderTarget = new WebGLRenderTarget(\n               glProjLayer.textureWidth,\n               glProjLayer.textureHeight,\n               {\n                 format: attributes.alpha ? RGBAFormat : RGBFormat,\n                 type: UnsignedByteType,\n                 depthTexture: new DepthTexture( glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat ),\n                 stencilBuffer: attributes.stencil,\n                 ignoreDepth: glProjLayer.ignoreDepthValues,\n               } );\n \n           }\n \n         }\n \n         // Set foveation to maximum.\n         this.setFoveation( 0 );\n \n         referenceSpace = await session.requestReferenceSpace( referenceSpaceType );\n \n         animation.setContext( session );\n         animation.start();\n \n         scope.isPresenting = true;\n \n         scope.dispatchEvent( { type: 'sessionstart' } );\n \n       }\n \n     };\n \n     function onInputSourcesChange( event ) {\n \n       const inputSources = session.inputSources;\n \n       // Assign inputSources to available controllers\n \n       for ( let i = 0; i < controllers.length; i ++ ) {\n \n         inputSourcesMap.set( inputSources[ i ], controllers[ i ] );\n \n       }\n \n       // Notify disconnected\n \n       for ( let i = 0; i < event.removed.length; i ++ ) {\n \n         const inputSource = event.removed[ i ];\n         const controller = inputSourcesMap.get( inputSource );\n \n         if ( controller ) {\n \n           controller.dispatchEvent( { type: 'disconnected', data: inputSource } );\n           inputSourcesMap.delete( inputSource );\n \n         }\n \n       }\n \n       // Notify connected\n \n       for ( let i = 0; i < event.added.length; i ++ ) {\n \n         const inputSource = event.added[ i ];\n         const controller = inputSourcesMap.get( inputSource );\n \n         if ( controller ) {\n \n           controller.dispatchEvent( { type: 'connected', data: inputSource } );\n \n         }\n \n       }\n \n     }\n \n     //\n \n     const cameraLPos = new Vector3();\n     const cameraRPos = new Vector3();\n \n     /**\n      * Assumes 2 cameras that are parallel and share an X-axis, and that\n      * the cameras' projection and world matrices have already been set.\n      * And that near and far planes are identical for both cameras.\n      * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n      */\n     function setProjectionFromUnion( camera, cameraL, cameraR ) {\n \n       cameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n       cameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n \n       const ipd = cameraLPos.distanceTo( cameraRPos );\n \n       const projL = cameraL.projectionMatrix.elements;\n       const projR = cameraR.projectionMatrix.elements;\n \n       // VR systems will have identical far and near planes, and\n       // most likely identical top and bottom frustum extents.\n       // Use the left camera for these values.\n       const near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n       const far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n       const topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n       const bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n \n       const leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n       const rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n       const left = near * leftFov;\n       const right = near * rightFov;\n \n       // Calculate the new camera's position offset from the\n       // left camera. xOffset should be roughly half `ipd`.\n       const zOffset = ipd / ( - leftFov + rightFov );\n       const xOffset = zOffset * - leftFov;\n \n       // TODO: Better way to apply this offset?\n       cameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n       camera.translateX( xOffset );\n       camera.translateZ( zOffset );\n       camera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n       camera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n \n       // Find the union of the frustum values of the cameras and scale\n       // the values so that the near plane's position does not change in world space,\n       // although must now be relative to the new union camera.\n       const near2 = near + zOffset;\n       const far2 = far + zOffset;\n       const left2 = left - xOffset;\n       const right2 = right + ( ipd - xOffset );\n       const top2 = topFov * far / far2 * near2;\n       const bottom2 = bottomFov * far / far2 * near2;\n \n       camera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n \n     }\n \n     function updateCamera( camera, parent ) {\n \n       if ( parent === null ) {\n \n         camera.matrixWorld.copy( camera.matrix );\n \n       } else {\n \n         camera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n \n       }\n \n       camera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n \n     }\n \n     this.updateCamera = function ( camera ) {\n \n       if ( session === null ) return;\n \n       cameraVR.near = cameraR.near = cameraL.near = camera.near;\n       cameraVR.far = cameraR.far = cameraL.far = camera.far;\n \n       if ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {\n \n         // Note that the new renderState won't apply until the next frame. See #18320\n \n         session.updateRenderState( {\n           depthNear: cameraVR.near,\n           depthFar: cameraVR.far\n         } );\n \n         _currentDepthNear = cameraVR.near;\n         _currentDepthFar = cameraVR.far;\n \n       }\n \n       const parent = camera.parent;\n       const cameras = cameraVR.cameras;\n \n       updateCamera( cameraVR, parent );\n \n       for ( let i = 0; i < cameras.length; i ++ ) {\n \n         updateCamera( cameras[ i ], parent );\n \n       }\n \n       cameraVR.matrixWorld.decompose( cameraVR.position, cameraVR.quaternion, cameraVR.scale );\n \n       // update user camera and its children\n \n       camera.position.copy( cameraVR.position );\n       camera.quaternion.copy( cameraVR.quaternion );\n       camera.scale.copy( cameraVR.scale );\n       camera.matrix.copy( cameraVR.matrix );\n       camera.matrixWorld.copy( cameraVR.matrixWorld );\n \n       const children = camera.children;\n \n       for ( let i = 0, l = children.length; i < l; i ++ ) {\n \n         children[ i ].updateMatrixWorld( true );\n \n       }\n \n       // update projection matrix for proper view frustum culling\n \n       if ( cameras.length === 2 ) {\n \n         setProjectionFromUnion( cameraVR, cameraL, cameraR );\n \n       } else {\n \n         // assume single camera setup (AR)\n \n         cameraVR.projectionMatrix.copy( cameraL.projectionMatrix );\n \n       }\n \n     };\n \n     this.getCamera = function () {\n \n       return cameraVR;\n \n     };\n \n     this.getFoveation = function () {\n \n       if ( glProjLayer !== null ) {\n \n         return glProjLayer.fixedFoveation;\n \n       }\n \n       if ( glBaseLayer !== null ) {\n \n         return glBaseLayer.fixedFoveation;\n \n       }\n \n       return undefined;\n \n     };\n \n     this.setFoveation = function ( foveation ) {\n \n       // 0 = no foveation = full resolution\n       // 1 = maximum foveation = the edges render at lower resolution\n \n       if ( glProjLayer !== null ) {\n \n         glProjLayer.fixedFoveation = foveation;\n \n       }\n \n       if ( glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined ) {\n \n         glBaseLayer.fixedFoveation = foveation;\n \n       }\n \n     };\n \n     // Animation Loop\n \n     let onAnimationFrameCallback = null;\n \n     function onAnimationFrame( time, frame ) {\n \n       pose = frame.getViewerPose( referenceSpace );\n       xrFrame = frame;\n \n       if ( pose !== null ) {\n \n         const views = pose.views;\n \n         if ( glBaseLayer !== null ) {\n \n           renderer.setRenderTargetFramebuffer( newRenderTarget, glBaseLayer.framebuffer );\n           renderer.setRenderTarget( newRenderTarget );\n \n         }\n \n         let cameraVRNeedsUpdate = false;\n \n         // check if it's necessary to rebuild cameraVR's camera list\n \n         if ( views.length !== cameraVR.cameras.length ) {\n \n           cameraVR.cameras.length = 0;\n           cameraVRNeedsUpdate = true;\n \n         }\n \n         for ( let i = 0; i < views.length; i ++ ) {\n \n           const view = views[ i ];\n \n           let viewport = null;\n \n           if ( glBaseLayer !== null ) {\n \n             viewport = glBaseLayer.getViewport( view );\n \n           } else {\n \n             const glSubImage = glBinding.getViewSubImage( glProjLayer, view );\n             viewport = glSubImage.viewport;\n \n             // For side-by-side projection, we only produce a single texture for both eyes.\n             if ( i === 0 ) {\n \n               renderer.setRenderTargetTextures(\n                 newRenderTarget,\n                 glSubImage.colorTexture,\n                 glProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture );\n \n               renderer.setRenderTarget( newRenderTarget );\n \n             }\n \n           }\n \n           const camera = cameras[ i ];\n \n           camera.matrix.fromArray( view.transform.matrix );\n           camera.projectionMatrix.fromArray( view.projectionMatrix );\n           camera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n \n           if ( i === 0 ) {\n \n             cameraVR.matrix.copy( camera.matrix );\n \n           }\n \n           if ( cameraVRNeedsUpdate === true ) {\n \n             cameraVR.cameras.push( camera );\n \n           }\n \n         }\n \n       }\n \n       //\n \n       const inputSources = session.inputSources;\n \n       for ( let i = 0; i < controllers.length; i ++ ) {\n \n         const controller = controllers[ i ];\n         const inputSource = inputSources[ i ];\n \n         controller.update( inputSource, frame, referenceSpace );\n \n       }\n \n       if ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );\n \n       xrFrame = null;\n \n     }\n \n     const animation = new WebGLAnimation();\n \n     animation.setAnimationLoop( onAnimationFrame );\n \n     this.setAnimationLoop = function ( callback ) {\n \n       onAnimationFrameCallback = callback;\n \n     };\n \n     this.dispose = function () {};\n \n   }\n \n }\n \n function WebGLMaterials( properties ) {\n \n   function refreshFogUniforms( uniforms, fog ) {\n \n     uniforms.fogColor.value.copy( fog.color );\n \n     if ( fog.isFog ) {\n \n       uniforms.fogNear.value = fog.near;\n       uniforms.fogFar.value = fog.far;\n \n     } else if ( fog.isFogExp2 ) {\n \n       uniforms.fogDensity.value = fog.density;\n \n     }\n \n   }\n \n   function refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {\n \n     if ( material.isMeshBasicMaterial ) {\n \n       refreshUniformsCommon( uniforms, material );\n \n     } else if ( material.isMeshLambertMaterial ) {\n \n       refreshUniformsCommon( uniforms, material );\n       refreshUniformsLambert( uniforms, material );\n \n     } else if ( material.isMeshToonMaterial ) {\n \n       refreshUniformsCommon( uniforms, material );\n       refreshUniformsToon( uniforms, material );\n \n     } else if ( material.isMeshPhongMaterial ) {\n \n       refreshUniformsCommon( uniforms, material );\n       refreshUniformsPhong( uniforms, material );\n \n     } else if ( material.isMeshStandardMaterial ) {\n \n       refreshUniformsCommon( uniforms, material );\n \n       if ( material.isMeshPhysicalMaterial ) {\n \n         refreshUniformsPhysical( uniforms, material, transmissionRenderTarget );\n \n       } else {\n \n         refreshUniformsStandard( uniforms, material );\n \n       }\n \n     } else if ( material.isMeshMatcapMaterial ) {\n \n       refreshUniformsCommon( uniforms, material );\n       refreshUniformsMatcap( uniforms, material );\n \n     } else if ( material.isMeshDepthMaterial ) {\n \n       refreshUniformsCommon( uniforms, material );\n       refreshUniformsDepth( uniforms, material );\n \n     } else if ( material.isMeshDistanceMaterial ) {\n \n       refreshUniformsCommon( uniforms, material );\n       refreshUniformsDistance( uniforms, material );\n \n     } else if ( material.isMeshNormalMaterial ) {\n \n       refreshUniformsCommon( uniforms, material );\n       refreshUniformsNormal( uniforms, material );\n \n     } else if ( material.isLineBasicMaterial ) {\n \n       refreshUniformsLine( uniforms, material );\n \n       if ( material.isLineDashedMaterial ) {\n \n         refreshUniformsDash( uniforms, material );\n \n       }\n \n     } else if ( material.isPointsMaterial ) {\n \n       refreshUniformsPoints( uniforms, material, pixelRatio, height );\n \n     } else if ( material.isSpriteMaterial ) {\n \n       refreshUniformsSprites( uniforms, material );\n \n     } else if ( material.isShadowMaterial ) {\n \n       uniforms.color.value.copy( material.color );\n       uniforms.opacity.value = material.opacity;\n \n     } else if ( material.isShaderMaterial ) {\n \n       material.uniformsNeedUpdate = false; // #15581\n \n     }\n \n   }\n \n   function refreshUniformsCommon( uniforms, material ) {\n \n     uniforms.opacity.value = material.opacity;\n \n     if ( material.color ) {\n \n       uniforms.diffuse.value.copy( material.color );\n \n     }\n \n     if ( material.emissive ) {\n \n       uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n \n     }\n \n     if ( material.map ) {\n \n       uniforms.map.value = material.map;\n \n     }\n \n     if ( material.alphaMap ) {\n \n       uniforms.alphaMap.value = material.alphaMap;\n \n     }\n \n     if ( material.specularMap ) {\n \n       uniforms.specularMap.value = material.specularMap;\n \n     }\n \n     if ( material.alphaTest > 0 ) {\n \n       uniforms.alphaTest.value = material.alphaTest;\n \n     }\n \n     const envMap = properties.get( material ).envMap;\n \n     if ( envMap ) {\n \n       uniforms.envMap.value = envMap;\n \n       uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;\n \n       uniforms.reflectivity.value = material.reflectivity;\n       uniforms.ior.value = material.ior;\n       uniforms.refractionRatio.value = material.refractionRatio;\n \n     }\n \n     if ( material.lightMap ) {\n \n       uniforms.lightMap.value = material.lightMap;\n       uniforms.lightMapIntensity.value = material.lightMapIntensity;\n \n     }\n \n     if ( material.aoMap ) {\n \n       uniforms.aoMap.value = material.aoMap;\n       uniforms.aoMapIntensity.value = material.aoMapIntensity;\n \n     }\n \n     // uv repeat and offset setting priorities\n     // 1. color map\n     // 2. specular map\n     // 3. displacementMap map\n     // 4. normal map\n     // 5. bump map\n     // 6. roughnessMap map\n     // 7. metalnessMap map\n     // 8. alphaMap map\n     // 9. emissiveMap map\n     // 10. clearcoat map\n     // 11. clearcoat normal map\n     // 12. clearcoat roughnessMap map\n     // 13. specular intensity map\n     // 14. specular tint map\n     // 15. transmission map\n     // 16. thickness map\n \n     let uvScaleMap;\n \n     if ( material.map ) {\n \n       uvScaleMap = material.map;\n \n     } else if ( material.specularMap ) {\n \n       uvScaleMap = material.specularMap;\n \n     } else if ( material.displacementMap ) {\n \n       uvScaleMap = material.displacementMap;\n \n     } else if ( material.normalMap ) {\n \n       uvScaleMap = material.normalMap;\n \n     } else if ( material.bumpMap ) {\n \n       uvScaleMap = material.bumpMap;\n \n     } else if ( material.roughnessMap ) {\n \n       uvScaleMap = material.roughnessMap;\n \n     } else if ( material.metalnessMap ) {\n \n       uvScaleMap = material.metalnessMap;\n \n     } else if ( material.alphaMap ) {\n \n       uvScaleMap = material.alphaMap;\n \n     } else if ( material.emissiveMap ) {\n \n       uvScaleMap = material.emissiveMap;\n \n     } else if ( material.clearcoatMap ) {\n \n       uvScaleMap = material.clearcoatMap;\n \n     } else if ( material.clearcoatNormalMap ) {\n \n       uvScaleMap = material.clearcoatNormalMap;\n \n     } else if ( material.clearcoatRoughnessMap ) {\n \n       uvScaleMap = material.clearcoatRoughnessMap;\n \n     } else if ( material.specularIntensityMap ) {\n \n       uvScaleMap = material.specularIntensityMap;\n \n     } else if ( material.specularColorMap ) {\n \n       uvScaleMap = material.specularColorMap;\n \n     } else if ( material.transmissionMap ) {\n \n       uvScaleMap = material.transmissionMap;\n \n     } else if ( material.thicknessMap ) {\n \n       uvScaleMap = material.thicknessMap;\n \n     } else if ( material.sheenColorMap ) {\n \n       uvScaleMap = material.sheenColorMap;\n \n     } else if ( material.sheenRoughnessMap ) {\n \n       uvScaleMap = material.sheenRoughnessMap;\n \n     }\n \n     if ( uvScaleMap !== undefined ) {\n \n       // backwards compatibility\n       if ( uvScaleMap.isWebGLRenderTarget ) {\n \n         uvScaleMap = uvScaleMap.texture;\n \n       }\n \n       if ( uvScaleMap.matrixAutoUpdate === true ) {\n \n         uvScaleMap.updateMatrix();\n \n       }\n \n       uniforms.uvTransform.value.copy( uvScaleMap.matrix );\n \n     }\n \n     // uv repeat and offset setting priorities for uv2\n     // 1. ao map\n     // 2. light map\n \n     let uv2ScaleMap;\n \n     if ( material.aoMap ) {\n \n       uv2ScaleMap = material.aoMap;\n \n     } else if ( material.lightMap ) {\n \n       uv2ScaleMap = material.lightMap;\n \n     }\n \n     if ( uv2ScaleMap !== undefined ) {\n \n       // backwards compatibility\n       if ( uv2ScaleMap.isWebGLRenderTarget ) {\n \n         uv2ScaleMap = uv2ScaleMap.texture;\n \n       }\n \n       if ( uv2ScaleMap.matrixAutoUpdate === true ) {\n \n         uv2ScaleMap.updateMatrix();\n \n       }\n \n       uniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );\n \n     }\n \n   }\n \n   function refreshUniformsLine( uniforms, material ) {\n \n     uniforms.diffuse.value.copy( material.color );\n     uniforms.opacity.value = material.opacity;\n \n   }\n \n   function refreshUniformsDash( uniforms, material ) {\n \n     uniforms.dashSize.value = material.dashSize;\n     uniforms.totalSize.value = material.dashSize + material.gapSize;\n     uniforms.scale.value = material.scale;\n \n   }\n \n   function refreshUniformsPoints( uniforms, material, pixelRatio, height ) {\n \n     uniforms.diffuse.value.copy( material.color );\n     uniforms.opacity.value = material.opacity;\n     uniforms.size.value = material.size * pixelRatio;\n     uniforms.scale.value = height * 0.5;\n \n     if ( material.map ) {\n \n       uniforms.map.value = material.map;\n \n     }\n \n     if ( material.alphaMap ) {\n \n       uniforms.alphaMap.value = material.alphaMap;\n \n     }\n \n     if ( material.alphaTest > 0 ) {\n \n       uniforms.alphaTest.value = material.alphaTest;\n \n     }\n \n     // uv repeat and offset setting priorities\n     // 1. color map\n     // 2. alpha map\n \n     let uvScaleMap;\n \n     if ( material.map ) {\n \n       uvScaleMap = material.map;\n \n     } else if ( material.alphaMap ) {\n \n       uvScaleMap = material.alphaMap;\n \n     }\n \n     if ( uvScaleMap !== undefined ) {\n \n       if ( uvScaleMap.matrixAutoUpdate === true ) {\n \n         uvScaleMap.updateMatrix();\n \n       }\n \n       uniforms.uvTransform.value.copy( uvScaleMap.matrix );\n \n     }\n \n   }\n \n   function refreshUniformsSprites( uniforms, material ) {\n \n     uniforms.diffuse.value.copy( material.color );\n     uniforms.opacity.value = material.opacity;\n     uniforms.rotation.value = material.rotation;\n \n     if ( material.map ) {\n \n       uniforms.map.value = material.map;\n \n     }\n \n     if ( material.alphaMap ) {\n \n       uniforms.alphaMap.value = material.alphaMap;\n \n     }\n \n     if ( material.alphaTest > 0 ) {\n \n       uniforms.alphaTest.value = material.alphaTest;\n \n     }\n \n     // uv repeat and offset setting priorities\n     // 1. color map\n     // 2. alpha map\n \n     let uvScaleMap;\n \n     if ( material.map ) {\n \n       uvScaleMap = material.map;\n \n     } else if ( material.alphaMap ) {\n \n       uvScaleMap = material.alphaMap;\n \n     }\n \n     if ( uvScaleMap !== undefined ) {\n \n       if ( uvScaleMap.matrixAutoUpdate === true ) {\n \n         uvScaleMap.updateMatrix();\n \n       }\n \n       uniforms.uvTransform.value.copy( uvScaleMap.matrix );\n \n     }\n \n   }\n \n   function refreshUniformsLambert( uniforms, material ) {\n \n     if ( material.emissiveMap ) {\n \n       uniforms.emissiveMap.value = material.emissiveMap;\n \n     }\n \n   }\n \n   function refreshUniformsPhong( uniforms, material ) {\n \n     uniforms.specular.value.copy( material.specular );\n     uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n \n     if ( material.emissiveMap ) {\n \n       uniforms.emissiveMap.value = material.emissiveMap;\n \n     }\n \n     if ( material.bumpMap ) {\n \n       uniforms.bumpMap.value = material.bumpMap;\n       uniforms.bumpScale.value = material.bumpScale;\n       if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n \n     }\n \n     if ( material.normalMap ) {\n \n       uniforms.normalMap.value = material.normalMap;\n       uniforms.normalScale.value.copy( material.normalScale );\n       if ( material.side === BackSide ) uniforms.normalScale.value.negate();\n \n     }\n \n     if ( material.displacementMap ) {\n \n       uniforms.displacementMap.value = material.displacementMap;\n       uniforms.displacementScale.value = material.displacementScale;\n       uniforms.displacementBias.value = material.displacementBias;\n \n     }\n \n   }\n \n   function refreshUniformsToon( uniforms, material ) {\n \n     if ( material.gradientMap ) {\n \n       uniforms.gradientMap.value = material.gradientMap;\n \n     }\n \n     if ( material.emissiveMap ) {\n \n       uniforms.emissiveMap.value = material.emissiveMap;\n \n     }\n \n     if ( material.bumpMap ) {\n \n       uniforms.bumpMap.value = material.bumpMap;\n       uniforms.bumpScale.value = material.bumpScale;\n       if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n \n     }\n \n     if ( material.normalMap ) {\n \n       uniforms.normalMap.value = material.normalMap;\n       uniforms.normalScale.value.copy( material.normalScale );\n       if ( material.side === BackSide ) uniforms.normalScale.value.negate();\n \n     }\n \n     if ( material.displacementMap ) {\n \n       uniforms.displacementMap.value = material.displacementMap;\n       uniforms.displacementScale.value = material.displacementScale;\n       uniforms.displacementBias.value = material.displacementBias;\n \n     }\n \n   }\n \n   function refreshUniformsStandard( uniforms, material ) {\n \n     uniforms.roughness.value = material.roughness;\n     uniforms.metalness.value = material.metalness;\n \n     if ( material.roughnessMap ) {\n \n       uniforms.roughnessMap.value = material.roughnessMap;\n \n     }\n \n     if ( material.metalnessMap ) {\n \n       uniforms.metalnessMap.value = material.metalnessMap;\n \n     }\n \n     if ( material.emissiveMap ) {\n \n       uniforms.emissiveMap.value = material.emissiveMap;\n \n     }\n \n     if ( material.bumpMap ) {\n \n       uniforms.bumpMap.value = material.bumpMap;\n       uniforms.bumpScale.value = material.bumpScale;\n       if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n \n     }\n \n     if ( material.normalMap ) {\n \n       uniforms.normalMap.value = material.normalMap;\n       uniforms.normalScale.value.copy( material.normalScale );\n       if ( material.side === BackSide ) uniforms.normalScale.value.negate();\n \n     }\n \n     if ( material.displacementMap ) {\n \n       uniforms.displacementMap.value = material.displacementMap;\n       uniforms.displacementScale.value = material.displacementScale;\n       uniforms.displacementBias.value = material.displacementBias;\n \n     }\n \n     const envMap = properties.get( material ).envMap;\n \n     if ( envMap ) {\n \n       //uniforms.envMap.value = material.envMap; // part of uniforms common\n       uniforms.envMapIntensity.value = material.envMapIntensity;\n \n     }\n \n   }\n \n   function refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {\n \n     refreshUniformsStandard( uniforms, material );\n \n     uniforms.ior.value = material.ior; // also part of uniforms common\n \n     if ( material.sheen > 0 ) {\n \n       uniforms.sheenColor.value.copy( material.sheenColor ).multiplyScalar( material.sheen );\n \n       uniforms.sheenRoughness.value = material.sheenRoughness;\n \n       if ( material.sheenColorMap ) {\n \n         uniforms.sheenColorMap.value = material.sheenColorMap;\n \n       }\n \n       if ( material.sheenRoughnessMap ) {\n \n         uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;\n \n       }\n \n     }\n \n     if ( material.clearcoat > 0 ) {\n \n       uniforms.clearcoat.value = material.clearcoat;\n       uniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n \n       if ( material.clearcoatMap ) {\n \n         uniforms.clearcoatMap.value = material.clearcoatMap;\n \n       }\n \n       if ( material.clearcoatRoughnessMap ) {\n \n         uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n \n       }\n \n       if ( material.clearcoatNormalMap ) {\n \n         uniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n         uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n \n         if ( material.side === BackSide ) {\n \n           uniforms.clearcoatNormalScale.value.negate();\n \n         }\n \n       }\n \n     }\n \n     if ( material.transmission > 0 ) {\n \n       uniforms.transmission.value = material.transmission;\n       uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n       uniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );\n \n       if ( material.transmissionMap ) {\n \n         uniforms.transmissionMap.value = material.transmissionMap;\n \n       }\n \n       uniforms.thickness.value = material.thickness;\n \n       if ( material.thicknessMap ) {\n \n         uniforms.thicknessMap.value = material.thicknessMap;\n \n       }\n \n       uniforms.attenuationDistance.value = material.attenuationDistance;\n       uniforms.attenuationColor.value.copy( material.attenuationColor );\n \n     }\n \n     uniforms.specularIntensity.value = material.specularIntensity;\n     uniforms.specularColor.value.copy( material.specularColor );\n \n     if ( material.specularIntensityMap ) {\n \n       uniforms.specularIntensityMap.value = material.specularIntensityMap;\n \n     }\n \n     if ( material.specularColorMap ) {\n \n       uniforms.specularColorMap.value = material.specularColorMap;\n \n     }\n \n   }\n \n   function refreshUniformsMatcap( uniforms, material ) {\n \n     if ( material.matcap ) {\n \n       uniforms.matcap.value = material.matcap;\n \n     }\n \n     if ( material.bumpMap ) {\n \n       uniforms.bumpMap.value = material.bumpMap;\n       uniforms.bumpScale.value = material.bumpScale;\n       if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n \n     }\n \n     if ( material.normalMap ) {\n \n       uniforms.normalMap.value = material.normalMap;\n       uniforms.normalScale.value.copy( material.normalScale );\n       if ( material.side === BackSide ) uniforms.normalScale.value.negate();\n \n     }\n \n     if ( material.displacementMap ) {\n \n       uniforms.displacementMap.value = material.displacementMap;\n       uniforms.displacementScale.value = material.displacementScale;\n       uniforms.displacementBias.value = material.displacementBias;\n \n     }\n \n   }\n \n   function refreshUniformsDepth( uniforms, material ) {\n \n     if ( material.displacementMap ) {\n \n       uniforms.displacementMap.value = material.displacementMap;\n       uniforms.displacementScale.value = material.displacementScale;\n       uniforms.displacementBias.value = material.displacementBias;\n \n     }\n \n   }\n \n   function refreshUniformsDistance( uniforms, material ) {\n \n     if ( material.displacementMap ) {\n \n       uniforms.displacementMap.value = material.displacementMap;\n       uniforms.displacementScale.value = material.displacementScale;\n       uniforms.displacementBias.value = material.displacementBias;\n \n     }\n \n     uniforms.referencePosition.value.copy( material.referencePosition );\n     uniforms.nearDistance.value = material.nearDistance;\n     uniforms.farDistance.value = material.farDistance;\n \n   }\n \n   function refreshUniformsNormal( uniforms, material ) {\n \n     if ( material.bumpMap ) {\n \n       uniforms.bumpMap.value = material.bumpMap;\n       uniforms.bumpScale.value = material.bumpScale;\n       if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n \n     }\n \n     if ( material.normalMap ) {\n \n       uniforms.normalMap.value = material.normalMap;\n       uniforms.normalScale.value.copy( material.normalScale );\n       if ( material.side === BackSide ) uniforms.normalScale.value.negate();\n \n     }\n \n     if ( material.displacementMap ) {\n \n       uniforms.displacementMap.value = material.displacementMap;\n       uniforms.displacementScale.value = material.displacementScale;\n       uniforms.displacementBias.value = material.displacementBias;\n \n     }\n \n   }\n \n   return {\n     refreshFogUniforms: refreshFogUniforms,\n     refreshMaterialUniforms: refreshMaterialUniforms\n   };\n \n }\n \n function createCanvasElement() {\n \n   const canvas = createElementNS( 'canvas' );\n   canvas.style.display = 'block';\n   return canvas;\n \n }\n \n function WebGLRenderer( parameters = {} ) {\n \n   const _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),\n     _context = parameters.context !== undefined ? parameters.context : null,\n \n     _alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n     _depth = parameters.depth !== undefined ? parameters.depth : true,\n     _stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n     _antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n     _premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n     _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n     _powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n     _failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n \n   let currentRenderList = null;\n   let currentRenderState = null;\n \n   // render() can be called from within a callback triggered by another render.\n   // We track this so that the nested render call gets its list and state isolated from the parent render call.\n \n   const renderListStack = [];\n   const renderStateStack = [];\n \n   // public properties\n \n   this.domElement = _canvas;\n \n   // Debug configuration container\n   this.debug = {\n \n     /**\n      * Enables error checking and reporting when shader programs are being compiled\n      * @type {boolean}\n      */\n     checkShaderErrors: true\n   };\n \n   // clearing\n \n   this.autoClear = true;\n   this.autoClearColor = true;\n   this.autoClearDepth = true;\n   this.autoClearStencil = true;\n \n   // scene graph\n \n   this.sortObjects = true;\n \n   // user-defined clipping\n \n   this.clippingPlanes = [];\n   this.localClippingEnabled = false;\n \n   // physically based shading\n \n   this.gammaFactor = 2.0;\t// for backwards compatibility\n   this.outputEncoding = LinearEncoding;\n \n   // physical lights\n \n   this.physicallyCorrectLights = false;\n \n   // tone mapping\n \n   this.toneMapping = NoToneMapping;\n   this.toneMappingExposure = 1.0;\n \n   // internal properties\n \n   const _this = this;\n \n   let _isContextLost = false;\n \n   // internal state cache\n \n   let _currentActiveCubeFace = 0;\n   let _currentActiveMipmapLevel = 0;\n   let _currentRenderTarget = null;\n   let _currentMaterialId = - 1;\n \n   let _currentCamera = null;\n \n   const _currentViewport = new Vector4();\n   const _currentScissor = new Vector4();\n   let _currentScissorTest = null;\n \n   //\n \n   let _width = _canvas.width;\n   let _height = _canvas.height;\n \n   let _pixelRatio = 1;\n   let _opaqueSort = null;\n   let _transparentSort = null;\n \n   const _viewport = new Vector4( 0, 0, _width, _height );\n   const _scissor = new Vector4( 0, 0, _width, _height );\n   let _scissorTest = false;\n \n   //\n \n   const _currentDrawBuffers = [];\n \n   // frustum\n \n   const _frustum = new Frustum();\n \n   // clipping\n \n   let _clippingEnabled = false;\n   let _localClippingEnabled = false;\n \n   // transmission\n \n   let _transmissionRenderTarget = null;\n \n   // camera matrices cache\n \n   const _projScreenMatrix = new Matrix4();\n \n   const _vector3 = new Vector3();\n \n   const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };\n \n   function getTargetPixelRatio() {\n \n     return _currentRenderTarget === null ? _pixelRatio : 1;\n \n   }\n \n   // initialize\n \n   let _gl = _context;\n \n   function getContext( contextNames, contextAttributes ) {\n \n     for ( let i = 0; i < contextNames.length; i ++ ) {\n \n       const contextName = contextNames[ i ];\n       const context = _canvas.getContext( contextName, contextAttributes );\n       if ( context !== null ) return context;\n \n     }\n \n     return null;\n \n   }\n \n   try {\n \n     const contextAttributes = {\n       alpha: _alpha,\n       depth: _depth,\n       stencil: _stencil,\n       antialias: _antialias,\n       premultipliedAlpha: _premultipliedAlpha,\n       preserveDrawingBuffer: _preserveDrawingBuffer,\n       powerPreference: _powerPreference,\n       failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n     };\n \n     // OffscreenCanvas does not have setAttribute, see #22811\n     if ( 'setAttribute' in _canvas ) _canvas.setAttribute( 'data-engine', `three.js r${REVISION}` );\n \n     // event listeners must be registered before WebGL context is created, see #12753\n     _canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n     _canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n \n     if ( _gl === null ) {\n \n       const contextNames = [ 'webgl2', 'webgl', 'experimental-webgl' ];\n \n       if ( _this.isWebGL1Renderer === true ) {\n \n         contextNames.shift();\n \n       }\n \n       _gl = getContext( contextNames, contextAttributes );\n \n       if ( _gl === null ) {\n \n         if ( getContext( contextNames ) ) {\n \n           throw new Error( 'Error creating WebGL context with your selected attributes.' );\n \n         } else {\n \n           throw new Error( 'Error creating WebGL context.' );\n \n         }\n \n       }\n \n     }\n \n     // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n \n     if ( _gl.getShaderPrecisionFormat === undefined ) {\n \n       _gl.getShaderPrecisionFormat = function () {\n \n         return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n \n       };\n \n     }\n \n   } catch ( error ) {\n \n     console.error( 'THREE.WebGLRenderer: ' + error.message );\n     throw error;\n \n   }\n \n   let extensions, capabilities, state, info;\n   let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;\n   let programCache, materials, renderLists, renderStates, clipping, shadowMap;\n \n   let background, morphtargets, bufferRenderer, indexedBufferRenderer;\n \n   let utils, bindingStates;\n \n   function initGLContext() {\n \n     extensions = new WebGLExtensions( _gl );\n \n     capabilities = new WebGLCapabilities( _gl, extensions, parameters );\n \n     extensions.init( capabilities );\n \n     utils = new WebGLUtils( _gl, extensions, capabilities );\n \n     state = new WebGLState( _gl, extensions, capabilities );\n \n     _currentDrawBuffers[ 0 ] = 1029;\n \n     info = new WebGLInfo( _gl );\n     properties = new WebGLProperties();\n     textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n     cubemaps = new WebGLCubeMaps( _this );\n     cubeuvmaps = new WebGLCubeUVMaps( _this );\n     attributes = new WebGLAttributes( _gl, capabilities );\n     bindingStates = new WebGLBindingStates( _gl, extensions, attributes, capabilities );\n     geometries = new WebGLGeometries( _gl, attributes, info, bindingStates );\n     objects = new WebGLObjects( _gl, geometries, attributes, info );\n     morphtargets = new WebGLMorphtargets( _gl, capabilities, textures );\n     clipping = new WebGLClipping( properties );\n     programCache = new WebGLPrograms( _this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping );\n     materials = new WebGLMaterials( properties );\n     renderLists = new WebGLRenderLists( properties );\n     renderStates = new WebGLRenderStates( extensions, capabilities );\n     background = new WebGLBackground( _this, cubemaps, state, objects, _premultipliedAlpha );\n     shadowMap = new WebGLShadowMap( _this, objects, capabilities );\n \n     bufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n     indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n \n     info.programs = programCache.programs;\n \n     _this.capabilities = capabilities;\n     _this.extensions = extensions;\n     _this.properties = properties;\n     _this.renderLists = renderLists;\n     _this.shadowMap = shadowMap;\n     _this.state = state;\n     _this.info = info;\n \n   }\n \n   initGLContext();\n \n   // xr\n \n   const xr = new WebXRManager( _this, _gl );\n \n   this.xr = xr;\n \n   // API\n \n   this.getContext = function () {\n \n     return _gl;\n \n   };\n \n   this.getContextAttributes = function () {\n \n     return _gl.getContextAttributes();\n \n   };\n \n   this.forceContextLoss = function () {\n \n     const extension = extensions.get( 'WEBGL_lose_context' );\n     if ( extension ) extension.loseContext();\n \n   };\n \n   this.forceContextRestore = function () {\n \n     const extension = extensions.get( 'WEBGL_lose_context' );\n     if ( extension ) extension.restoreContext();\n \n   };\n \n   this.getPixelRatio = function () {\n \n     return _pixelRatio;\n \n   };\n \n   this.setPixelRatio = function ( value ) {\n \n     if ( value === undefined ) return;\n \n     _pixelRatio = value;\n \n     this.setSize( _width, _height, false );\n \n   };\n \n   this.getSize = function ( target ) {\n \n     return target.set( _width, _height );\n \n   };\n \n   this.setSize = function ( width, height, updateStyle ) {\n \n     if ( xr.isPresenting ) {\n \n       console.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n       return;\n \n     }\n \n     _width = width;\n     _height = height;\n \n     _canvas.width = Math.floor( width * _pixelRatio );\n     _canvas.height = Math.floor( height * _pixelRatio );\n \n     if ( updateStyle !== false ) {\n \n       _canvas.style.width = width + 'px';\n       _canvas.style.height = height + 'px';\n \n     }\n \n     this.setViewport( 0, 0, width, height );\n \n   };\n \n   this.getDrawingBufferSize = function ( target ) {\n \n     return target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n \n   };\n \n   this.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n \n     _width = width;\n     _height = height;\n \n     _pixelRatio = pixelRatio;\n \n     _canvas.width = Math.floor( width * pixelRatio );\n     _canvas.height = Math.floor( height * pixelRatio );\n \n     this.setViewport( 0, 0, width, height );\n \n   };\n \n   this.getCurrentViewport = function ( target ) {\n \n     return target.copy( _currentViewport );\n \n   };\n \n   this.getViewport = function ( target ) {\n \n     return target.copy( _viewport );\n \n   };\n \n   this.setViewport = function ( x, y, width, height ) {\n \n     if ( x.isVector4 ) {\n \n       _viewport.set( x.x, x.y, x.z, x.w );\n \n     } else {\n \n       _viewport.set( x, y, width, height );\n \n     }\n \n     state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n \n   };\n \n   this.getScissor = function ( target ) {\n \n     return target.copy( _scissor );\n \n   };\n \n   this.setScissor = function ( x, y, width, height ) {\n \n     if ( x.isVector4 ) {\n \n       _scissor.set( x.x, x.y, x.z, x.w );\n \n     } else {\n \n       _scissor.set( x, y, width, height );\n \n     }\n \n     state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n \n   };\n \n   this.getScissorTest = function () {\n \n     return _scissorTest;\n \n   };\n \n   this.setScissorTest = function ( boolean ) {\n \n     state.setScissorTest( _scissorTest = boolean );\n \n   };\n \n   this.setOpaqueSort = function ( method ) {\n \n     _opaqueSort = method;\n \n   };\n \n   this.setTransparentSort = function ( method ) {\n \n     _transparentSort = method;\n \n   };\n \n   // Clearing\n \n   this.getClearColor = function ( target ) {\n \n     return target.copy( background.getClearColor() );\n \n   };\n \n   this.setClearColor = function () {\n \n     background.setClearColor.apply( background, arguments );\n \n   };\n \n   this.getClearAlpha = function () {\n \n     return background.getClearAlpha();\n \n   };\n \n   this.setClearAlpha = function () {\n \n     background.setClearAlpha.apply( background, arguments );\n \n   };\n \n   this.clear = function ( color, depth, stencil ) {\n \n     let bits = 0;\n \n     if ( color === undefined || color ) bits |= 16384;\n     if ( depth === undefined || depth ) bits |= 256;\n     if ( stencil === undefined || stencil ) bits |= 1024;\n \n     _gl.clear( bits );\n \n   };\n \n   this.clearColor = function () {\n \n     this.clear( true, false, false );\n \n   };\n \n   this.clearDepth = function () {\n \n     this.clear( false, true, false );\n \n   };\n \n   this.clearStencil = function () {\n \n     this.clear( false, false, true );\n \n   };\n \n   //\n \n   this.dispose = function () {\n \n     _canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n     _canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n \n     renderLists.dispose();\n     renderStates.dispose();\n     properties.dispose();\n     cubemaps.dispose();\n     cubeuvmaps.dispose();\n     objects.dispose();\n     bindingStates.dispose();\n \n     xr.dispose();\n \n     xr.removeEventListener( 'sessionstart', onXRSessionStart );\n     xr.removeEventListener( 'sessionend', onXRSessionEnd );\n \n     if ( _transmissionRenderTarget ) {\n \n       _transmissionRenderTarget.dispose();\n       _transmissionRenderTarget = null;\n \n     }\n \n     animation.stop();\n \n   };\n \n   // Events\n \n   function onContextLost( event ) {\n \n     event.preventDefault();\n \n     console.log( 'THREE.WebGLRenderer: Context Lost.' );\n \n     _isContextLost = true;\n \n   }\n \n   function onContextRestore( /* event */ ) {\n \n     console.log( 'THREE.WebGLRenderer: Context Restored.' );\n \n     _isContextLost = false;\n \n     const infoAutoReset = info.autoReset;\n     const shadowMapEnabled = shadowMap.enabled;\n     const shadowMapAutoUpdate = shadowMap.autoUpdate;\n     const shadowMapNeedsUpdate = shadowMap.needsUpdate;\n     const shadowMapType = shadowMap.type;\n \n     initGLContext();\n \n     info.autoReset = infoAutoReset;\n     shadowMap.enabled = shadowMapEnabled;\n     shadowMap.autoUpdate = shadowMapAutoUpdate;\n     shadowMap.needsUpdate = shadowMapNeedsUpdate;\n     shadowMap.type = shadowMapType;\n \n   }\n \n   function onMaterialDispose( event ) {\n \n     const material = event.target;\n \n     material.removeEventListener( 'dispose', onMaterialDispose );\n \n     deallocateMaterial( material );\n \n   }\n \n   // Buffer deallocation\n \n   function deallocateMaterial( material ) {\n \n     releaseMaterialProgramReferences( material );\n \n     properties.remove( material );\n \n   }\n \n \n   function releaseMaterialProgramReferences( material ) {\n \n     const programs = properties.get( material ).programs;\n \n     if ( programs !== undefined ) {\n \n       programs.forEach( function ( program ) {\n \n         programCache.releaseProgram( program );\n \n       } );\n \n     }\n \n   }\n \n   // Buffer rendering\n \n   this.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {\n \n     if ( scene === null ) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n \n     const frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n \n     const program = setProgram( camera, scene, geometry, material, object );\n \n     state.setMaterial( material, frontFaceCW );\n \n     //\n \n     let index = geometry.index;\n     const position = geometry.attributes.position;\n \n     //\n \n     if ( index === null ) {\n \n       if ( position === undefined || position.count === 0 ) return;\n \n     } else if ( index.count === 0 ) {\n \n       return;\n \n     }\n \n     //\n \n     let rangeFactor = 1;\n \n     if ( material.wireframe === true ) {\n \n       index = geometries.getWireframeAttribute( geometry );\n       rangeFactor = 2;\n \n     }\n \n     bindingStates.setup( object, material, program, geometry, index );\n \n     let attribute;\n     let renderer = bufferRenderer;\n \n     if ( index !== null ) {\n \n       attribute = attributes.get( index );\n \n       renderer = indexedBufferRenderer;\n       renderer.setIndex( attribute );\n \n     }\n \n     //\n \n     const dataCount = ( index !== null ) ? index.count : position.count;\n \n     const rangeStart = geometry.drawRange.start * rangeFactor;\n     const rangeCount = geometry.drawRange.count * rangeFactor;\n \n     const groupStart = group !== null ? group.start * rangeFactor : 0;\n     const groupCount = group !== null ? group.count * rangeFactor : Infinity;\n \n     const drawStart = Math.max( rangeStart, groupStart );\n     const drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n \n     const drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n \n     if ( drawCount === 0 ) return;\n \n     //\n \n     if ( object.isMesh ) {\n \n       if ( material.wireframe === true ) {\n \n         state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n         renderer.setMode( 1 );\n \n       } else {\n \n         renderer.setMode( 4 );\n \n       }\n \n     } else if ( object.isLine ) {\n \n       let lineWidth = material.linewidth;\n \n       if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n \n       state.setLineWidth( lineWidth * getTargetPixelRatio() );\n \n       if ( object.isLineSegments ) {\n \n         renderer.setMode( 1 );\n \n       } else if ( object.isLineLoop ) {\n \n         renderer.setMode( 2 );\n \n       } else {\n \n         renderer.setMode( 3 );\n \n       }\n \n     } else if ( object.isPoints ) {\n \n       renderer.setMode( 0 );\n \n     } else if ( object.isSprite ) {\n \n       renderer.setMode( 4 );\n \n     }\n \n     if ( object.isInstancedMesh ) {\n \n       renderer.renderInstances( drawStart, drawCount, object.count );\n \n     } else if ( geometry.isInstancedBufferGeometry ) {\n \n       const instanceCount = Math.min( geometry.instanceCount, geometry._maxInstanceCount );\n \n       renderer.renderInstances( drawStart, drawCount, instanceCount );\n \n     } else {\n \n       renderer.render( drawStart, drawCount );\n \n     }\n \n   };\n \n   // Compile\n \n   this.compile = function ( scene, camera ) {\n \n     currentRenderState = renderStates.get( scene );\n     currentRenderState.init();\n \n     renderStateStack.push( currentRenderState );\n \n     scene.traverseVisible( function ( object ) {\n \n       if ( object.isLight && object.layers.test( camera.layers ) ) {\n \n         currentRenderState.pushLight( object );\n \n         if ( object.castShadow ) {\n \n           currentRenderState.pushShadow( object );\n \n         }\n \n       }\n \n     } );\n \n     currentRenderState.setupLights( _this.physicallyCorrectLights );\n \n     scene.traverse( function ( object ) {\n \n       const material = object.material;\n \n       if ( material ) {\n \n         if ( Array.isArray( material ) ) {\n \n           for ( let i = 0; i < material.length; i ++ ) {\n \n             const material2 = material[ i ];\n \n             getProgram( material2, scene, object );\n \n           }\n \n         } else {\n \n           getProgram( material, scene, object );\n \n         }\n \n       }\n \n     } );\n \n     renderStateStack.pop();\n     currentRenderState = null;\n \n   };\n \n   // Animation Loop\n \n   let onAnimationFrameCallback = null;\n \n   function onAnimationFrame( time ) {\n \n     if ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\n \n   }\n \n   function onXRSessionStart() {\n \n     animation.stop();\n \n   }\n \n   function onXRSessionEnd() {\n \n     animation.start();\n \n   }\n \n   const animation = new WebGLAnimation();\n   animation.setAnimationLoop( onAnimationFrame );\n \n   if ( typeof window !== 'undefined' ) animation.setContext( window );\n \n   this.setAnimationLoop = function ( callback ) {\n \n     onAnimationFrameCallback = callback;\n     xr.setAnimationLoop( callback );\n \n     ( callback === null ) ? animation.stop() : animation.start();\n \n   };\n \n   xr.addEventListener( 'sessionstart', onXRSessionStart );\n   xr.addEventListener( 'sessionend', onXRSessionEnd );\n \n   // Rendering\n \n   this.render = function ( scene, camera ) {\n \n     if ( camera !== undefined && camera.isCamera !== true ) {\n \n       console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n       return;\n \n     }\n \n     if ( _isContextLost === true ) return;\n \n     // update scene graph\n \n     if ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n \n     // update camera matrices and frustum\n \n     if ( camera.parent === null ) camera.updateMatrixWorld();\n \n     if ( xr.enabled === true && xr.isPresenting === true ) {\n \n       if ( xr.cameraAutoUpdate === true ) xr.updateCamera( camera );\n \n       camera = xr.getCamera(); // use XR camera for rendering\n \n     }\n \n     //\n     if ( scene.isScene === true ) scene.onBeforeRender( _this, scene, camera, _currentRenderTarget );\n \n     currentRenderState = renderStates.get( scene, renderStateStack.length );\n     currentRenderState.init();\n \n     renderStateStack.push( currentRenderState );\n \n     _projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n     _frustum.setFromProjectionMatrix( _projScreenMatrix );\n \n     _localClippingEnabled = this.localClippingEnabled;\n     _clippingEnabled = clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n \n     currentRenderList = renderLists.get( scene, renderListStack.length );\n     currentRenderList.init();\n \n     renderListStack.push( currentRenderList );\n \n     projectObject( scene, camera, 0, _this.sortObjects );\n \n     currentRenderList.finish();\n \n     if ( _this.sortObjects === true ) {\n \n       currentRenderList.sort( _opaqueSort, _transparentSort );\n \n     }\n \n     //\n \n     if ( _clippingEnabled === true ) clipping.beginShadows();\n \n     const shadowsArray = currentRenderState.state.shadowsArray;\n \n     shadowMap.render( shadowsArray, scene, camera );\n \n     if ( _clippingEnabled === true ) clipping.endShadows();\n \n     //\n \n     if ( this.info.autoReset === true ) this.info.reset();\n \n     //\n \n     background.render( currentRenderList, scene );\n \n     // render scene\n \n     currentRenderState.setupLights( _this.physicallyCorrectLights );\n \n     if ( camera.isArrayCamera ) {\n \n       const cameras = camera.cameras;\n \n       for ( let i = 0, l = cameras.length; i < l; i ++ ) {\n \n         const camera2 = cameras[ i ];\n \n         renderScene( currentRenderList, scene, camera2, camera2.viewport );\n \n       }\n \n     } else {\n \n       renderScene( currentRenderList, scene, camera );\n \n     }\n \n     //\n \n     if ( _currentRenderTarget !== null ) {\n \n       // resolve multisample renderbuffers to a single-sample texture if necessary\n \n       textures.updateMultisampleRenderTarget( _currentRenderTarget );\n \n       // Generate mipmap if we're using any kind of mipmap filtering\n \n       textures.updateRenderTargetMipmap( _currentRenderTarget );\n \n     }\n \n     //\n \n     if ( scene.isScene === true ) scene.onAfterRender( _this, scene, camera );\n \n     // Ensure depth buffer writing is enabled so it can be cleared on next render\n \n     state.buffers.depth.setTest( true );\n     state.buffers.depth.setMask( true );\n     state.buffers.color.setMask( true );\n \n     state.setPolygonOffset( false );\n \n     // _gl.finish();\n \n     bindingStates.resetDefaultState();\n     _currentMaterialId = - 1;\n     _currentCamera = null;\n \n     renderStateStack.pop();\n \n     if ( renderStateStack.length > 0 ) {\n \n       currentRenderState = renderStateStack[ renderStateStack.length - 1 ];\n \n     } else {\n \n       currentRenderState = null;\n \n     }\n \n     renderListStack.pop();\n \n     if ( renderListStack.length > 0 ) {\n \n       currentRenderList = renderListStack[ renderListStack.length - 1 ];\n \n     } else {\n \n       currentRenderList = null;\n \n     }\n \n   };\n \n   function projectObject( object, camera, groupOrder, sortObjects ) {\n \n     if ( object.visible === false ) return;\n \n     const visible = object.layers.test( camera.layers );\n \n     if ( visible ) {\n \n       if ( object.isGroup ) {\n \n         groupOrder = object.renderOrder;\n \n       } else if ( object.isLOD ) {\n \n         if ( object.autoUpdate === true ) object.update( camera );\n \n       } else if ( object.isLight ) {\n \n         currentRenderState.pushLight( object );\n \n         if ( object.castShadow ) {\n \n           currentRenderState.pushShadow( object );\n \n         }\n \n       } else if ( object.isSprite ) {\n \n         if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n \n           if ( sortObjects ) {\n \n             _vector3.setFromMatrixPosition( object.matrixWorld )\n               .applyMatrix4( _projScreenMatrix );\n \n           }\n \n           const geometry = objects.update( object );\n           const material = object.material;\n \n           if ( material.visible ) {\n \n             currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n \n           }\n \n         }\n \n       } else if ( object.isMesh || object.isLine || object.isPoints ) {\n \n         if ( object.isSkinnedMesh ) {\n \n           // update skeleton only once in a frame\n \n           if ( object.skeleton.frame !== info.render.frame ) {\n \n             object.skeleton.update();\n             object.skeleton.frame = info.render.frame;\n \n           }\n \n         }\n \n         if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n \n           if ( sortObjects ) {\n \n             _vector3.setFromMatrixPosition( object.matrixWorld )\n               .applyMatrix4( _projScreenMatrix );\n \n           }\n \n           const geometry = objects.update( object );\n           const material = object.material;\n \n           if ( Array.isArray( material ) ) {\n \n             const groups = geometry.groups;\n \n             for ( let i = 0, l = groups.length; i < l; i ++ ) {\n \n               const group = groups[ i ];\n               const groupMaterial = material[ group.materialIndex ];\n \n               if ( groupMaterial && groupMaterial.visible ) {\n \n                 currentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\n \n               }\n \n             }\n \n           } else if ( material.visible ) {\n \n             currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n \n           }\n \n         }\n \n       }\n \n     }\n \n     const children = object.children;\n \n     for ( let i = 0, l = children.length; i < l; i ++ ) {\n \n       projectObject( children[ i ], camera, groupOrder, sortObjects );\n \n     }\n \n   }\n \n   function renderScene( currentRenderList, scene, camera, viewport ) {\n \n     const opaqueObjects = currentRenderList.opaque;\n     const transmissiveObjects = currentRenderList.transmissive;\n     const transparentObjects = currentRenderList.transparent;\n \n     currentRenderState.setupLightsView( camera );\n \n     if ( transmissiveObjects.length > 0 ) renderTransmissionPass( opaqueObjects, scene, camera );\n \n     if ( viewport ) state.viewport( _currentViewport.copy( viewport ) );\n \n     if ( opaqueObjects.length > 0 ) renderObjects( opaqueObjects, scene, camera );\n     if ( transmissiveObjects.length > 0 ) renderObjects( transmissiveObjects, scene, camera );\n     if ( transparentObjects.length > 0 ) renderObjects( transparentObjects, scene, camera );\n \n   }\n \n   function renderTransmissionPass( opaqueObjects, scene, camera ) {\n \n     if ( _transmissionRenderTarget === null ) {\n \n       const needsAntialias = _antialias === true && capabilities.isWebGL2 === true;\n       const renderTargetType = needsAntialias ? WebGLMultisampleRenderTarget : WebGLRenderTarget;\n \n       _transmissionRenderTarget = new renderTargetType( 1024, 1024, {\n         generateMipmaps: true,\n         type: utils.convert( HalfFloatType ) !== null ? HalfFloatType : UnsignedByteType,\n         minFilter: LinearMipmapLinearFilter,\n         magFilter: NearestFilter,\n         wrapS: ClampToEdgeWrapping,\n         wrapT: ClampToEdgeWrapping,\n         useRenderToTexture: extensions.has( 'WEBGL_multisampled_render_to_texture' )\n       } );\n \n     }\n \n     const currentRenderTarget = _this.getRenderTarget();\n     _this.setRenderTarget( _transmissionRenderTarget );\n     _this.clear();\n \n     // Turn off the features which can affect the frag color for opaque objects pass.\n     // Otherwise they are applied twice in opaque objects pass and transmission objects pass.\n     const currentToneMapping = _this.toneMapping;\n     _this.toneMapping = NoToneMapping;\n \n     renderObjects( opaqueObjects, scene, camera );\n \n     _this.toneMapping = currentToneMapping;\n \n     textures.updateMultisampleRenderTarget( _transmissionRenderTarget );\n     textures.updateRenderTargetMipmap( _transmissionRenderTarget );\n \n     _this.setRenderTarget( currentRenderTarget );\n \n   }\n \n   function renderObjects( renderList, scene, camera ) {\n \n     const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n \n     for ( let i = 0, l = renderList.length; i < l; i ++ ) {\n \n       const renderItem = renderList[ i ];\n \n       const object = renderItem.object;\n       const geometry = renderItem.geometry;\n       const material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n       const group = renderItem.group;\n \n       if ( object.layers.test( camera.layers ) ) {\n \n         renderObject( object, scene, camera, geometry, material, group );\n \n       }\n \n     }\n \n   }\n \n   function renderObject( object, scene, camera, geometry, material, group ) {\n \n     object.onBeforeRender( _this, scene, camera, geometry, material, group );\n \n     object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n     object.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n \n     material.onBeforeRender( _this, scene, camera, geometry, object, group );\n \n     if ( material.transparent === true && material.side === DoubleSide ) {\n \n       material.side = BackSide;\n       material.needsUpdate = true;\n       _this.renderBufferDirect( camera, scene, geometry, material, object, group );\n \n       material.side = FrontSide;\n       material.needsUpdate = true;\n       _this.renderBufferDirect( camera, scene, geometry, material, object, group );\n \n       material.side = DoubleSide;\n \n     } else {\n \n       _this.renderBufferDirect( camera, scene, geometry, material, object, group );\n \n     }\n \n     object.onAfterRender( _this, scene, camera, geometry, material, group );\n \n   }\n \n   function getProgram( material, scene, object ) {\n \n     if ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n \n     const materialProperties = properties.get( material );\n \n     const lights = currentRenderState.state.lights;\n     const shadowsArray = currentRenderState.state.shadowsArray;\n \n     const lightsStateVersion = lights.state.version;\n \n     const parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, object );\n     const programCacheKey = programCache.getProgramCacheKey( parameters );\n \n     let programs = materialProperties.programs;\n \n     // always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change\n \n     materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n     materialProperties.fog = scene.fog;\n     materialProperties.envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || materialProperties.environment );\n \n     if ( programs === undefined ) {\n \n       // new material\n \n       material.addEventListener( 'dispose', onMaterialDispose );\n \n       programs = new Map();\n       materialProperties.programs = programs;\n \n     }\n \n     let program = programs.get( programCacheKey );\n \n     if ( program !== undefined ) {\n \n       // early out if program and light state is identical\n \n       if ( materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion ) {\n \n         updateCommonMaterialProperties( material, parameters );\n \n         return program;\n \n       }\n \n     } else {\n \n       parameters.uniforms = programCache.getUniforms( material );\n \n       material.onBuild( object, parameters, _this );\n \n       material.onBeforeCompile( parameters, _this );\n \n       program = programCache.acquireProgram( parameters, programCacheKey );\n       programs.set( programCacheKey, program );\n \n       materialProperties.uniforms = parameters.uniforms;\n \n     }\n \n     const uniforms = materialProperties.uniforms;\n \n     if ( ( ! material.isShaderMaterial && ! material.isRawShaderMaterial ) || material.clipping === true ) {\n \n       uniforms.clippingPlanes = clipping.uniform;\n \n     }\n \n     updateCommonMaterialProperties( material, parameters );\n \n     // store the light setup it was created for\n \n     materialProperties.needsLights = materialNeedsLights( material );\n     materialProperties.lightsStateVersion = lightsStateVersion;\n \n     if ( materialProperties.needsLights ) {\n \n       // wire up the material to this renderer's lighting state\n \n       uniforms.ambientLightColor.value = lights.state.ambient;\n       uniforms.lightProbe.value = lights.state.probe;\n       uniforms.directionalLights.value = lights.state.directional;\n       uniforms.directionalLightShadows.value = lights.state.directionalShadow;\n       uniforms.spotLights.value = lights.state.spot;\n       uniforms.spotLightShadows.value = lights.state.spotShadow;\n       uniforms.rectAreaLights.value = lights.state.rectArea;\n       uniforms.ltc_1.value = lights.state.rectAreaLTC1;\n       uniforms.ltc_2.value = lights.state.rectAreaLTC2;\n       uniforms.pointLights.value = lights.state.point;\n       uniforms.pointLightShadows.value = lights.state.pointShadow;\n       uniforms.hemisphereLights.value = lights.state.hemi;\n \n       uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n       uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n       uniforms.spotShadowMap.value = lights.state.spotShadowMap;\n       uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n       uniforms.pointShadowMap.value = lights.state.pointShadowMap;\n       uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n       // TODO (abelnation): add area lights shadow info to uniforms\n \n     }\n \n     const progUniforms = program.getUniforms();\n     const uniformsList = WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n \n     materialProperties.currentProgram = program;\n     materialProperties.uniformsList = uniformsList;\n \n     return program;\n \n   }\n \n   function updateCommonMaterialProperties( material, parameters ) {\n \n     const materialProperties = properties.get( material );\n \n     materialProperties.outputEncoding = parameters.outputEncoding;\n     materialProperties.instancing = parameters.instancing;\n     materialProperties.skinning = parameters.skinning;\n     materialProperties.morphTargets = parameters.morphTargets;\n     materialProperties.morphNormals = parameters.morphNormals;\n     materialProperties.morphTargetsCount = parameters.morphTargetsCount;\n     materialProperties.numClippingPlanes = parameters.numClippingPlanes;\n     materialProperties.numIntersection = parameters.numClipIntersection;\n     materialProperties.vertexAlphas = parameters.vertexAlphas;\n     materialProperties.vertexTangents = parameters.vertexTangents;\n \n   }\n \n   function setProgram( camera, scene, geometry, material, object ) {\n \n     if ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n \n     textures.resetTextureUnits();\n \n     const fog = scene.fog;\n     const environment = material.isMeshStandardMaterial ? scene.environment : null;\n     const encoding = ( _currentRenderTarget === null ) ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n     const envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\n     const vertexAlphas = material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4;\n     const vertexTangents = !! material.normalMap && !! geometry.attributes.tangent;\n     const morphTargets = !! geometry.morphAttributes.position;\n     const morphNormals = !! geometry.morphAttributes.normal;\n     const morphTargetsCount = !! geometry.morphAttributes.position ? geometry.morphAttributes.position.length : 0;\n \n     const materialProperties = properties.get( material );\n     const lights = currentRenderState.state.lights;\n \n     if ( _clippingEnabled === true ) {\n \n       if ( _localClippingEnabled === true || camera !== _currentCamera ) {\n \n         const useCache =\n           camera === _currentCamera &&\n           material.id === _currentMaterialId;\n \n         // we might want to call this function with some ClippingGroup\n         // object instead of the material, once it becomes feasible\n         // (#8465, #8379)\n         clipping.setState( material, camera, useCache );\n \n       }\n \n     }\n \n     //\n \n     let needsProgramChange = false;\n \n     if ( material.version === materialProperties.__version ) {\n \n       if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n \n         needsProgramChange = true;\n \n       } else if ( materialProperties.outputEncoding !== encoding ) {\n \n         needsProgramChange = true;\n \n       } else if ( object.isInstancedMesh && materialProperties.instancing === false ) {\n \n         needsProgramChange = true;\n \n       } else if ( ! object.isInstancedMesh && materialProperties.instancing === true ) {\n \n         needsProgramChange = true;\n \n       } else if ( object.isSkinnedMesh && materialProperties.skinning === false ) {\n \n         needsProgramChange = true;\n \n       } else if ( ! object.isSkinnedMesh && materialProperties.skinning === true ) {\n \n         needsProgramChange = true;\n \n       } else if ( materialProperties.envMap !== envMap ) {\n \n         needsProgramChange = true;\n \n       } else if ( material.fog && materialProperties.fog !== fog ) {\n \n         needsProgramChange = true;\n \n       } else if ( materialProperties.numClippingPlanes !== undefined &&\n         ( materialProperties.numClippingPlanes !== clipping.numPlanes ||\n         materialProperties.numIntersection !== clipping.numIntersection ) ) {\n \n         needsProgramChange = true;\n \n       } else if ( materialProperties.vertexAlphas !== vertexAlphas ) {\n \n         needsProgramChange = true;\n \n       } else if ( materialProperties.vertexTangents !== vertexTangents ) {\n \n         needsProgramChange = true;\n \n       } else if ( materialProperties.morphTargets !== morphTargets ) {\n \n         needsProgramChange = true;\n \n       } else if ( materialProperties.morphNormals !== morphNormals ) {\n \n         needsProgramChange = true;\n \n       } else if ( capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount ) {\n \n         needsProgramChange = true;\n \n       }\n \n     } else {\n \n       needsProgramChange = true;\n       materialProperties.__version = material.version;\n \n     }\n \n     //\n \n     let program = materialProperties.currentProgram;\n \n     if ( needsProgramChange === true ) {\n \n       program = getProgram( material, scene, object );\n \n     }\n \n     let refreshProgram = false;\n     let refreshMaterial = false;\n     let refreshLights = false;\n \n     const p_uniforms = program.getUniforms(),\n       m_uniforms = materialProperties.uniforms;\n \n     if ( state.useProgram( program.program ) ) {\n \n       refreshProgram = true;\n       refreshMaterial = true;\n       refreshLights = true;\n \n     }\n \n     if ( material.id !== _currentMaterialId ) {\n \n       _currentMaterialId = material.id;\n \n       refreshMaterial = true;\n \n     }\n \n     if ( refreshProgram || _currentCamera !== camera ) {\n \n       p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n \n       if ( capabilities.logarithmicDepthBuffer ) {\n \n         p_uniforms.setValue( _gl, 'logDepthBufFC',\n           2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n \n       }\n \n       if ( _currentCamera !== camera ) {\n \n         _currentCamera = camera;\n \n         // lighting uniforms depend on the camera so enforce an update\n         // now, in case this material supports lights - or later, when\n         // the next material that does gets activated:\n \n         refreshMaterial = true;\t\t// set to true on material change\n         refreshLights = true;\t\t// remains set until update done\n \n       }\n \n       // load material specific uniforms\n       // (shader material also gets them for the sake of genericity)\n \n       if ( material.isShaderMaterial ||\n         material.isMeshPhongMaterial ||\n         material.isMeshToonMaterial ||\n         material.isMeshStandardMaterial ||\n         material.envMap ) {\n \n         const uCamPos = p_uniforms.map.cameraPosition;\n \n         if ( uCamPos !== undefined ) {\n \n           uCamPos.setValue( _gl,\n             _vector3.setFromMatrixPosition( camera.matrixWorld ) );\n \n         }\n \n       }\n \n       if ( material.isMeshPhongMaterial ||\n         material.isMeshToonMaterial ||\n         material.isMeshLambertMaterial ||\n         material.isMeshBasicMaterial ||\n         material.isMeshStandardMaterial ||\n         material.isShaderMaterial ) {\n \n         p_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\n \n       }\n \n       if ( material.isMeshPhongMaterial ||\n         material.isMeshToonMaterial ||\n         material.isMeshLambertMaterial ||\n         material.isMeshBasicMaterial ||\n         material.isMeshStandardMaterial ||\n         material.isShaderMaterial ||\n         material.isShadowMaterial ||\n         object.isSkinnedMesh ) {\n \n         p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n \n       }\n \n     }\n \n     // skinning and morph target uniforms must be set even if material didn't change\n     // auto-setting of texture unit for bone and morph texture must go before other textures\n     // otherwise textures used for skinning and morphing can take over texture units reserved for other material textures\n \n     if ( object.isSkinnedMesh ) {\n \n       p_uniforms.setOptional( _gl, object, 'bindMatrix' );\n       p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n \n       const skeleton = object.skeleton;\n \n       if ( skeleton ) {\n \n         if ( capabilities.floatVertexTextures ) {\n \n           if ( skeleton.boneTexture === null ) skeleton.computeBoneTexture();\n \n           p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n           p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n \n         } else {\n \n           p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n \n         }\n \n       }\n \n     }\n \n     if ( !! geometry && ( geometry.morphAttributes.position !== undefined || geometry.morphAttributes.normal !== undefined ) ) {\n \n       morphtargets.update( object, geometry, material, program );\n \n     }\n \n \n     if ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n \n       materialProperties.receiveShadow = object.receiveShadow;\n       p_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n \n     }\n \n     if ( refreshMaterial ) {\n \n       p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n \n       if ( materialProperties.needsLights ) {\n \n         // the current material requires lighting info\n \n         // note: all lighting uniforms are always set correctly\n         // they simply reference the renderer's state for their\n         // values\n         //\n         // use the current material's .needsUpdate flags to set\n         // the GL state when required\n \n         markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n \n       }\n \n       // refresh uniforms common to several materials\n \n       if ( fog && material.fog ) {\n \n         materials.refreshFogUniforms( m_uniforms, fog );\n \n       }\n \n       materials.refreshMaterialUniforms( m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget );\n \n       WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n \n     }\n \n     if ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n \n       WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n       material.uniformsNeedUpdate = false;\n \n     }\n \n     if ( material.isSpriteMaterial ) {\n \n       p_uniforms.setValue( _gl, 'center', object.center );\n \n     }\n \n     // common matrices\n \n     p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n     p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n     p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n \n     return program;\n \n   }\n \n   // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n \n   function markUniformsLightsNeedsUpdate( uniforms, value ) {\n \n     uniforms.ambientLightColor.needsUpdate = value;\n     uniforms.lightProbe.needsUpdate = value;\n \n     uniforms.directionalLights.needsUpdate = value;\n     uniforms.directionalLightShadows.needsUpdate = value;\n     uniforms.pointLights.needsUpdate = value;\n     uniforms.pointLightShadows.needsUpdate = value;\n     uniforms.spotLights.needsUpdate = value;\n     uniforms.spotLightShadows.needsUpdate = value;\n     uniforms.rectAreaLights.needsUpdate = value;\n     uniforms.hemisphereLights.needsUpdate = value;\n \n   }\n \n   function materialNeedsLights( material ) {\n \n     return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||\n       material.isMeshStandardMaterial || material.isShadowMaterial ||\n       ( material.isShaderMaterial && material.lights === true );\n \n   }\n \n   this.getActiveCubeFace = function () {\n \n     return _currentActiveCubeFace;\n \n   };\n \n   this.getActiveMipmapLevel = function () {\n \n     return _currentActiveMipmapLevel;\n \n   };\n \n   this.getRenderTarget = function () {\n \n     return _currentRenderTarget;\n \n   };\n \n   this.setRenderTargetTextures = function ( renderTarget, colorTexture, depthTexture ) {\n \n     properties.get( renderTarget.texture ).__webglTexture = colorTexture;\n     properties.get( renderTarget.depthTexture ).__webglTexture = depthTexture;\n \n     const renderTargetProperties = properties.get( renderTarget );\n     renderTargetProperties.__hasExternalTextures = true;\n \n     if ( renderTargetProperties.__hasExternalTextures ) {\n \n       renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;\n \n       if ( ! renderTargetProperties.__autoAllocateDepthBuffer ) {\n \n         // The multisample_render_to_texture extension doesn't work properly if there\n         // are midframe flushes and an external depth buffer. Disable use of the extension.\n         if ( renderTarget.useRenderToTexture ) {\n \n           console.warn( 'render-to-texture extension was disabled because an external texture was provided' );\n           renderTarget.useRenderToTexture = false;\n           renderTarget.useRenderbuffer = true;\n \n         }\n \n       }\n \n     }\n \n   };\n \n   this.setRenderTargetFramebuffer = function ( renderTarget, defaultFramebuffer ) {\n \n     const renderTargetProperties = properties.get( renderTarget );\n     renderTargetProperties.__webglFramebuffer = defaultFramebuffer;\n     renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;\n \n   };\n \n   this.setRenderTarget = function ( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {\n \n     _currentRenderTarget = renderTarget;\n     _currentActiveCubeFace = activeCubeFace;\n     _currentActiveMipmapLevel = activeMipmapLevel;\n     let useDefaultFramebuffer = true;\n \n     if ( renderTarget ) {\n \n       const renderTargetProperties = properties.get( renderTarget );\n \n       if ( renderTargetProperties.__useDefaultFramebuffer !== undefined ) {\n \n         // We need to make sure to rebind the framebuffer.\n         state.bindFramebuffer( 36160, null );\n         useDefaultFramebuffer = false;\n \n       } else if ( renderTargetProperties.__webglFramebuffer === undefined ) {\n \n         textures.setupRenderTarget( renderTarget );\n \n       } else if ( renderTargetProperties.__hasExternalTextures ) {\n \n         // Color and depth texture must be rebound in order for the swapchain to update.\n         textures.rebindTextures( renderTarget, properties.get( renderTarget.texture ).__webglTexture, properties.get( renderTarget.depthTexture ).__webglTexture );\n \n       }\n \n     }\n \n     let framebuffer = null;\n     let isCube = false;\n     let isRenderTarget3D = false;\n \n     if ( renderTarget ) {\n \n       const texture = renderTarget.texture;\n \n       if ( texture.isDataTexture3D || texture.isDataTexture2DArray ) {\n \n         isRenderTarget3D = true;\n \n       }\n \n       const __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n \n       if ( renderTarget.isWebGLCubeRenderTarget ) {\n \n         framebuffer = __webglFramebuffer[ activeCubeFace ];\n         isCube = true;\n \n       } else if ( renderTarget.useRenderbuffer ) {\n \n         framebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n \n       } else {\n \n         framebuffer = __webglFramebuffer;\n \n       }\n \n       _currentViewport.copy( renderTarget.viewport );\n       _currentScissor.copy( renderTarget.scissor );\n       _currentScissorTest = renderTarget.scissorTest;\n \n     } else {\n \n       _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n       _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n       _currentScissorTest = _scissorTest;\n \n     }\n \n     const framebufferBound = state.bindFramebuffer( 36160, framebuffer );\n \n     if ( framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer ) {\n \n       let needsUpdate = false;\n \n       if ( renderTarget ) {\n \n         if ( renderTarget.isWebGLMultipleRenderTargets ) {\n \n           const textures = renderTarget.texture;\n \n           if ( _currentDrawBuffers.length !== textures.length || _currentDrawBuffers[ 0 ] !== 36064 ) {\n \n             for ( let i = 0, il = textures.length; i < il; i ++ ) {\n \n               _currentDrawBuffers[ i ] = 36064 + i;\n \n             }\n \n             _currentDrawBuffers.length = textures.length;\n \n             needsUpdate = true;\n \n           }\n \n         } else {\n \n           if ( _currentDrawBuffers.length !== 1 || _currentDrawBuffers[ 0 ] !== 36064 ) {\n \n             _currentDrawBuffers[ 0 ] = 36064;\n             _currentDrawBuffers.length = 1;\n \n             needsUpdate = true;\n \n           }\n \n         }\n \n       } else {\n \n         if ( _currentDrawBuffers.length !== 1 || _currentDrawBuffers[ 0 ] !== 1029 ) {\n \n           _currentDrawBuffers[ 0 ] = 1029;\n           _currentDrawBuffers.length = 1;\n \n           needsUpdate = true;\n \n         }\n \n       }\n \n       if ( needsUpdate ) {\n \n         if ( capabilities.isWebGL2 ) {\n \n           _gl.drawBuffers( _currentDrawBuffers );\n \n         } else {\n \n           extensions.get( 'WEBGL_draw_buffers' ).drawBuffersWEBGL( _currentDrawBuffers );\n \n         }\n \n       }\n \n     }\n \n     state.viewport( _currentViewport );\n     state.scissor( _currentScissor );\n     state.setScissorTest( _currentScissorTest );\n \n     if ( isCube ) {\n \n       const textureProperties = properties.get( renderTarget.texture );\n       _gl.framebufferTexture2D( 36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel );\n \n     } else if ( isRenderTarget3D ) {\n \n       const textureProperties = properties.get( renderTarget.texture );\n       const layer = activeCubeFace || 0;\n       _gl.framebufferTextureLayer( 36160, 36064, textureProperties.__webglTexture, activeMipmapLevel || 0, layer );\n \n     }\n \n     _currentMaterialId = - 1; // reset current material to ensure correct uniform bindings\n \n   };\n \n   this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n \n     if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n \n       console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n       return;\n \n     }\n \n     let framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n \n     if ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\n \n       framebuffer = framebuffer[ activeCubeFaceIndex ];\n \n     }\n \n     if ( framebuffer ) {\n \n       state.bindFramebuffer( 36160, framebuffer );\n \n       try {\n \n         const texture = renderTarget.texture;\n         const textureFormat = texture.format;\n         const textureType = texture.type;\n \n         if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {\n \n           console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n           return;\n \n         }\n \n         const halfFloatSupportedByExt = ( textureType === HalfFloatType ) && ( extensions.has( 'EXT_color_buffer_half_float' ) || ( capabilities.isWebGL2 && extensions.has( 'EXT_color_buffer_float' ) ) );\n \n         if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // Edge and Chrome Mac < 52 (#9513)\n           ! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.has( 'OES_texture_float' ) || extensions.has( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n           ! halfFloatSupportedByExt ) {\n \n           console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n           return;\n \n         }\n \n         if ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {\n \n           // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n \n           if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n \n             _gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n \n           }\n \n         } else {\n \n           console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n \n         }\n \n       } finally {\n \n         // restore framebuffer of current render target if necessary\n \n         const framebuffer = ( _currentRenderTarget !== null ) ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;\n         state.bindFramebuffer( 36160, framebuffer );\n \n       }\n \n     }\n \n   };\n \n   this.copyFramebufferToTexture = function ( position, texture, level = 0 ) {\n \n     const levelScale = Math.pow( 2, - level );\n     const width = Math.floor( texture.image.width * levelScale );\n     const height = Math.floor( texture.image.height * levelScale );\n \n     let glFormat = utils.convert( texture.format );\n \n     if ( capabilities.isWebGL2 ) {\n \n       // Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1120100\n       // Not needed in Chrome 93+\n \n       if ( glFormat === 6407 ) glFormat = 32849;\n       if ( glFormat === 6408 ) glFormat = 32856;\n \n     }\n \n     textures.setTexture2D( texture, 0 );\n \n     _gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );\n \n     state.unbindTexture();\n \n   };\n \n   this.copyTextureToTexture = function ( position, srcTexture, dstTexture, level = 0 ) {\n \n     const width = srcTexture.image.width;\n     const height = srcTexture.image.height;\n     const glFormat = utils.convert( dstTexture.format );\n     const glType = utils.convert( dstTexture.type );\n \n     textures.setTexture2D( dstTexture, 0 );\n \n     // As another texture upload may have changed pixelStorei\n     // parameters, make sure they are correct for the dstTexture\n     _gl.pixelStorei( 37440, dstTexture.flipY );\n     _gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );\n     _gl.pixelStorei( 3317, dstTexture.unpackAlignment );\n \n     if ( srcTexture.isDataTexture ) {\n \n       _gl.texSubImage2D( 3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n \n     } else {\n \n       if ( srcTexture.isCompressedTexture ) {\n \n         _gl.compressedTexSubImage2D( 3553, level, position.x, position.y, srcTexture.mipmaps[ 0 ].width, srcTexture.mipmaps[ 0 ].height, glFormat, srcTexture.mipmaps[ 0 ].data );\n \n       } else {\n \n         _gl.texSubImage2D( 3553, level, position.x, position.y, glFormat, glType, srcTexture.image );\n \n       }\n \n     }\n \n     // Generate mipmaps only when copying level 0\n     if ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( 3553 );\n \n     state.unbindTexture();\n \n   };\n \n   this.copyTextureToTexture3D = function ( sourceBox, position, srcTexture, dstTexture, level = 0 ) {\n \n     if ( _this.isWebGL1Renderer ) {\n \n       console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.' );\n       return;\n \n     }\n \n     const width = sourceBox.max.x - sourceBox.min.x + 1;\n     const height = sourceBox.max.y - sourceBox.min.y + 1;\n     const depth = sourceBox.max.z - sourceBox.min.z + 1;\n     const glFormat = utils.convert( dstTexture.format );\n     const glType = utils.convert( dstTexture.type );\n     let glTarget;\n \n     if ( dstTexture.isDataTexture3D ) {\n \n       textures.setTexture3D( dstTexture, 0 );\n       glTarget = 32879;\n \n     } else if ( dstTexture.isDataTexture2DArray ) {\n \n       textures.setTexture2DArray( dstTexture, 0 );\n       glTarget = 35866;\n \n     } else {\n \n       console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.' );\n       return;\n \n     }\n \n     _gl.pixelStorei( 37440, dstTexture.flipY );\n     _gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );\n     _gl.pixelStorei( 3317, dstTexture.unpackAlignment );\n \n     const unpackRowLen = _gl.getParameter( 3314 );\n     const unpackImageHeight = _gl.getParameter( 32878 );\n     const unpackSkipPixels = _gl.getParameter( 3316 );\n     const unpackSkipRows = _gl.getParameter( 3315 );\n     const unpackSkipImages = _gl.getParameter( 32877 );\n \n     const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ 0 ] : srcTexture.image;\n \n     _gl.pixelStorei( 3314, image.width );\n     _gl.pixelStorei( 32878, image.height );\n     _gl.pixelStorei( 3316, sourceBox.min.x );\n     _gl.pixelStorei( 3315, sourceBox.min.y );\n     _gl.pixelStorei( 32877, sourceBox.min.z );\n \n     if ( srcTexture.isDataTexture || srcTexture.isDataTexture3D ) {\n \n       _gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data );\n \n     } else {\n \n       if ( srcTexture.isCompressedTexture ) {\n \n         console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.' );\n         _gl.compressedTexSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data );\n \n       } else {\n \n         _gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image );\n \n       }\n \n     }\n \n     _gl.pixelStorei( 3314, unpackRowLen );\n     _gl.pixelStorei( 32878, unpackImageHeight );\n     _gl.pixelStorei( 3316, unpackSkipPixels );\n     _gl.pixelStorei( 3315, unpackSkipRows );\n     _gl.pixelStorei( 32877, unpackSkipImages );\n \n     // Generate mipmaps only when copying level 0\n     if ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( glTarget );\n \n     state.unbindTexture();\n \n   };\n \n   this.initTexture = function ( texture ) {\n \n     textures.setTexture2D( texture, 0 );\n \n     state.unbindTexture();\n \n   };\n \n   this.resetState = function () {\n \n     _currentActiveCubeFace = 0;\n     _currentActiveMipmapLevel = 0;\n     _currentRenderTarget = null;\n \n     state.reset();\n     bindingStates.reset();\n \n   };\n \n   if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n \n     __THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n \n   }\n \n }\n \n WebGLRenderer.prototype.isWebGLRenderer = true;\n \n class WebGL1Renderer extends WebGLRenderer {}\n \n WebGL1Renderer.prototype.isWebGL1Renderer = true;\n \n class FogExp2 {\n \n   constructor( color, density = 0.00025 ) {\n \n     this.name = '';\n \n     this.color = new Color( color );\n     this.density = density;\n \n   }\n \n   clone() {\n \n     return new FogExp2( this.color, this.density );\n \n   }\n \n   toJSON( /* meta */ ) {\n \n     return {\n       type: 'FogExp2',\n       color: this.color.getHex(),\n       density: this.density\n     };\n \n   }\n \n }\n \n FogExp2.prototype.isFogExp2 = true;\n \n class Fog {\n \n   constructor( color, near = 1, far = 1000 ) {\n \n     this.name = '';\n \n     this.color = new Color( color );\n \n     this.near = near;\n     this.far = far;\n \n   }\n \n   clone() {\n \n     return new Fog( this.color, this.near, this.far );\n \n   }\n \n   toJSON( /* meta */ ) {\n \n     return {\n       type: 'Fog',\n       color: this.color.getHex(),\n       near: this.near,\n       far: this.far\n     };\n \n   }\n \n }\n \n Fog.prototype.isFog = true;\n \n class Scene extends Object3D {\n \n   constructor() {\n \n     super();\n \n     this.type = 'Scene';\n \n     this.background = null;\n     this.environment = null;\n     this.fog = null;\n \n     this.overrideMaterial = null;\n \n     this.autoUpdate = true; // checked by the renderer\n \n     if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n \n       __THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n \n     }\n \n   }\n \n   copy( source, recursive ) {\n \n     super.copy( source, recursive );\n \n     if ( source.background !== null ) this.background = source.background.clone();\n     if ( source.environment !== null ) this.environment = source.environment.clone();\n     if ( source.fog !== null ) this.fog = source.fog.clone();\n \n     if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n \n     this.autoUpdate = source.autoUpdate;\n     this.matrixAutoUpdate = source.matrixAutoUpdate;\n \n     return this;\n \n   }\n \n   toJSON( meta ) {\n \n     const data = super.toJSON( meta );\n \n     if ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n \n     return data;\n \n   }\n \n }\n \n Scene.prototype.isScene = true;\n \n class InterleavedBuffer {\n \n   constructor( array, stride ) {\n \n     this.array = array;\n     this.stride = stride;\n     this.count = array !== undefined ? array.length / stride : 0;\n \n     this.usage = StaticDrawUsage;\n     this.updateRange = { offset: 0, count: - 1 };\n \n     this.version = 0;\n \n     this.uuid = generateUUID();\n \n   }\n \n   onUploadCallback() {}\n \n   set needsUpdate( value ) {\n \n     if ( value === true ) this.version ++;\n \n   }\n \n   setUsage( value ) {\n \n     this.usage = value;\n \n     return this;\n \n   }\n \n   copy( source ) {\n \n     this.array = new source.array.constructor( source.array );\n     this.count = source.count;\n     this.stride = source.stride;\n     this.usage = source.usage;\n \n     return this;\n \n   }\n \n   copyAt( index1, attribute, index2 ) {\n \n     index1 *= this.stride;\n     index2 *= attribute.stride;\n \n     for ( let i = 0, l = this.stride; i < l; i ++ ) {\n \n       this.array[ index1 + i ] = attribute.array[ index2 + i ];\n \n     }\n \n     return this;\n \n   }\n \n   set( value, offset = 0 ) {\n \n     this.array.set( value, offset );\n \n     return this;\n \n   }\n \n   clone( data ) {\n \n     if ( data.arrayBuffers === undefined ) {\n \n       data.arrayBuffers = {};\n \n     }\n \n     if ( this.array.buffer._uuid === undefined ) {\n \n       this.array.buffer._uuid = generateUUID();\n \n     }\n \n     if ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n \n       data.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;\n \n     }\n \n     const array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );\n \n     const ib = new this.constructor( array, this.stride );\n     ib.setUsage( this.usage );\n \n     return ib;\n \n   }\n \n   onUpload( callback ) {\n \n     this.onUploadCallback = callback;\n \n     return this;\n \n   }\n \n   toJSON( data ) {\n \n     if ( data.arrayBuffers === undefined ) {\n \n       data.arrayBuffers = {};\n \n     }\n \n     // generate UUID for array buffer if necessary\n \n     if ( this.array.buffer._uuid === undefined ) {\n \n       this.array.buffer._uuid = generateUUID();\n \n     }\n \n     if ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n \n       data.arrayBuffers[ this.array.buffer._uuid ] = Array.prototype.slice.call( new Uint32Array( this.array.buffer ) );\n \n     }\n \n     //\n \n     return {\n       uuid: this.uuid,\n       buffer: this.array.buffer._uuid,\n       type: this.array.constructor.name,\n       stride: this.stride\n     };\n \n   }\n \n }\n \n InterleavedBuffer.prototype.isInterleavedBuffer = true;\n \n const _vector$6 = /*@__PURE__*/ new Vector3();\n \n class InterleavedBufferAttribute {\n \n   constructor( interleavedBuffer, itemSize, offset, normalized = false ) {\n \n     this.name = '';\n \n     this.data = interleavedBuffer;\n     this.itemSize = itemSize;\n     this.offset = offset;\n \n     this.normalized = normalized === true;\n \n   }\n \n   get count() {\n \n     return this.data.count;\n \n   }\n \n   get array() {\n \n     return this.data.array;\n \n   }\n \n   set needsUpdate( value ) {\n \n     this.data.needsUpdate = value;\n \n   }\n \n   applyMatrix4( m ) {\n \n     for ( let i = 0, l = this.data.count; i < l; i ++ ) {\n \n       _vector$6.x = this.getX( i );\n       _vector$6.y = this.getY( i );\n       _vector$6.z = this.getZ( i );\n \n       _vector$6.applyMatrix4( m );\n \n       this.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n \n     }\n \n     return this;\n \n   }\n \n   applyNormalMatrix( m ) {\n \n     for ( let i = 0, l = this.count; i < l; i ++ ) {\n \n       _vector$6.x = this.getX( i );\n       _vector$6.y = this.getY( i );\n       _vector$6.z = this.getZ( i );\n \n       _vector$6.applyNormalMatrix( m );\n \n       this.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n \n     }\n \n     return this;\n \n   }\n \n   transformDirection( m ) {\n \n     for ( let i = 0, l = this.count; i < l; i ++ ) {\n \n       _vector$6.x = this.getX( i );\n       _vector$6.y = this.getY( i );\n       _vector$6.z = this.getZ( i );\n \n       _vector$6.transformDirection( m );\n \n       this.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n \n     }\n \n     return this;\n \n   }\n \n   setX( index, x ) {\n \n     this.data.array[ index * this.data.stride + this.offset ] = x;\n \n     return this;\n \n   }\n \n   setY( index, y ) {\n \n     this.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n \n     return this;\n \n   }\n \n   setZ( index, z ) {\n \n     this.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n \n     return this;\n \n   }\n \n   setW( index, w ) {\n \n     this.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n \n     return this;\n \n   }\n \n   getX( index ) {\n \n     return this.data.array[ index * this.data.stride + this.offset ];\n \n   }\n \n   getY( index ) {\n \n     return this.data.array[ index * this.data.stride + this.offset + 1 ];\n \n   }\n \n   getZ( index ) {\n \n     return this.data.array[ index * this.data.stride + this.offset + 2 ];\n \n   }\n \n   getW( index ) {\n \n     return this.data.array[ index * this.data.stride + this.offset + 3 ];\n \n   }\n \n   setXY( index, x, y ) {\n \n     index = index * this.data.stride + this.offset;\n \n     this.data.array[ index + 0 ] = x;\n     this.data.array[ index + 1 ] = y;\n \n     return this;\n \n   }\n \n   setXYZ( index, x, y, z ) {\n \n     index = index * this.data.stride + this.offset;\n \n     this.data.array[ index + 0 ] = x;\n     this.data.array[ index + 1 ] = y;\n     this.data.array[ index + 2 ] = z;\n \n     return this;\n \n   }\n \n   setXYZW( index, x, y, z, w ) {\n \n     index = index * this.data.stride + this.offset;\n \n     this.data.array[ index + 0 ] = x;\n     this.data.array[ index + 1 ] = y;\n     this.data.array[ index + 2 ] = z;\n     this.data.array[ index + 3 ] = w;\n \n     return this;\n \n   }\n \n   clone( data ) {\n \n     if ( data === undefined ) {\n \n       console.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.' );\n \n       const array = [];\n \n       for ( let i = 0; i < this.count; i ++ ) {\n \n         const index = i * this.data.stride + this.offset;\n \n         for ( let j = 0; j < this.itemSize; j ++ ) {\n \n           array.push( this.data.array[ index + j ] );\n \n         }\n \n       }\n \n       return new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );\n \n     } else {\n \n       if ( data.interleavedBuffers === undefined ) {\n \n         data.interleavedBuffers = {};\n \n       }\n \n       if ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n \n         data.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );\n \n       }\n \n       return new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );\n \n     }\n \n   }\n \n   toJSON( data ) {\n \n     if ( data === undefined ) {\n \n       console.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.' );\n \n       const array = [];\n \n       for ( let i = 0; i < this.count; i ++ ) {\n \n         const index = i * this.data.stride + this.offset;\n \n         for ( let j = 0; j < this.itemSize; j ++ ) {\n \n           array.push( this.data.array[ index + j ] );\n \n         }\n \n       }\n \n       // deinterleave data and save it as an ordinary buffer attribute for now\n \n       return {\n         itemSize: this.itemSize,\n         type: this.array.constructor.name,\n         array: array,\n         normalized: this.normalized\n       };\n \n     } else {\n \n       // save as true interlaved attribtue\n \n       if ( data.interleavedBuffers === undefined ) {\n \n         data.interleavedBuffers = {};\n \n       }\n \n       if ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n \n         data.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );\n \n       }\n \n       return {\n         isInterleavedBufferAttribute: true,\n         itemSize: this.itemSize,\n         data: this.data.uuid,\n         offset: this.offset,\n         normalized: this.normalized\n       };\n \n     }\n \n   }\n \n }\n \n InterleavedBufferAttribute.prototype.isInterleavedBufferAttribute = true;\n \n /**\n  * parameters = {\n  *  color: <hex>,\n  *  map: new THREE.Texture( <Image> ),\n  *  alphaMap: new THREE.Texture( <Image> ),\n  *  rotation: <float>,\n  *  sizeAttenuation: <bool>\n  * }\n  */\n \n class SpriteMaterial extends Material {\n \n   constructor( parameters ) {\n \n     super();\n \n     this.type = 'SpriteMaterial';\n \n     this.color = new Color( 0xffffff );\n \n     this.map = null;\n \n     this.alphaMap = null;\n \n     this.rotation = 0;\n \n     this.sizeAttenuation = true;\n \n     this.transparent = true;\n \n     this.setValues( parameters );\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.color.copy( source.color );\n \n     this.map = source.map;\n \n     this.alphaMap = source.alphaMap;\n \n     this.rotation = source.rotation;\n \n     this.sizeAttenuation = source.sizeAttenuation;\n \n     return this;\n \n   }\n \n }\n \n SpriteMaterial.prototype.isSpriteMaterial = true;\n \n let _geometry;\n \n const _intersectPoint = /*@__PURE__*/ new Vector3();\n const _worldScale = /*@__PURE__*/ new Vector3();\n const _mvPosition = /*@__PURE__*/ new Vector3();\n \n const _alignedPosition = /*@__PURE__*/ new Vector2();\n const _rotatedPosition = /*@__PURE__*/ new Vector2();\n const _viewWorldMatrix = /*@__PURE__*/ new Matrix4();\n \n const _vA = /*@__PURE__*/ new Vector3();\n const _vB = /*@__PURE__*/ new Vector3();\n const _vC = /*@__PURE__*/ new Vector3();\n \n const _uvA = /*@__PURE__*/ new Vector2();\n const _uvB = /*@__PURE__*/ new Vector2();\n const _uvC = /*@__PURE__*/ new Vector2();\n \n class Sprite extends Object3D {\n \n   constructor( material ) {\n \n     super();\n \n     this.type = 'Sprite';\n \n     if ( _geometry === undefined ) {\n \n       _geometry = new BufferGeometry();\n \n       const float32Array = new Float32Array( [\n         - 0.5, - 0.5, 0, 0, 0,\n         0.5, - 0.5, 0, 1, 0,\n         0.5, 0.5, 0, 1, 1,\n         - 0.5, 0.5, 0, 0, 1\n       ] );\n \n       const interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n \n       _geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n       _geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n       _geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n \n     }\n \n     this.geometry = _geometry;\n     this.material = ( material !== undefined ) ? material : new SpriteMaterial();\n \n     this.center = new Vector2( 0.5, 0.5 );\n \n   }\n \n   raycast( raycaster, intersects ) {\n \n     if ( raycaster.camera === null ) {\n \n       console.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n \n     }\n \n     _worldScale.setFromMatrixScale( this.matrixWorld );\n \n     _viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n     this.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n \n     _mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n \n     if ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n \n       _worldScale.multiplyScalar( - _mvPosition.z );\n \n     }\n \n     const rotation = this.material.rotation;\n     let sin, cos;\n \n     if ( rotation !== 0 ) {\n \n       cos = Math.cos( rotation );\n       sin = Math.sin( rotation );\n \n     }\n \n     const center = this.center;\n \n     transformVertex( _vA.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n     transformVertex( _vB.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n     transformVertex( _vC.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n \n     _uvA.set( 0, 0 );\n     _uvB.set( 1, 0 );\n     _uvC.set( 1, 1 );\n \n     // check first triangle\n     let intersect = raycaster.ray.intersectTriangle( _vA, _vB, _vC, false, _intersectPoint );\n \n     if ( intersect === null ) {\n \n       // check second triangle\n       transformVertex( _vB.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n       _uvB.set( 0, 1 );\n \n       intersect = raycaster.ray.intersectTriangle( _vA, _vC, _vB, false, _intersectPoint );\n       if ( intersect === null ) {\n \n         return;\n \n       }\n \n     }\n \n     const distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n \n     if ( distance < raycaster.near || distance > raycaster.far ) return;\n \n     intersects.push( {\n \n       distance: distance,\n       point: _intersectPoint.clone(),\n       uv: Triangle.getUV( _intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() ),\n       face: null,\n       object: this\n \n     } );\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     if ( source.center !== undefined ) this.center.copy( source.center );\n \n     this.material = source.material;\n \n     return this;\n \n   }\n \n }\n \n Sprite.prototype.isSprite = true;\n \n function transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n \n   // compute position in camera space\n   _alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n \n   // to check if rotation is not zero\n   if ( sin !== undefined ) {\n \n     _rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n     _rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n \n   } else {\n \n     _rotatedPosition.copy( _alignedPosition );\n \n   }\n \n \n   vertexPosition.copy( mvPosition );\n   vertexPosition.x += _rotatedPosition.x;\n   vertexPosition.y += _rotatedPosition.y;\n \n   // transform to world space\n   vertexPosition.applyMatrix4( _viewWorldMatrix );\n \n }\n \n const _v1$2 = /*@__PURE__*/ new Vector3();\n const _v2$1 = /*@__PURE__*/ new Vector3();\n \n class LOD extends Object3D {\n \n   constructor() {\n \n     super();\n \n     this._currentLevel = 0;\n \n     this.type = 'LOD';\n \n     Object.defineProperties( this, {\n       levels: {\n         enumerable: true,\n         value: []\n       },\n       isLOD: {\n         value: true,\n       }\n     } );\n \n     this.autoUpdate = true;\n \n   }\n \n   copy( source ) {\n \n     super.copy( source, false );\n \n     const levels = source.levels;\n \n     for ( let i = 0, l = levels.length; i < l; i ++ ) {\n \n       const level = levels[ i ];\n \n       this.addLevel( level.object.clone(), level.distance );\n \n     }\n \n     this.autoUpdate = source.autoUpdate;\n \n     return this;\n \n   }\n \n   addLevel( object, distance = 0 ) {\n \n     distance = Math.abs( distance );\n \n     const levels = this.levels;\n \n     let l;\n \n     for ( l = 0; l < levels.length; l ++ ) {\n \n       if ( distance < levels[ l ].distance ) {\n \n         break;\n \n       }\n \n     }\n \n     levels.splice( l, 0, { distance: distance, object: object } );\n \n     this.add( object );\n \n     return this;\n \n   }\n \n   getCurrentLevel() {\n \n     return this._currentLevel;\n \n   }\n \n   getObjectForDistance( distance ) {\n \n     const levels = this.levels;\n \n     if ( levels.length > 0 ) {\n \n       let i, l;\n \n       for ( i = 1, l = levels.length; i < l; i ++ ) {\n \n         if ( distance < levels[ i ].distance ) {\n \n           break;\n \n         }\n \n       }\n \n       return levels[ i - 1 ].object;\n \n     }\n \n     return null;\n \n   }\n \n   raycast( raycaster, intersects ) {\n \n     const levels = this.levels;\n \n     if ( levels.length > 0 ) {\n \n       _v1$2.setFromMatrixPosition( this.matrixWorld );\n \n       const distance = raycaster.ray.origin.distanceTo( _v1$2 );\n \n       this.getObjectForDistance( distance ).raycast( raycaster, intersects );\n \n     }\n \n   }\n \n   update( camera ) {\n \n     const levels = this.levels;\n \n     if ( levels.length > 1 ) {\n \n       _v1$2.setFromMatrixPosition( camera.matrixWorld );\n       _v2$1.setFromMatrixPosition( this.matrixWorld );\n \n       const distance = _v1$2.distanceTo( _v2$1 ) / camera.zoom;\n \n       levels[ 0 ].object.visible = true;\n \n       let i, l;\n \n       for ( i = 1, l = levels.length; i < l; i ++ ) {\n \n         if ( distance >= levels[ i ].distance ) {\n \n           levels[ i - 1 ].object.visible = false;\n           levels[ i ].object.visible = true;\n \n         } else {\n \n           break;\n \n         }\n \n       }\n \n       this._currentLevel = i - 1;\n \n       for ( ; i < l; i ++ ) {\n \n         levels[ i ].object.visible = false;\n \n       }\n \n     }\n \n   }\n \n   toJSON( meta ) {\n \n     const data = super.toJSON( meta );\n \n     if ( this.autoUpdate === false ) data.object.autoUpdate = false;\n \n     data.object.levels = [];\n \n     const levels = this.levels;\n \n     for ( let i = 0, l = levels.length; i < l; i ++ ) {\n \n       const level = levels[ i ];\n \n       data.object.levels.push( {\n         object: level.object.uuid,\n         distance: level.distance\n       } );\n \n     }\n \n     return data;\n \n   }\n \n }\n \n const _basePosition = /*@__PURE__*/ new Vector3();\n \n const _skinIndex = /*@__PURE__*/ new Vector4();\n const _skinWeight = /*@__PURE__*/ new Vector4();\n \n const _vector$5 = /*@__PURE__*/ new Vector3();\n const _matrix = /*@__PURE__*/ new Matrix4();\n \n class SkinnedMesh extends Mesh {\n \n   constructor( geometry, material ) {\n \n     super( geometry, material );\n \n     this.type = 'SkinnedMesh';\n \n     this.bindMode = 'attached';\n     this.bindMatrix = new Matrix4();\n     this.bindMatrixInverse = new Matrix4();\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.bindMode = source.bindMode;\n     this.bindMatrix.copy( source.bindMatrix );\n     this.bindMatrixInverse.copy( source.bindMatrixInverse );\n \n     this.skeleton = source.skeleton;\n \n     return this;\n \n   }\n \n   bind( skeleton, bindMatrix ) {\n \n     this.skeleton = skeleton;\n \n     if ( bindMatrix === undefined ) {\n \n       this.updateMatrixWorld( true );\n \n       this.skeleton.calculateInverses();\n \n       bindMatrix = this.matrixWorld;\n \n     }\n \n     this.bindMatrix.copy( bindMatrix );\n     this.bindMatrixInverse.copy( bindMatrix ).invert();\n \n   }\n \n   pose() {\n \n     this.skeleton.pose();\n \n   }\n \n   normalizeSkinWeights() {\n \n     const vector = new Vector4();\n \n     const skinWeight = this.geometry.attributes.skinWeight;\n \n     for ( let i = 0, l = skinWeight.count; i < l; i ++ ) {\n \n       vector.x = skinWeight.getX( i );\n       vector.y = skinWeight.getY( i );\n       vector.z = skinWeight.getZ( i );\n       vector.w = skinWeight.getW( i );\n \n       const scale = 1.0 / vector.manhattanLength();\n \n       if ( scale !== Infinity ) {\n \n         vector.multiplyScalar( scale );\n \n       } else {\n \n         vector.set( 1, 0, 0, 0 ); // do something reasonable\n \n       }\n \n       skinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n \n     }\n \n   }\n \n   updateMatrixWorld( force ) {\n \n     super.updateMatrixWorld( force );\n \n     if ( this.bindMode === 'attached' ) {\n \n       this.bindMatrixInverse.copy( this.matrixWorld ).invert();\n \n     } else if ( this.bindMode === 'detached' ) {\n \n       this.bindMatrixInverse.copy( this.bindMatrix ).invert();\n \n     } else {\n \n       console.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n \n     }\n \n   }\n \n   boneTransform( index, target ) {\n \n     const skeleton = this.skeleton;\n     const geometry = this.geometry;\n \n     _skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\n     _skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\n \n     _basePosition.copy( target ).applyMatrix4( this.bindMatrix );\n \n     target.set( 0, 0, 0 );\n \n     for ( let i = 0; i < 4; i ++ ) {\n \n       const weight = _skinWeight.getComponent( i );\n \n       if ( weight !== 0 ) {\n \n         const boneIndex = _skinIndex.getComponent( i );\n \n         _matrix.multiplyMatrices( skeleton.bones[ boneIndex ].matrixWorld, skeleton.boneInverses[ boneIndex ] );\n \n         target.addScaledVector( _vector$5.copy( _basePosition ).applyMatrix4( _matrix ), weight );\n \n       }\n \n     }\n \n     return target.applyMatrix4( this.bindMatrixInverse );\n \n   }\n \n }\n \n SkinnedMesh.prototype.isSkinnedMesh = true;\n \n class Bone extends Object3D {\n \n   constructor() {\n \n     super();\n \n     this.type = 'Bone';\n \n   }\n \n }\n \n Bone.prototype.isBone = true;\n \n class DataTexture extends Texture {\n \n   constructor( data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, encoding ) {\n \n     super( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n \n     this.image = { data: data, width: width, height: height };\n \n     this.magFilter = magFilter;\n     this.minFilter = minFilter;\n \n     this.generateMipmaps = false;\n     this.flipY = false;\n     this.unpackAlignment = 1;\n \n     this.needsUpdate = true;\n \n   }\n \n }\n \n DataTexture.prototype.isDataTexture = true;\n \n const _offsetMatrix = /*@__PURE__*/ new Matrix4();\n const _identityMatrix = /*@__PURE__*/ new Matrix4();\n \n class Skeleton {\n \n   constructor( bones = [], boneInverses = [] ) {\n \n     this.uuid = generateUUID();\n \n     this.bones = bones.slice( 0 );\n     this.boneInverses = boneInverses;\n     this.boneMatrices = null;\n \n     this.boneTexture = null;\n     this.boneTextureSize = 0;\n \n     this.frame = - 1;\n \n     this.init();\n \n   }\n \n   init() {\n \n     const bones = this.bones;\n     const boneInverses = this.boneInverses;\n \n     this.boneMatrices = new Float32Array( bones.length * 16 );\n \n     // calculate inverse bone matrices if necessary\n \n     if ( boneInverses.length === 0 ) {\n \n       this.calculateInverses();\n \n     } else {\n \n       // handle special case\n \n       if ( bones.length !== boneInverses.length ) {\n \n         console.warn( 'THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.' );\n \n         this.boneInverses = [];\n \n         for ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n \n           this.boneInverses.push( new Matrix4() );\n \n         }\n \n       }\n \n     }\n \n   }\n \n   calculateInverses() {\n \n     this.boneInverses.length = 0;\n \n     for ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n \n       const inverse = new Matrix4();\n \n       if ( this.bones[ i ] ) {\n \n         inverse.copy( this.bones[ i ].matrixWorld ).invert();\n \n       }\n \n       this.boneInverses.push( inverse );\n \n     }\n \n   }\n \n   pose() {\n \n     // recover the bind-time world matrices\n \n     for ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n \n       const bone = this.bones[ i ];\n \n       if ( bone ) {\n \n         bone.matrixWorld.copy( this.boneInverses[ i ] ).invert();\n \n       }\n \n     }\n \n     // compute the local matrices, positions, rotations and scales\n \n     for ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n \n       const bone = this.bones[ i ];\n \n       if ( bone ) {\n \n         if ( bone.parent && bone.parent.isBone ) {\n \n           bone.matrix.copy( bone.parent.matrixWorld ).invert();\n           bone.matrix.multiply( bone.matrixWorld );\n \n         } else {\n \n           bone.matrix.copy( bone.matrixWorld );\n \n         }\n \n         bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n \n       }\n \n     }\n \n   }\n \n   update() {\n \n     const bones = this.bones;\n     const boneInverses = this.boneInverses;\n     const boneMatrices = this.boneMatrices;\n     const boneTexture = this.boneTexture;\n \n     // flatten bone matrices to array\n \n     for ( let i = 0, il = bones.length; i < il; i ++ ) {\n \n       // compute the offset between the current and the original transform\n \n       const matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n \n       _offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n       _offsetMatrix.toArray( boneMatrices, i * 16 );\n \n     }\n \n     if ( boneTexture !== null ) {\n \n       boneTexture.needsUpdate = true;\n \n     }\n \n   }\n \n   clone() {\n \n     return new Skeleton( this.bones, this.boneInverses );\n \n   }\n \n   computeBoneTexture() {\n \n     // layout (1 matrix = 4 pixels)\n     //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n     //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n     //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n     //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n     //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n \n     let size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n     size = ceilPowerOfTwo( size );\n     size = Math.max( size, 4 );\n \n     const boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n     boneMatrices.set( this.boneMatrices ); // copy current values\n \n     const boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n \n     this.boneMatrices = boneMatrices;\n     this.boneTexture = boneTexture;\n     this.boneTextureSize = size;\n \n     return this;\n \n   }\n \n   getBoneByName( name ) {\n \n     for ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n \n       const bone = this.bones[ i ];\n \n       if ( bone.name === name ) {\n \n         return bone;\n \n       }\n \n     }\n \n     return undefined;\n \n   }\n \n   dispose( ) {\n \n     if ( this.boneTexture !== null ) {\n \n       this.boneTexture.dispose();\n \n       this.boneTexture = null;\n \n     }\n \n   }\n \n   fromJSON( json, bones ) {\n \n     this.uuid = json.uuid;\n \n     for ( let i = 0, l = json.bones.length; i < l; i ++ ) {\n \n       const uuid = json.bones[ i ];\n       let bone = bones[ uuid ];\n \n       if ( bone === undefined ) {\n \n         console.warn( 'THREE.Skeleton: No bone found with UUID:', uuid );\n         bone = new Bone();\n \n       }\n \n       this.bones.push( bone );\n       this.boneInverses.push( new Matrix4().fromArray( json.boneInverses[ i ] ) );\n \n     }\n \n     this.init();\n \n     return this;\n \n   }\n \n   toJSON() {\n \n     const data = {\n       metadata: {\n         version: 4.5,\n         type: 'Skeleton',\n         generator: 'Skeleton.toJSON'\n       },\n       bones: [],\n       boneInverses: []\n     };\n \n     data.uuid = this.uuid;\n \n     const bones = this.bones;\n     const boneInverses = this.boneInverses;\n \n     for ( let i = 0, l = bones.length; i < l; i ++ ) {\n \n       const bone = bones[ i ];\n       data.bones.push( bone.uuid );\n \n       const boneInverse = boneInverses[ i ];\n       data.boneInverses.push( boneInverse.toArray() );\n \n     }\n \n     return data;\n \n   }\n \n }\n \n class InstancedBufferAttribute extends BufferAttribute {\n \n   constructor( array, itemSize, normalized, meshPerAttribute = 1 ) {\n \n     if ( typeof normalized === 'number' ) {\n \n       meshPerAttribute = normalized;\n \n       normalized = false;\n \n       console.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );\n \n     }\n \n     super( array, itemSize, normalized );\n \n     this.meshPerAttribute = meshPerAttribute;\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.meshPerAttribute = source.meshPerAttribute;\n \n     return this;\n \n   }\n \n   toJSON() {\n \n     const data = super.toJSON();\n \n     data.meshPerAttribute = this.meshPerAttribute;\n \n     data.isInstancedBufferAttribute = true;\n \n     return data;\n \n   }\n \n }\n \n InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n \n const _instanceLocalMatrix = /*@__PURE__*/ new Matrix4();\n const _instanceWorldMatrix = /*@__PURE__*/ new Matrix4();\n \n const _instanceIntersects = [];\n \n const _mesh = /*@__PURE__*/ new Mesh();\n \n class InstancedMesh extends Mesh {\n \n   constructor( geometry, material, count ) {\n \n     super( geometry, material );\n \n     this.instanceMatrix = new InstancedBufferAttribute( new Float32Array( count * 16 ), 16 );\n     this.instanceColor = null;\n \n     this.count = count;\n \n     this.frustumCulled = false;\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.instanceMatrix.copy( source.instanceMatrix );\n \n     if ( source.instanceColor !== null ) this.instanceColor = source.instanceColor.clone();\n \n     this.count = source.count;\n \n     return this;\n \n   }\n \n   getColorAt( index, color ) {\n \n     color.fromArray( this.instanceColor.array, index * 3 );\n \n   }\n \n   getMatrixAt( index, matrix ) {\n \n     matrix.fromArray( this.instanceMatrix.array, index * 16 );\n \n   }\n \n   raycast( raycaster, intersects ) {\n \n     const matrixWorld = this.matrixWorld;\n     const raycastTimes = this.count;\n \n     _mesh.geometry = this.geometry;\n     _mesh.material = this.material;\n \n     if ( _mesh.material === undefined ) return;\n \n     for ( let instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n \n       // calculate the world matrix for each instance\n \n       this.getMatrixAt( instanceId, _instanceLocalMatrix );\n \n       _instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n \n       // the mesh represents this single instance\n \n       _mesh.matrixWorld = _instanceWorldMatrix;\n \n       _mesh.raycast( raycaster, _instanceIntersects );\n \n       // process the result of raycast\n \n       for ( let i = 0, l = _instanceIntersects.length; i < l; i ++ ) {\n \n         const intersect = _instanceIntersects[ i ];\n         intersect.instanceId = instanceId;\n         intersect.object = this;\n         intersects.push( intersect );\n \n       }\n \n       _instanceIntersects.length = 0;\n \n     }\n \n   }\n \n   setColorAt( index, color ) {\n \n     if ( this.instanceColor === null ) {\n \n       this.instanceColor = new InstancedBufferAttribute( new Float32Array( this.instanceMatrix.count * 3 ), 3 );\n \n     }\n \n     color.toArray( this.instanceColor.array, index * 3 );\n \n   }\n \n   setMatrixAt( index, matrix ) {\n \n     matrix.toArray( this.instanceMatrix.array, index * 16 );\n \n   }\n \n   updateMorphTargets() {\n \n   }\n \n   dispose() {\n \n     this.dispatchEvent( { type: 'dispose' } );\n \n   }\n \n }\n \n InstancedMesh.prototype.isInstancedMesh = true;\n \n /**\n  * parameters = {\n  *  color: <hex>,\n  *  opacity: <float>,\n  *\n  *  linewidth: <float>,\n  *  linecap: \"round\",\n  *  linejoin: \"round\"\n  * }\n  */\n \n class LineBasicMaterial extends Material {\n \n   constructor( parameters ) {\n \n     super();\n \n     this.type = 'LineBasicMaterial';\n \n     this.color = new Color( 0xffffff );\n \n     this.linewidth = 1;\n     this.linecap = 'round';\n     this.linejoin = 'round';\n \n     this.setValues( parameters );\n \n   }\n \n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.color.copy( source.color );\n \n     this.linewidth = source.linewidth;\n     this.linecap = source.linecap;\n     this.linejoin = source.linejoin;\n \n     return this;\n \n   }\n \n }\n \n LineBasicMaterial.prototype.isLineBasicMaterial = true;\n \n const _start$1 = /*@__PURE__*/ new Vector3();\n const _end$1 = /*@__PURE__*/ new Vector3();\n const _inverseMatrix$1 = /*@__PURE__*/ new Matrix4();\n const _ray$1 = /*@__PURE__*/ new Ray();\n const _sphere$1 = /*@__PURE__*/ new Sphere();\n \n class Line extends Object3D {\n \n   constructor( geometry = new BufferGeometry(), material = new LineBasicMaterial() ) {\n \n     super();\n \n     this.type = 'Line';\n \n     this.geometry = geometry;\n     this.material = material;\n \n     this.updateMorphTargets();\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.material = source.material;\n     this.geometry = source.geometry;\n \n     return this;\n \n   }\n \n   computeLineDistances() {\n \n     const geometry = this.geometry;\n \n     if ( geometry.isBufferGeometry ) {\n \n       // we assume non-indexed geometry\n \n       if ( geometry.index === null ) {\n \n         const positionAttribute = geometry.attributes.position;\n         const lineDistances = [ 0 ];\n \n         for ( let i = 1, l = positionAttribute.count; i < l; i ++ ) {\n \n           _start$1.fromBufferAttribute( positionAttribute, i - 1 );\n           _end$1.fromBufferAttribute( positionAttribute, i );\n \n           lineDistances[ i ] = lineDistances[ i - 1 ];\n           lineDistances[ i ] += _start$1.distanceTo( _end$1 );\n \n         }\n \n         geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n \n       } else {\n \n         console.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n \n       }\n \n     } else if ( geometry.isGeometry ) {\n \n       console.error( 'THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n \n     }\n \n     return this;\n \n   }\n \n   raycast( raycaster, intersects ) {\n \n     const geometry = this.geometry;\n     const matrixWorld = this.matrixWorld;\n     const threshold = raycaster.params.Line.threshold;\n     const drawRange = geometry.drawRange;\n \n     // Checking boundingSphere distance to ray\n \n     if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n \n     _sphere$1.copy( geometry.boundingSphere );\n     _sphere$1.applyMatrix4( matrixWorld );\n     _sphere$1.radius += threshold;\n \n     if ( raycaster.ray.intersectsSphere( _sphere$1 ) === false ) return;\n \n     //\n \n     _inverseMatrix$1.copy( matrixWorld ).invert();\n     _ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\n \n     const localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n     const localThresholdSq = localThreshold * localThreshold;\n \n     const vStart = new Vector3();\n     const vEnd = new Vector3();\n     const interSegment = new Vector3();\n     const interRay = new Vector3();\n     const step = this.isLineSegments ? 2 : 1;\n \n     if ( geometry.isBufferGeometry ) {\n \n       const index = geometry.index;\n       const attributes = geometry.attributes;\n       const positionAttribute = attributes.position;\n \n       if ( index !== null ) {\n \n         const start = Math.max( 0, drawRange.start );\n         const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n \n         for ( let i = start, l = end - 1; i < l; i += step ) {\n \n           const a = index.getX( i );\n           const b = index.getX( i + 1 );\n \n           vStart.fromBufferAttribute( positionAttribute, a );\n           vEnd.fromBufferAttribute( positionAttribute, b );\n \n           const distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n \n           if ( distSq > localThresholdSq ) continue;\n \n           interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n \n           const distance = raycaster.ray.origin.distanceTo( interRay );\n \n           if ( distance < raycaster.near || distance > raycaster.far ) continue;\n \n           intersects.push( {\n \n             distance: distance,\n             // What do we want? intersection point on the ray or on the segment??\n             // point: raycaster.ray.at( distance ),\n             point: interSegment.clone().applyMatrix4( this.matrixWorld ),\n             index: i,\n             face: null,\n             faceIndex: null,\n             object: this\n \n           } );\n \n         }\n \n       } else {\n \n         const start = Math.max( 0, drawRange.start );\n         const end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n \n         for ( let i = start, l = end - 1; i < l; i += step ) {\n \n           vStart.fromBufferAttribute( positionAttribute, i );\n           vEnd.fromBufferAttribute( positionAttribute, i + 1 );\n \n           const distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n \n           if ( distSq > localThresholdSq ) continue;\n \n           interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n \n           const distance = raycaster.ray.origin.distanceTo( interRay );\n \n           if ( distance < raycaster.near || distance > raycaster.far ) continue;\n \n           intersects.push( {\n \n             distance: distance,\n             // What do we want? intersection point on the ray or on the segment??\n             // point: raycaster.ray.at( distance ),\n             point: interSegment.clone().applyMatrix4( this.matrixWorld ),\n             index: i,\n             face: null,\n             faceIndex: null,\n             object: this\n \n           } );\n \n         }\n \n       }\n \n     } else if ( geometry.isGeometry ) {\n \n       console.error( 'THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n \n     }\n \n   }\n \n   updateMorphTargets() {\n \n     const geometry = this.geometry;\n \n     if ( geometry.isBufferGeometry ) {\n \n       const morphAttributes = geometry.morphAttributes;\n       const keys = Object.keys( morphAttributes );\n \n       if ( keys.length > 0 ) {\n \n         const morphAttribute = morphAttributes[ keys[ 0 ] ];\n \n         if ( morphAttribute !== undefined ) {\n \n           this.morphTargetInfluences = [];\n           this.morphTargetDictionary = {};\n \n           for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n \n             const name = morphAttribute[ m ].name || String( m );\n \n             this.morphTargetInfluences.push( 0 );\n             this.morphTargetDictionary[ name ] = m;\n \n           }\n \n         }\n \n       }\n \n     } else {\n \n       const morphTargets = geometry.morphTargets;\n \n       if ( morphTargets !== undefined && morphTargets.length > 0 ) {\n \n         console.error( 'THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\n \n       }\n \n     }\n \n   }\n \n }\n \n Line.prototype.isLine = true;\n \n const _start = /*@__PURE__*/ new Vector3();\n const _end = /*@__PURE__*/ new Vector3();\n \n class LineSegments extends Line {\n \n   constructor( geometry, material ) {\n \n     super( geometry, material );\n \n     this.type = 'LineSegments';\n \n   }\n \n   computeLineDistances() {\n \n     const geometry = this.geometry;\n \n     if ( geometry.isBufferGeometry ) {\n \n       // we assume non-indexed geometry\n \n       if ( geometry.index === null ) {\n \n         const positionAttribute = geometry.attributes.position;\n         const lineDistances = [];\n \n         for ( let i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n \n           _start.fromBufferAttribute( positionAttribute, i );\n           _end.fromBufferAttribute( positionAttribute, i + 1 );\n \n           lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n           lineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );\n \n         }\n \n         geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n \n       } else {\n \n         console.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n \n       }\n \n     } else if ( geometry.isGeometry ) {\n \n       console.error( 'THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n \n     }\n \n     return this;\n \n   }\n \n }\n \n LineSegments.prototype.isLineSegments = true;\n \n class LineLoop extends Line {\n \n   constructor( geometry, material ) {\n \n     super( geometry, material );\n \n     this.type = 'LineLoop';\n \n   }\n \n }\n \n LineLoop.prototype.isLineLoop = true;\n \n /**\n  * parameters = {\n  *  color: <hex>,\n  *  opacity: <float>,\n  *  map: new THREE.Texture( <Image> ),\n  *  alphaMap: new THREE.Texture( <Image> ),\n  *\n  *  size: <float>,\n  *  sizeAttenuation: <bool>\n  *\n  * }\n  */\n \n class PointsMaterial extends Material {\n \n   constructor( parameters ) {\n \n     super();\n \n     this.type = 'PointsMaterial';\n \n     this.color = new Color( 0xffffff );\n \n     this.map = null;\n \n     this.alphaMap = null;\n \n     this.size = 1;\n     this.sizeAttenuation = true;\n \n     this.setValues( parameters );\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.color.copy( source.color );\n \n     this.map = source.map;\n \n     this.alphaMap = source.alphaMap;\n \n     this.size = source.size;\n     this.sizeAttenuation = source.sizeAttenuation;\n \n     return this;\n \n   }\n \n }\n \n PointsMaterial.prototype.isPointsMaterial = true;\n \n const _inverseMatrix = /*@__PURE__*/ new Matrix4();\n const _ray = /*@__PURE__*/ new Ray();\n const _sphere = /*@__PURE__*/ new Sphere();\n const _position$2 = /*@__PURE__*/ new Vector3();\n \n class Points extends Object3D {\n \n   constructor( geometry = new BufferGeometry(), material = new PointsMaterial() ) {\n \n     super();\n \n     this.type = 'Points';\n \n     this.geometry = geometry;\n     this.material = material;\n \n     this.updateMorphTargets();\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.material = source.material;\n     this.geometry = source.geometry;\n \n     return this;\n \n   }\n \n   raycast( raycaster, intersects ) {\n \n     const geometry = this.geometry;\n     const matrixWorld = this.matrixWorld;\n     const threshold = raycaster.params.Points.threshold;\n     const drawRange = geometry.drawRange;\n \n     // Checking boundingSphere distance to ray\n \n     if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n \n     _sphere.copy( geometry.boundingSphere );\n     _sphere.applyMatrix4( matrixWorld );\n     _sphere.radius += threshold;\n \n     if ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\n \n     //\n \n     _inverseMatrix.copy( matrixWorld ).invert();\n     _ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n \n     const localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n     const localThresholdSq = localThreshold * localThreshold;\n \n     if ( geometry.isBufferGeometry ) {\n \n       const index = geometry.index;\n       const attributes = geometry.attributes;\n       const positionAttribute = attributes.position;\n \n       if ( index !== null ) {\n \n         const start = Math.max( 0, drawRange.start );\n         const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n \n         for ( let i = start, il = end; i < il; i ++ ) {\n \n           const a = index.getX( i );\n \n           _position$2.fromBufferAttribute( positionAttribute, a );\n \n           testPoint( _position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\n \n         }\n \n       } else {\n \n         const start = Math.max( 0, drawRange.start );\n         const end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n \n         for ( let i = start, l = end; i < l; i ++ ) {\n \n           _position$2.fromBufferAttribute( positionAttribute, i );\n \n           testPoint( _position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n \n         }\n \n       }\n \n     } else {\n \n       console.error( 'THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n \n     }\n \n   }\n \n   updateMorphTargets() {\n \n     const geometry = this.geometry;\n \n     if ( geometry.isBufferGeometry ) {\n \n       const morphAttributes = geometry.morphAttributes;\n       const keys = Object.keys( morphAttributes );\n \n       if ( keys.length > 0 ) {\n \n         const morphAttribute = morphAttributes[ keys[ 0 ] ];\n \n         if ( morphAttribute !== undefined ) {\n \n           this.morphTargetInfluences = [];\n           this.morphTargetDictionary = {};\n \n           for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n \n             const name = morphAttribute[ m ].name || String( m );\n \n             this.morphTargetInfluences.push( 0 );\n             this.morphTargetDictionary[ name ] = m;\n \n           }\n \n         }\n \n       }\n \n     } else {\n \n       const morphTargets = geometry.morphTargets;\n \n       if ( morphTargets !== undefined && morphTargets.length > 0 ) {\n \n         console.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\n \n       }\n \n     }\n \n   }\n \n }\n \n Points.prototype.isPoints = true;\n \n function testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\n \n   const rayPointDistanceSq = _ray.distanceSqToPoint( point );\n \n   if ( rayPointDistanceSq < localThresholdSq ) {\n \n     const intersectPoint = new Vector3();\n \n     _ray.closestPointToPoint( point, intersectPoint );\n     intersectPoint.applyMatrix4( matrixWorld );\n \n     const distance = raycaster.ray.origin.distanceTo( intersectPoint );\n \n     if ( distance < raycaster.near || distance > raycaster.far ) return;\n \n     intersects.push( {\n \n       distance: distance,\n       distanceToRay: Math.sqrt( rayPointDistanceSq ),\n       point: intersectPoint,\n       index: index,\n       face: null,\n       object: object\n \n     } );\n \n   }\n \n }\n \n class VideoTexture extends Texture {\n \n   constructor( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n \n     super( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n \n     this.format = format !== undefined ? format : RGBFormat;\n \n     this.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n     this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n \n     this.generateMipmaps = false;\n \n     const scope = this;\n \n     function updateVideo() {\n \n       scope.needsUpdate = true;\n       video.requestVideoFrameCallback( updateVideo );\n \n     }\n \n     if ( 'requestVideoFrameCallback' in video ) {\n \n       video.requestVideoFrameCallback( updateVideo );\n \n     }\n \n   }\n \n   clone() {\n \n     return new this.constructor( this.image ).copy( this );\n \n   }\n \n   update() {\n \n     const video = this.image;\n     const hasVideoFrameCallback = 'requestVideoFrameCallback' in video;\n \n     if ( hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA ) {\n \n       this.needsUpdate = true;\n \n     }\n \n   }\n \n }\n \n VideoTexture.prototype.isVideoTexture = true;\n \n class CompressedTexture extends Texture {\n \n   constructor( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n \n     super( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n \n     this.image = { width: width, height: height };\n     this.mipmaps = mipmaps;\n \n     // no flipping for cube textures\n     // (also flipping doesn't work for compressed textures )\n \n     this.flipY = false;\n \n     // can't generate mipmaps for compressed textures\n     // mips must be embedded in DDS files\n \n     this.generateMipmaps = false;\n \n   }\n \n }\n \n CompressedTexture.prototype.isCompressedTexture = true;\n \n class CanvasTexture extends Texture {\n \n   constructor( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n \n     super( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n \n     this.needsUpdate = true;\n \n   }\n \n }\n \n CanvasTexture.prototype.isCanvasTexture = true;\n \n class CircleGeometry extends BufferGeometry {\n \n   constructor( radius = 1, segments = 8, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n \n     super();\n \n     this.type = 'CircleGeometry';\n \n     this.parameters = {\n       radius: radius,\n       segments: segments,\n       thetaStart: thetaStart,\n       thetaLength: thetaLength\n     };\n \n     segments = Math.max( 3, segments );\n \n     // buffers\n \n     const indices = [];\n     const vertices = [];\n     const normals = [];\n     const uvs = [];\n \n     // helper variables\n \n     const vertex = new Vector3();\n     const uv = new Vector2();\n \n     // center point\n \n     vertices.push( 0, 0, 0 );\n     normals.push( 0, 0, 1 );\n     uvs.push( 0.5, 0.5 );\n \n     for ( let s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n \n       const segment = thetaStart + s / segments * thetaLength;\n \n       // vertex\n \n       vertex.x = radius * Math.cos( segment );\n       vertex.y = radius * Math.sin( segment );\n \n       vertices.push( vertex.x, vertex.y, vertex.z );\n \n       // normal\n \n       normals.push( 0, 0, 1 );\n \n       // uvs\n \n       uv.x = ( vertices[ i ] / radius + 1 ) / 2;\n       uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n \n       uvs.push( uv.x, uv.y );\n \n     }\n \n     // indices\n \n     for ( let i = 1; i <= segments; i ++ ) {\n \n       indices.push( i, i + 1, 0 );\n \n     }\n \n     // build geometry\n \n     this.setIndex( indices );\n     this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n     this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n     this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n \n   }\n \n   static fromJSON( data ) {\n \n     return new CircleGeometry( data.radius, data.segments, data.thetaStart, data.thetaLength );\n \n   }\n \n }\n \n class CylinderGeometry extends BufferGeometry {\n \n   constructor( radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n \n     super();\n     this.type = 'CylinderGeometry';\n \n     this.parameters = {\n       radiusTop: radiusTop,\n       radiusBottom: radiusBottom,\n       height: height,\n       radialSegments: radialSegments,\n       heightSegments: heightSegments,\n       openEnded: openEnded,\n       thetaStart: thetaStart,\n       thetaLength: thetaLength\n     };\n \n     const scope = this;\n \n     radialSegments = Math.floor( radialSegments );\n     heightSegments = Math.floor( heightSegments );\n \n     // buffers\n \n     const indices = [];\n     const vertices = [];\n     const normals = [];\n     const uvs = [];\n \n     // helper variables\n \n     let index = 0;\n     const indexArray = [];\n     const halfHeight = height / 2;\n     let groupStart = 0;\n \n     // generate geometry\n \n     generateTorso();\n \n     if ( openEnded === false ) {\n \n       if ( radiusTop > 0 ) generateCap( true );\n       if ( radiusBottom > 0 ) generateCap( false );\n \n     }\n \n     // build geometry\n \n     this.setIndex( indices );\n     this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n     this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n     this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n \n     function generateTorso() {\n \n       const normal = new Vector3();\n       const vertex = new Vector3();\n \n       let groupCount = 0;\n \n       // this will be used to calculate the normal\n       const slope = ( radiusBottom - radiusTop ) / height;\n \n       // generate vertices, normals and uvs\n \n       for ( let y = 0; y <= heightSegments; y ++ ) {\n \n         const indexRow = [];\n \n         const v = y / heightSegments;\n \n         // calculate the radius of the current row\n \n         const radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n \n         for ( let x = 0; x <= radialSegments; x ++ ) {\n \n           const u = x / radialSegments;\n \n           const theta = u * thetaLength + thetaStart;\n \n           const sinTheta = Math.sin( theta );\n           const cosTheta = Math.cos( theta );\n \n           // vertex\n \n           vertex.x = radius * sinTheta;\n           vertex.y = - v * height + halfHeight;\n           vertex.z = radius * cosTheta;\n           vertices.push( vertex.x, vertex.y, vertex.z );\n \n           // normal\n \n           normal.set( sinTheta, slope, cosTheta ).normalize();\n           normals.push( normal.x, normal.y, normal.z );\n \n           // uv\n \n           uvs.push( u, 1 - v );\n \n           // save index of vertex in respective row\n \n           indexRow.push( index ++ );\n \n         }\n \n         // now save vertices of the row in our index array\n \n         indexArray.push( indexRow );\n \n       }\n \n       // generate indices\n \n       for ( let x = 0; x < radialSegments; x ++ ) {\n \n         for ( let y = 0; y < heightSegments; y ++ ) {\n \n           // we use the index array to access the correct indices\n \n           const a = indexArray[ y ][ x ];\n           const b = indexArray[ y + 1 ][ x ];\n           const c = indexArray[ y + 1 ][ x + 1 ];\n           const d = indexArray[ y ][ x + 1 ];\n \n           // faces\n \n           indices.push( a, b, d );\n           indices.push( b, c, d );\n \n           // update group counter\n \n           groupCount += 6;\n \n         }\n \n       }\n \n       // add a group to the geometry. this will ensure multi material support\n \n       scope.addGroup( groupStart, groupCount, 0 );\n \n       // calculate new start value for groups\n \n       groupStart += groupCount;\n \n     }\n \n     function generateCap( top ) {\n \n       // save the index of the first center vertex\n       const centerIndexStart = index;\n \n       const uv = new Vector2();\n       const vertex = new Vector3();\n \n       let groupCount = 0;\n \n       const radius = ( top === true ) ? radiusTop : radiusBottom;\n       const sign = ( top === true ) ? 1 : - 1;\n \n       // first we generate the center vertex data of the cap.\n       // because the geometry needs one set of uvs per face,\n       // we must generate a center vertex per face/segment\n \n       for ( let x = 1; x <= radialSegments; x ++ ) {\n \n         // vertex\n \n         vertices.push( 0, halfHeight * sign, 0 );\n \n         // normal\n \n         normals.push( 0, sign, 0 );\n \n         // uv\n \n         uvs.push( 0.5, 0.5 );\n \n         // increase index\n \n         index ++;\n \n       }\n \n       // save the index of the last center vertex\n       const centerIndexEnd = index;\n \n       // now we generate the surrounding vertices, normals and uvs\n \n       for ( let x = 0; x <= radialSegments; x ++ ) {\n \n         const u = x / radialSegments;\n         const theta = u * thetaLength + thetaStart;\n \n         const cosTheta = Math.cos( theta );\n         const sinTheta = Math.sin( theta );\n \n         // vertex\n \n         vertex.x = radius * sinTheta;\n         vertex.y = halfHeight * sign;\n         vertex.z = radius * cosTheta;\n         vertices.push( vertex.x, vertex.y, vertex.z );\n \n         // normal\n \n         normals.push( 0, sign, 0 );\n \n         // uv\n \n         uv.x = ( cosTheta * 0.5 ) + 0.5;\n         uv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n         uvs.push( uv.x, uv.y );\n \n         // increase index\n \n         index ++;\n \n       }\n \n       // generate indices\n \n       for ( let x = 0; x < radialSegments; x ++ ) {\n \n         const c = centerIndexStart + x;\n         const i = centerIndexEnd + x;\n \n         if ( top === true ) {\n \n           // face top\n \n           indices.push( i, i + 1, c );\n \n         } else {\n \n           // face bottom\n \n           indices.push( i + 1, i, c );\n \n         }\n \n         groupCount += 3;\n \n       }\n \n       // add a group to the geometry. this will ensure multi material support\n \n       scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n \n       // calculate new start value for groups\n \n       groupStart += groupCount;\n \n     }\n \n   }\n \n   static fromJSON( data ) {\n \n     return new CylinderGeometry( data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n \n   }\n \n }\n \n class ConeGeometry extends CylinderGeometry {\n \n   constructor( radius = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n \n     super( 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n \n     this.type = 'ConeGeometry';\n \n     this.parameters = {\n       radius: radius,\n       height: height,\n       radialSegments: radialSegments,\n       heightSegments: heightSegments,\n       openEnded: openEnded,\n       thetaStart: thetaStart,\n       thetaLength: thetaLength\n     };\n \n   }\n \n   static fromJSON( data ) {\n \n     return new ConeGeometry( data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n \n   }\n \n }\n \n class PolyhedronGeometry extends BufferGeometry {\n \n   constructor( vertices = [], indices = [], radius = 1, detail = 0 ) {\n \n     super();\n \n     this.type = 'PolyhedronGeometry';\n \n     this.parameters = {\n       vertices: vertices,\n       indices: indices,\n       radius: radius,\n       detail: detail\n     };\n \n     // default buffer data\n \n     const vertexBuffer = [];\n     const uvBuffer = [];\n \n     // the subdivision creates the vertex buffer data\n \n     subdivide( detail );\n \n     // all vertices should lie on a conceptual sphere with a given radius\n \n     applyRadius( radius );\n \n     // finally, create the uv data\n \n     generateUVs();\n \n     // build non-indexed geometry\n \n     this.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n     this.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n     this.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n \n     if ( detail === 0 ) {\n \n       this.computeVertexNormals(); // flat normals\n \n     } else {\n \n       this.normalizeNormals(); // smooth normals\n \n     }\n \n     // helper functions\n \n     function subdivide( detail ) {\n \n       const a = new Vector3();\n       const b = new Vector3();\n       const c = new Vector3();\n \n       // iterate over all faces and apply a subdivison with the given detail value\n \n       for ( let i = 0; i < indices.length; i += 3 ) {\n \n         // get the vertices of the face\n \n         getVertexByIndex( indices[ i + 0 ], a );\n         getVertexByIndex( indices[ i + 1 ], b );\n         getVertexByIndex( indices[ i + 2 ], c );\n \n         // perform subdivision\n \n         subdivideFace( a, b, c, detail );\n \n       }\n \n     }\n \n     function subdivideFace( a, b, c, detail ) {\n \n       const cols = detail + 1;\n \n       // we use this multidimensional array as a data structure for creating the subdivision\n \n       const v = [];\n \n       // construct all of the vertices for this subdivision\n \n       for ( let i = 0; i <= cols; i ++ ) {\n \n         v[ i ] = [];\n \n         const aj = a.clone().lerp( c, i / cols );\n         const bj = b.clone().lerp( c, i / cols );\n \n         const rows = cols - i;\n \n         for ( let j = 0; j <= rows; j ++ ) {\n \n           if ( j === 0 && i === cols ) {\n \n             v[ i ][ j ] = aj;\n \n           } else {\n \n             v[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n \n           }\n \n         }\n \n       }\n \n       // construct all of the faces\n \n       for ( let i = 0; i < cols; i ++ ) {\n \n         for ( let j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n \n           const k = Math.floor( j / 2 );\n \n           if ( j % 2 === 0 ) {\n \n             pushVertex( v[ i ][ k + 1 ] );\n             pushVertex( v[ i + 1 ][ k ] );\n             pushVertex( v[ i ][ k ] );\n \n           } else {\n \n             pushVertex( v[ i ][ k + 1 ] );\n             pushVertex( v[ i + 1 ][ k + 1 ] );\n             pushVertex( v[ i + 1 ][ k ] );\n \n           }\n \n         }\n \n       }\n \n     }\n \n     function applyRadius( radius ) {\n \n       const vertex = new Vector3();\n \n       // iterate over the entire buffer and apply the radius to each vertex\n \n       for ( let i = 0; i < vertexBuffer.length; i += 3 ) {\n \n         vertex.x = vertexBuffer[ i + 0 ];\n         vertex.y = vertexBuffer[ i + 1 ];\n         vertex.z = vertexBuffer[ i + 2 ];\n \n         vertex.normalize().multiplyScalar( radius );\n \n         vertexBuffer[ i + 0 ] = vertex.x;\n         vertexBuffer[ i + 1 ] = vertex.y;\n         vertexBuffer[ i + 2 ] = vertex.z;\n \n       }\n \n     }\n \n     function generateUVs() {\n \n       const vertex = new Vector3();\n \n       for ( let i = 0; i < vertexBuffer.length; i += 3 ) {\n \n         vertex.x = vertexBuffer[ i + 0 ];\n         vertex.y = vertexBuffer[ i + 1 ];\n         vertex.z = vertexBuffer[ i + 2 ];\n \n         const u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n         const v = inclination( vertex ) / Math.PI + 0.5;\n         uvBuffer.push( u, 1 - v );\n \n       }\n \n       correctUVs();\n \n       correctSeam();\n \n     }\n \n     function correctSeam() {\n \n       // handle case when face straddles the seam, see #3269\n \n       for ( let i = 0; i < uvBuffer.length; i += 6 ) {\n \n         // uv data of a single face\n \n         const x0 = uvBuffer[ i + 0 ];\n         const x1 = uvBuffer[ i + 2 ];\n         const x2 = uvBuffer[ i + 4 ];\n \n         const max = Math.max( x0, x1, x2 );\n         const min = Math.min( x0, x1, x2 );\n \n         // 0.9 is somewhat arbitrary\n \n         if ( max > 0.9 && min < 0.1 ) {\n \n           if ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\n           if ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\n           if ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\n \n         }\n \n       }\n \n     }\n \n     function pushVertex( vertex ) {\n \n       vertexBuffer.push( vertex.x, vertex.y, vertex.z );\n \n     }\n \n     function getVertexByIndex( index, vertex ) {\n \n       const stride = index * 3;\n \n       vertex.x = vertices[ stride + 0 ];\n       vertex.y = vertices[ stride + 1 ];\n       vertex.z = vertices[ stride + 2 ];\n \n     }\n \n     function correctUVs() {\n \n       const a = new Vector3();\n       const b = new Vector3();\n       const c = new Vector3();\n \n       const centroid = new Vector3();\n \n       const uvA = new Vector2();\n       const uvB = new Vector2();\n       const uvC = new Vector2();\n \n       for ( let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n \n         a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n         b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n         c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n \n         uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n         uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n         uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n \n         centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n \n         const azi = azimuth( centroid );\n \n         correctUV( uvA, j + 0, a, azi );\n         correctUV( uvB, j + 2, b, azi );\n         correctUV( uvC, j + 4, c, azi );\n \n       }\n \n     }\n \n     function correctUV( uv, stride, vector, azimuth ) {\n \n       if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n \n         uvBuffer[ stride ] = uv.x - 1;\n \n       }\n \n       if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n \n         uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n \n       }\n \n     }\n \n     // Angle around the Y axis, counter-clockwise when looking from above.\n \n     function azimuth( vector ) {\n \n       return Math.atan2( vector.z, - vector.x );\n \n     }\n \n \n     // Angle above the XZ plane.\n \n     function inclination( vector ) {\n \n       return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n \n     }\n \n   }\n \n   static fromJSON( data ) {\n \n     return new PolyhedronGeometry( data.vertices, data.indices, data.radius, data.details );\n \n   }\n \n }\n \n class DodecahedronGeometry extends PolyhedronGeometry {\n \n   constructor( radius = 1, detail = 0 ) {\n \n     const t = ( 1 + Math.sqrt( 5 ) ) / 2;\n     const r = 1 / t;\n \n     const vertices = [\n \n       // (±1, ±1, ±1)\n       - 1, - 1, - 1,\t- 1, - 1, 1,\n       - 1, 1, - 1, - 1, 1, 1,\n       1, - 1, - 1, 1, - 1, 1,\n       1, 1, - 1, 1, 1, 1,\n \n       // (0, ±1/φ, ±φ)\n       0, - r, - t, 0, - r, t,\n       0, r, - t, 0, r, t,\n \n       // (±1/φ, ±φ, 0)\n       - r, - t, 0, - r, t, 0,\n       r, - t, 0, r, t, 0,\n \n       // (±φ, 0, ±1/φ)\n       - t, 0, - r, t, 0, - r,\n       - t, 0, r, t, 0, r\n     ];\n \n     const indices = [\n       3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n       7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n       17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n       8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n       0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n       6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n       2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n       18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n       4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n       11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n       19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n       1, 12, 14, \t1, 14, 5, \t1, 5, 9\n     ];\n \n     super( vertices, indices, radius, detail );\n \n     this.type = 'DodecahedronGeometry';\n \n     this.parameters = {\n       radius: radius,\n       detail: detail\n     };\n \n   }\n \n   static fromJSON( data ) {\n \n     return new DodecahedronGeometry( data.radius, data.detail );\n \n   }\n \n }\n \n const _v0 = new Vector3();\n const _v1$1 = new Vector3();\n const _normal = new Vector3();\n const _triangle = new Triangle();\n \n class EdgesGeometry extends BufferGeometry {\n \n   constructor( geometry = null, thresholdAngle = 1 ) {\n \n     super();\n     this.type = 'EdgesGeometry';\n \n     this.parameters = {\n       geometry: geometry,\n       thresholdAngle: thresholdAngle\n     };\n \n     if ( geometry !== null ) {\n \n       const precisionPoints = 4;\n       const precision = Math.pow( 10, precisionPoints );\n       const thresholdDot = Math.cos( DEG2RAD * thresholdAngle );\n \n       const indexAttr = geometry.getIndex();\n       const positionAttr = geometry.getAttribute( 'position' );\n       const indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n \n       const indexArr = [ 0, 0, 0 ];\n       const vertKeys = [ 'a', 'b', 'c' ];\n       const hashes = new Array( 3 );\n \n       const edgeData = {};\n       const vertices = [];\n       for ( let i = 0; i < indexCount; i += 3 ) {\n \n         if ( indexAttr ) {\n \n           indexArr[ 0 ] = indexAttr.getX( i );\n           indexArr[ 1 ] = indexAttr.getX( i + 1 );\n           indexArr[ 2 ] = indexAttr.getX( i + 2 );\n \n         } else {\n \n           indexArr[ 0 ] = i;\n           indexArr[ 1 ] = i + 1;\n           indexArr[ 2 ] = i + 2;\n \n         }\n \n         const { a, b, c } = _triangle;\n         a.fromBufferAttribute( positionAttr, indexArr[ 0 ] );\n         b.fromBufferAttribute( positionAttr, indexArr[ 1 ] );\n         c.fromBufferAttribute( positionAttr, indexArr[ 2 ] );\n         _triangle.getNormal( _normal );\n \n         // create hashes for the edge from the vertices\n         hashes[ 0 ] = `${ Math.round( a.x * precision ) },${ Math.round( a.y * precision ) },${ Math.round( a.z * precision ) }`;\n         hashes[ 1 ] = `${ Math.round( b.x * precision ) },${ Math.round( b.y * precision ) },${ Math.round( b.z * precision ) }`;\n         hashes[ 2 ] = `${ Math.round( c.x * precision ) },${ Math.round( c.y * precision ) },${ Math.round( c.z * precision ) }`;\n \n         // skip degenerate triangles\n         if ( hashes[ 0 ] === hashes[ 1 ] || hashes[ 1 ] === hashes[ 2 ] || hashes[ 2 ] === hashes[ 0 ] ) {\n \n           continue;\n \n         }\n \n         // iterate over every edge\n         for ( let j = 0; j < 3; j ++ ) {\n \n           // get the first and next vertex making up the edge\n           const jNext = ( j + 1 ) % 3;\n           const vecHash0 = hashes[ j ];\n           const vecHash1 = hashes[ jNext ];\n           const v0 = _triangle[ vertKeys[ j ] ];\n           const v1 = _triangle[ vertKeys[ jNext ] ];\n \n           const hash = `${ vecHash0 }_${ vecHash1 }`;\n           const reverseHash = `${ vecHash1 }_${ vecHash0 }`;\n \n           if ( reverseHash in edgeData && edgeData[ reverseHash ] ) {\n \n             // if we found a sibling edge add it into the vertex array if\n             // it meets the angle threshold and delete the edge from the map.\n             if ( _normal.dot( edgeData[ reverseHash ].normal ) <= thresholdDot ) {\n \n               vertices.push( v0.x, v0.y, v0.z );\n               vertices.push( v1.x, v1.y, v1.z );\n \n             }\n \n             edgeData[ reverseHash ] = null;\n \n           } else if ( ! ( hash in edgeData ) ) {\n \n             // if we've already got an edge here then skip adding a new one\n             edgeData[ hash ] = {\n \n               index0: indexArr[ j ],\n               index1: indexArr[ jNext ],\n               normal: _normal.clone(),\n \n             };\n \n           }\n \n         }\n \n       }\n \n       // iterate over all remaining, unmatched edges and add them to the vertex array\n       for ( const key in edgeData ) {\n \n         if ( edgeData[ key ] ) {\n \n           const { index0, index1 } = edgeData[ key ];\n           _v0.fromBufferAttribute( positionAttr, index0 );\n           _v1$1.fromBufferAttribute( positionAttr, index1 );\n \n           vertices.push( _v0.x, _v0.y, _v0.z );\n           vertices.push( _v1$1.x, _v1$1.y, _v1$1.z );\n \n         }\n \n       }\n \n       this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n \n     }\n \n   }\n \n }\n \n /**\n  * Extensible curve object.\n  *\n  * Some common of curve methods:\n  * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n  * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n  * .getPoints(), .getSpacedPoints()\n  * .getLength()\n  * .updateArcLengths()\n  *\n  * This following curves inherit from THREE.Curve:\n  *\n  * -- 2D curves --\n  * THREE.ArcCurve\n  * THREE.CubicBezierCurve\n  * THREE.EllipseCurve\n  * THREE.LineCurve\n  * THREE.QuadraticBezierCurve\n  * THREE.SplineCurve\n  *\n  * -- 3D curves --\n  * THREE.CatmullRomCurve3\n  * THREE.CubicBezierCurve3\n  * THREE.LineCurve3\n  * THREE.QuadraticBezierCurve3\n  *\n  * A series of curves can be represented as a THREE.CurvePath.\n  *\n  **/\n \n class Curve {\n \n   constructor() {\n \n     this.type = 'Curve';\n \n     this.arcLengthDivisions = 200;\n \n   }\n \n   // Virtual base class method to overwrite and implement in subclasses\n   //\t- t [0 .. 1]\n \n   getPoint( /* t, optionalTarget */ ) {\n \n     console.warn( 'THREE.Curve: .getPoint() not implemented.' );\n     return null;\n \n   }\n \n   // Get point at relative position in curve according to arc length\n   // - u [0 .. 1]\n \n   getPointAt( u, optionalTarget ) {\n \n     const t = this.getUtoTmapping( u );\n     return this.getPoint( t, optionalTarget );\n \n   }\n \n   // Get sequence of points using getPoint( t )\n \n   getPoints( divisions = 5 ) {\n \n     const points = [];\n \n     for ( let d = 0; d <= divisions; d ++ ) {\n \n       points.push( this.getPoint( d / divisions ) );\n \n     }\n \n     return points;\n \n   }\n \n   // Get sequence of points using getPointAt( u )\n \n   getSpacedPoints( divisions = 5 ) {\n \n     const points = [];\n \n     for ( let d = 0; d <= divisions; d ++ ) {\n \n       points.push( this.getPointAt( d / divisions ) );\n \n     }\n \n     return points;\n \n   }\n \n   // Get total curve arc length\n \n   getLength() {\n \n     const lengths = this.getLengths();\n     return lengths[ lengths.length - 1 ];\n \n   }\n \n   // Get list of cumulative segment lengths\n \n   getLengths( divisions = this.arcLengthDivisions ) {\n \n     if ( this.cacheArcLengths &&\n       ( this.cacheArcLengths.length === divisions + 1 ) &&\n       ! this.needsUpdate ) {\n \n       return this.cacheArcLengths;\n \n     }\n \n     this.needsUpdate = false;\n \n     const cache = [];\n     let current, last = this.getPoint( 0 );\n     let sum = 0;\n \n     cache.push( 0 );\n \n     for ( let p = 1; p <= divisions; p ++ ) {\n \n       current = this.getPoint( p / divisions );\n       sum += current.distanceTo( last );\n       cache.push( sum );\n       last = current;\n \n     }\n \n     this.cacheArcLengths = cache;\n \n     return cache; // { sums: cache, sum: sum }; Sum is in the last element.\n \n   }\n \n   updateArcLengths() {\n \n     this.needsUpdate = true;\n     this.getLengths();\n \n   }\n \n   // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n \n   getUtoTmapping( u, distance ) {\n \n     const arcLengths = this.getLengths();\n \n     let i = 0;\n     const il = arcLengths.length;\n \n     let targetArcLength; // The targeted u distance value to get\n \n     if ( distance ) {\n \n       targetArcLength = distance;\n \n     } else {\n \n       targetArcLength = u * arcLengths[ il - 1 ];\n \n     }\n \n     // binary search for the index with largest value smaller than target u distance\n \n     let low = 0, high = il - 1, comparison;\n \n     while ( low <= high ) {\n \n       i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n \n       comparison = arcLengths[ i ] - targetArcLength;\n \n       if ( comparison < 0 ) {\n \n         low = i + 1;\n \n       } else if ( comparison > 0 ) {\n \n         high = i - 1;\n \n       } else {\n \n         high = i;\n         break;\n \n         // DONE\n \n       }\n \n     }\n \n     i = high;\n \n     if ( arcLengths[ i ] === targetArcLength ) {\n \n       return i / ( il - 1 );\n \n     }\n \n     // we could get finer grain at lengths, or use simple interpolation between two points\n \n     const lengthBefore = arcLengths[ i ];\n     const lengthAfter = arcLengths[ i + 1 ];\n \n     const segmentLength = lengthAfter - lengthBefore;\n \n     // determine where we are between the 'before' and 'after' points\n \n     const segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n \n     // add that fractional amount to t\n \n     const t = ( i + segmentFraction ) / ( il - 1 );\n \n     return t;\n \n   }\n \n   // Returns a unit vector tangent at t\n   // In case any sub curve does not implement its tangent derivation,\n   // 2 points a small delta apart will be used to find its gradient\n   // which seems to give a reasonable approximation\n \n   getTangent( t, optionalTarget ) {\n \n     const delta = 0.0001;\n     let t1 = t - delta;\n     let t2 = t + delta;\n \n     // Capping in case of danger\n \n     if ( t1 < 0 ) t1 = 0;\n     if ( t2 > 1 ) t2 = 1;\n \n     const pt1 = this.getPoint( t1 );\n     const pt2 = this.getPoint( t2 );\n \n     const tangent = optionalTarget || ( ( pt1.isVector2 ) ? new Vector2() : new Vector3() );\n \n     tangent.copy( pt2 ).sub( pt1 ).normalize();\n \n     return tangent;\n \n   }\n \n   getTangentAt( u, optionalTarget ) {\n \n     const t = this.getUtoTmapping( u );\n     return this.getTangent( t, optionalTarget );\n \n   }\n \n   computeFrenetFrames( segments, closed ) {\n \n     // see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n \n     const normal = new Vector3();\n \n     const tangents = [];\n     const normals = [];\n     const binormals = [];\n \n     const vec = new Vector3();\n     const mat = new Matrix4();\n \n     // compute the tangent vectors for each segment on the curve\n \n     for ( let i = 0; i <= segments; i ++ ) {\n \n       const u = i / segments;\n \n       tangents[ i ] = this.getTangentAt( u, new Vector3() );\n \n     }\n \n     // select an initial normal vector perpendicular to the first tangent vector,\n     // and in the direction of the minimum tangent xyz component\n \n     normals[ 0 ] = new Vector3();\n     binormals[ 0 ] = new Vector3();\n     let min = Number.MAX_VALUE;\n     const tx = Math.abs( tangents[ 0 ].x );\n     const ty = Math.abs( tangents[ 0 ].y );\n     const tz = Math.abs( tangents[ 0 ].z );\n \n     if ( tx <= min ) {\n \n       min = tx;\n       normal.set( 1, 0, 0 );\n \n     }\n \n     if ( ty <= min ) {\n \n       min = ty;\n       normal.set( 0, 1, 0 );\n \n     }\n \n     if ( tz <= min ) {\n \n       normal.set( 0, 0, 1 );\n \n     }\n \n     vec.crossVectors( tangents[ 0 ], normal ).normalize();\n \n     normals[ 0 ].crossVectors( tangents[ 0 ], vec );\n     binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n \n \n     // compute the slowly-varying normal and binormal vectors for each segment on the curve\n \n     for ( let i = 1; i <= segments; i ++ ) {\n \n       normals[ i ] = normals[ i - 1 ].clone();\n \n       binormals[ i ] = binormals[ i - 1 ].clone();\n \n       vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n \n       if ( vec.length() > Number.EPSILON ) {\n \n         vec.normalize();\n \n         const theta = Math.acos( clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n \n         normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n \n       }\n \n       binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n \n     }\n \n     // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n \n     if ( closed === true ) {\n \n       let theta = Math.acos( clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n       theta /= segments;\n \n       if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n \n         theta = - theta;\n \n       }\n \n       for ( let i = 1; i <= segments; i ++ ) {\n \n         // twist a little...\n         normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n         binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n \n       }\n \n     }\n \n     return {\n       tangents: tangents,\n       normals: normals,\n       binormals: binormals\n     };\n \n   }\n \n   clone() {\n \n     return new this.constructor().copy( this );\n \n   }\n \n   copy( source ) {\n \n     this.arcLengthDivisions = source.arcLengthDivisions;\n \n     return this;\n \n   }\n \n   toJSON() {\n \n     const data = {\n       metadata: {\n         version: 4.5,\n         type: 'Curve',\n         generator: 'Curve.toJSON'\n       }\n     };\n \n     data.arcLengthDivisions = this.arcLengthDivisions;\n     data.type = this.type;\n \n     return data;\n \n   }\n \n   fromJSON( json ) {\n \n     this.arcLengthDivisions = json.arcLengthDivisions;\n \n     return this;\n \n   }\n \n }\n \n class EllipseCurve extends Curve {\n \n   constructor( aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0 ) {\n \n     super();\n \n     this.type = 'EllipseCurve';\n \n     this.aX = aX;\n     this.aY = aY;\n \n     this.xRadius = xRadius;\n     this.yRadius = yRadius;\n \n     this.aStartAngle = aStartAngle;\n     this.aEndAngle = aEndAngle;\n \n     this.aClockwise = aClockwise;\n \n     this.aRotation = aRotation;\n \n   }\n \n   getPoint( t, optionalTarget ) {\n \n     const point = optionalTarget || new Vector2();\n \n     const twoPi = Math.PI * 2;\n     let deltaAngle = this.aEndAngle - this.aStartAngle;\n     const samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n \n     // ensures that deltaAngle is 0 .. 2 PI\n     while ( deltaAngle < 0 ) deltaAngle += twoPi;\n     while ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n \n     if ( deltaAngle < Number.EPSILON ) {\n \n       if ( samePoints ) {\n \n         deltaAngle = 0;\n \n       } else {\n \n         deltaAngle = twoPi;\n \n       }\n \n     }\n \n     if ( this.aClockwise === true && ! samePoints ) {\n \n       if ( deltaAngle === twoPi ) {\n \n         deltaAngle = - twoPi;\n \n       } else {\n \n         deltaAngle = deltaAngle - twoPi;\n \n       }\n \n     }\n \n     const angle = this.aStartAngle + t * deltaAngle;\n     let x = this.aX + this.xRadius * Math.cos( angle );\n     let y = this.aY + this.yRadius * Math.sin( angle );\n \n     if ( this.aRotation !== 0 ) {\n \n       const cos = Math.cos( this.aRotation );\n       const sin = Math.sin( this.aRotation );\n \n       const tx = x - this.aX;\n       const ty = y - this.aY;\n \n       // Rotate the point about the center of the ellipse.\n       x = tx * cos - ty * sin + this.aX;\n       y = tx * sin + ty * cos + this.aY;\n \n     }\n \n     return point.set( x, y );\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.aX = source.aX;\n     this.aY = source.aY;\n \n     this.xRadius = source.xRadius;\n     this.yRadius = source.yRadius;\n \n     this.aStartAngle = source.aStartAngle;\n     this.aEndAngle = source.aEndAngle;\n \n     this.aClockwise = source.aClockwise;\n \n     this.aRotation = source.aRotation;\n \n     return this;\n \n   }\n \n   toJSON() {\n \n     const data = super.toJSON();\n \n     data.aX = this.aX;\n     data.aY = this.aY;\n \n     data.xRadius = this.xRadius;\n     data.yRadius = this.yRadius;\n \n     data.aStartAngle = this.aStartAngle;\n     data.aEndAngle = this.aEndAngle;\n \n     data.aClockwise = this.aClockwise;\n \n     data.aRotation = this.aRotation;\n \n     return data;\n \n   }\n \n   fromJSON( json ) {\n \n     super.fromJSON( json );\n \n     this.aX = json.aX;\n     this.aY = json.aY;\n \n     this.xRadius = json.xRadius;\n     this.yRadius = json.yRadius;\n \n     this.aStartAngle = json.aStartAngle;\n     this.aEndAngle = json.aEndAngle;\n \n     this.aClockwise = json.aClockwise;\n \n     this.aRotation = json.aRotation;\n \n     return this;\n \n   }\n \n }\n \n EllipseCurve.prototype.isEllipseCurve = true;\n \n class ArcCurve extends EllipseCurve {\n \n   constructor( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n \n     super( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n \n     this.type = 'ArcCurve';\n \n   }\n \n }\n \n ArcCurve.prototype.isArcCurve = true;\n \n /**\n  * Centripetal CatmullRom Curve - which is useful for avoiding\n  * cusps and self-intersections in non-uniform catmull rom curves.\n  * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n  *\n  * curve.type accepts centripetal(default), chordal and catmullrom\n  * curve.tension is used for catmullrom which defaults to 0.5\n  */\n \n \n /*\n Based on an optimized c++ solution in\n  - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n  - http://ideone.com/NoEbVM\n \n This CubicPoly class could be used for reusing some variables and calculations,\n but for three.js curve use, it could be possible inlined and flatten into a single function call\n which can be placed in CurveUtils.\n */\n \n function CubicPoly() {\n \n   let c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n \n   /*\n    * Compute coefficients for a cubic polynomial\n    *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n    * such that\n    *   p(0) = x0, p(1) = x1\n    *  and\n    *   p'(0) = t0, p'(1) = t1.\n    */\n   function init( x0, x1, t0, t1 ) {\n \n     c0 = x0;\n     c1 = t0;\n     c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n     c3 = 2 * x0 - 2 * x1 + t0 + t1;\n \n   }\n \n   return {\n \n     initCatmullRom: function ( x0, x1, x2, x3, tension ) {\n \n       init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n \n     },\n \n     initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n \n       // compute tangents when parameterized in [t1,t2]\n       let t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n       let t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n \n       // rescale tangents for parametrization in [0,1]\n       t1 *= dt1;\n       t2 *= dt1;\n \n       init( x1, x2, t1, t2 );\n \n     },\n \n     calc: function ( t ) {\n \n       const t2 = t * t;\n       const t3 = t2 * t;\n       return c0 + c1 * t + c2 * t2 + c3 * t3;\n \n     }\n \n   };\n \n }\n \n //\n \n const tmp = new Vector3();\n const px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\n \n class CatmullRomCurve3 extends Curve {\n \n   constructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {\n \n     super();\n \n     this.type = 'CatmullRomCurve3';\n \n     this.points = points;\n     this.closed = closed;\n     this.curveType = curveType;\n     this.tension = tension;\n \n   }\n \n   getPoint( t, optionalTarget = new Vector3() ) {\n \n     const point = optionalTarget;\n \n     const points = this.points;\n     const l = points.length;\n \n     const p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n     let intPoint = Math.floor( p );\n     let weight = p - intPoint;\n \n     if ( this.closed ) {\n \n       intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n \n     } else if ( weight === 0 && intPoint === l - 1 ) {\n \n       intPoint = l - 2;\n       weight = 1;\n \n     }\n \n     let p0, p3; // 4 points (p1 & p2 defined below)\n \n     if ( this.closed || intPoint > 0 ) {\n \n       p0 = points[ ( intPoint - 1 ) % l ];\n \n     } else {\n \n       // extrapolate first point\n       tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n       p0 = tmp;\n \n     }\n \n     const p1 = points[ intPoint % l ];\n     const p2 = points[ ( intPoint + 1 ) % l ];\n \n     if ( this.closed || intPoint + 2 < l ) {\n \n       p3 = points[ ( intPoint + 2 ) % l ];\n \n     } else {\n \n       // extrapolate last point\n       tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n       p3 = tmp;\n \n     }\n \n     if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n \n       // init Centripetal / Chordal Catmull-Rom\n       const pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n       let dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n       let dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n       let dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n \n       // safety check for repeated points\n       if ( dt1 < 1e-4 ) dt1 = 1.0;\n       if ( dt0 < 1e-4 ) dt0 = dt1;\n       if ( dt2 < 1e-4 ) dt2 = dt1;\n \n       px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n       py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n       pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n \n     } else if ( this.curveType === 'catmullrom' ) {\n \n       px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n       py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n       pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n \n     }\n \n     point.set(\n       px.calc( weight ),\n       py.calc( weight ),\n       pz.calc( weight )\n     );\n \n     return point;\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.points = [];\n \n     for ( let i = 0, l = source.points.length; i < l; i ++ ) {\n \n       const point = source.points[ i ];\n \n       this.points.push( point.clone() );\n \n     }\n \n     this.closed = source.closed;\n     this.curveType = source.curveType;\n     this.tension = source.tension;\n \n     return this;\n \n   }\n \n   toJSON() {\n \n     const data = super.toJSON();\n \n     data.points = [];\n \n     for ( let i = 0, l = this.points.length; i < l; i ++ ) {\n \n       const point = this.points[ i ];\n       data.points.push( point.toArray() );\n \n     }\n \n     data.closed = this.closed;\n     data.curveType = this.curveType;\n     data.tension = this.tension;\n \n     return data;\n \n   }\n \n   fromJSON( json ) {\n \n     super.fromJSON( json );\n \n     this.points = [];\n \n     for ( let i = 0, l = json.points.length; i < l; i ++ ) {\n \n       const point = json.points[ i ];\n       this.points.push( new Vector3().fromArray( point ) );\n \n     }\n \n     this.closed = json.closed;\n     this.curveType = json.curveType;\n     this.tension = json.tension;\n \n     return this;\n \n   }\n \n }\n \n CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n \n /**\n  * Bezier Curves formulas obtained from\n  * http://en.wikipedia.org/wiki/Bézier_curve\n  */\n \n function CatmullRom( t, p0, p1, p2, p3 ) {\n \n   const v0 = ( p2 - p0 ) * 0.5;\n   const v1 = ( p3 - p1 ) * 0.5;\n   const t2 = t * t;\n   const t3 = t * t2;\n   return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n \n }\n \n //\n \n function QuadraticBezierP0( t, p ) {\n \n   const k = 1 - t;\n   return k * k * p;\n \n }\n \n function QuadraticBezierP1( t, p ) {\n \n   return 2 * ( 1 - t ) * t * p;\n \n }\n \n function QuadraticBezierP2( t, p ) {\n \n   return t * t * p;\n \n }\n \n function QuadraticBezier( t, p0, p1, p2 ) {\n \n   return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n     QuadraticBezierP2( t, p2 );\n \n }\n \n //\n \n function CubicBezierP0( t, p ) {\n \n   const k = 1 - t;\n   return k * k * k * p;\n \n }\n \n function CubicBezierP1( t, p ) {\n \n   const k = 1 - t;\n   return 3 * k * k * t * p;\n \n }\n \n function CubicBezierP2( t, p ) {\n \n   return 3 * ( 1 - t ) * t * t * p;\n \n }\n \n function CubicBezierP3( t, p ) {\n \n   return t * t * t * p;\n \n }\n \n function CubicBezier( t, p0, p1, p2, p3 ) {\n \n   return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n     CubicBezierP3( t, p3 );\n \n }\n \n class CubicBezierCurve extends Curve {\n \n   constructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2() ) {\n \n     super();\n \n     this.type = 'CubicBezierCurve';\n \n     this.v0 = v0;\n     this.v1 = v1;\n     this.v2 = v2;\n     this.v3 = v3;\n \n   }\n \n   getPoint( t, optionalTarget = new Vector2() ) {\n \n     const point = optionalTarget;\n \n     const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n \n     point.set(\n       CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n       CubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n     );\n \n     return point;\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.v0.copy( source.v0 );\n     this.v1.copy( source.v1 );\n     this.v2.copy( source.v2 );\n     this.v3.copy( source.v3 );\n \n     return this;\n \n   }\n \n   toJSON() {\n \n     const data = super.toJSON();\n \n     data.v0 = this.v0.toArray();\n     data.v1 = this.v1.toArray();\n     data.v2 = this.v2.toArray();\n     data.v3 = this.v3.toArray();\n \n     return data;\n \n   }\n \n   fromJSON( json ) {\n \n     super.fromJSON( json );\n \n     this.v0.fromArray( json.v0 );\n     this.v1.fromArray( json.v1 );\n     this.v2.fromArray( json.v2 );\n     this.v3.fromArray( json.v3 );\n \n     return this;\n \n   }\n \n }\n \n CubicBezierCurve.prototype.isCubicBezierCurve = true;\n \n class CubicBezierCurve3 extends Curve {\n \n   constructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3() ) {\n \n     super();\n \n     this.type = 'CubicBezierCurve3';\n \n     this.v0 = v0;\n     this.v1 = v1;\n     this.v2 = v2;\n     this.v3 = v3;\n \n   }\n \n   getPoint( t, optionalTarget = new Vector3() ) {\n \n     const point = optionalTarget;\n \n     const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n \n     point.set(\n       CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n       CubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n       CubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n     );\n \n     return point;\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.v0.copy( source.v0 );\n     this.v1.copy( source.v1 );\n     this.v2.copy( source.v2 );\n     this.v3.copy( source.v3 );\n \n     return this;\n \n   }\n \n   toJSON() {\n \n     const data = super.toJSON();\n \n     data.v0 = this.v0.toArray();\n     data.v1 = this.v1.toArray();\n     data.v2 = this.v2.toArray();\n     data.v3 = this.v3.toArray();\n \n     return data;\n \n   }\n \n   fromJSON( json ) {\n \n     super.fromJSON( json );\n \n     this.v0.fromArray( json.v0 );\n     this.v1.fromArray( json.v1 );\n     this.v2.fromArray( json.v2 );\n     this.v3.fromArray( json.v3 );\n \n     return this;\n \n   }\n \n }\n \n CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n \n class LineCurve extends Curve {\n \n   constructor( v1 = new Vector2(), v2 = new Vector2() ) {\n \n     super();\n \n     this.type = 'LineCurve';\n \n     this.v1 = v1;\n     this.v2 = v2;\n \n   }\n \n   getPoint( t, optionalTarget = new Vector2() ) {\n \n     const point = optionalTarget;\n \n     if ( t === 1 ) {\n \n       point.copy( this.v2 );\n \n     } else {\n \n       point.copy( this.v2 ).sub( this.v1 );\n       point.multiplyScalar( t ).add( this.v1 );\n \n     }\n \n     return point;\n \n   }\n \n   // Line curve is linear, so we can overwrite default getPointAt\n   getPointAt( u, optionalTarget ) {\n \n     return this.getPoint( u, optionalTarget );\n \n   }\n \n   getTangent( t, optionalTarget ) {\n \n     const tangent = optionalTarget || new Vector2();\n \n     tangent.copy( this.v2 ).sub( this.v1 ).normalize();\n \n     return tangent;\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.v1.copy( source.v1 );\n     this.v2.copy( source.v2 );\n \n     return this;\n \n   }\n \n   toJSON() {\n \n     const data = super.toJSON();\n \n     data.v1 = this.v1.toArray();\n     data.v2 = this.v2.toArray();\n \n     return data;\n \n   }\n \n   fromJSON( json ) {\n \n     super.fromJSON( json );\n \n     this.v1.fromArray( json.v1 );\n     this.v2.fromArray( json.v2 );\n \n     return this;\n \n   }\n \n }\n \n LineCurve.prototype.isLineCurve = true;\n \n class LineCurve3 extends Curve {\n \n   constructor( v1 = new Vector3(), v2 = new Vector3() ) {\n \n     super();\n \n     this.type = 'LineCurve3';\n     this.isLineCurve3 = true;\n \n     this.v1 = v1;\n     this.v2 = v2;\n \n   }\n   getPoint( t, optionalTarget = new Vector3() ) {\n \n     const point = optionalTarget;\n \n     if ( t === 1 ) {\n \n       point.copy( this.v2 );\n \n     } else {\n \n       point.copy( this.v2 ).sub( this.v1 );\n       point.multiplyScalar( t ).add( this.v1 );\n \n     }\n \n     return point;\n \n   }\n   // Line curve is linear, so we can overwrite default getPointAt\n   getPointAt( u, optionalTarget ) {\n \n     return this.getPoint( u, optionalTarget );\n \n   }\n   copy( source ) {\n \n     super.copy( source );\n \n     this.v1.copy( source.v1 );\n     this.v2.copy( source.v2 );\n \n     return this;\n \n   }\n   toJSON() {\n \n     const data = super.toJSON();\n \n     data.v1 = this.v1.toArray();\n     data.v2 = this.v2.toArray();\n \n     return data;\n \n   }\n   fromJSON( json ) {\n \n     super.fromJSON( json );\n \n     this.v1.fromArray( json.v1 );\n     this.v2.fromArray( json.v2 );\n \n     return this;\n \n   }\n \n }\n \n class QuadraticBezierCurve extends Curve {\n \n   constructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2() ) {\n \n     super();\n \n     this.type = 'QuadraticBezierCurve';\n \n     this.v0 = v0;\n     this.v1 = v1;\n     this.v2 = v2;\n \n   }\n \n   getPoint( t, optionalTarget = new Vector2() ) {\n \n     const point = optionalTarget;\n \n     const v0 = this.v0, v1 = this.v1, v2 = this.v2;\n \n     point.set(\n       QuadraticBezier( t, v0.x, v1.x, v2.x ),\n       QuadraticBezier( t, v0.y, v1.y, v2.y )\n     );\n \n     return point;\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.v0.copy( source.v0 );\n     this.v1.copy( source.v1 );\n     this.v2.copy( source.v2 );\n \n     return this;\n \n   }\n \n   toJSON() {\n \n     const data = super.toJSON();\n \n     data.v0 = this.v0.toArray();\n     data.v1 = this.v1.toArray();\n     data.v2 = this.v2.toArray();\n \n     return data;\n \n   }\n \n   fromJSON( json ) {\n \n     super.fromJSON( json );\n \n     this.v0.fromArray( json.v0 );\n     this.v1.fromArray( json.v1 );\n     this.v2.fromArray( json.v2 );\n \n     return this;\n \n   }\n \n }\n \n QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n \n class QuadraticBezierCurve3 extends Curve {\n \n   constructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3() ) {\n \n     super();\n \n     this.type = 'QuadraticBezierCurve3';\n \n     this.v0 = v0;\n     this.v1 = v1;\n     this.v2 = v2;\n \n   }\n \n   getPoint( t, optionalTarget = new Vector3() ) {\n \n     const point = optionalTarget;\n \n     const v0 = this.v0, v1 = this.v1, v2 = this.v2;\n \n     point.set(\n       QuadraticBezier( t, v0.x, v1.x, v2.x ),\n       QuadraticBezier( t, v0.y, v1.y, v2.y ),\n       QuadraticBezier( t, v0.z, v1.z, v2.z )\n     );\n \n     return point;\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.v0.copy( source.v0 );\n     this.v1.copy( source.v1 );\n     this.v2.copy( source.v2 );\n \n     return this;\n \n   }\n \n   toJSON() {\n \n     const data = super.toJSON();\n \n     data.v0 = this.v0.toArray();\n     data.v1 = this.v1.toArray();\n     data.v2 = this.v2.toArray();\n \n     return data;\n \n   }\n \n   fromJSON( json ) {\n \n     super.fromJSON( json );\n \n     this.v0.fromArray( json.v0 );\n     this.v1.fromArray( json.v1 );\n     this.v2.fromArray( json.v2 );\n \n     return this;\n \n   }\n \n }\n \n QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n \n class SplineCurve extends Curve {\n \n   constructor( points = [] ) {\n \n     super();\n \n     this.type = 'SplineCurve';\n \n     this.points = points;\n \n   }\n \n   getPoint( t, optionalTarget = new Vector2() ) {\n \n     const point = optionalTarget;\n \n     const points = this.points;\n     const p = ( points.length - 1 ) * t;\n \n     const intPoint = Math.floor( p );\n     const weight = p - intPoint;\n \n     const p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n     const p1 = points[ intPoint ];\n     const p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n     const p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n \n     point.set(\n       CatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n       CatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n     );\n \n     return point;\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.points = [];\n \n     for ( let i = 0, l = source.points.length; i < l; i ++ ) {\n \n       const point = source.points[ i ];\n \n       this.points.push( point.clone() );\n \n     }\n \n     return this;\n \n   }\n \n   toJSON() {\n \n     const data = super.toJSON();\n \n     data.points = [];\n \n     for ( let i = 0, l = this.points.length; i < l; i ++ ) {\n \n       const point = this.points[ i ];\n       data.points.push( point.toArray() );\n \n     }\n \n     return data;\n \n   }\n \n   fromJSON( json ) {\n \n     super.fromJSON( json );\n \n     this.points = [];\n \n     for ( let i = 0, l = json.points.length; i < l; i ++ ) {\n \n       const point = json.points[ i ];\n       this.points.push( new Vector2().fromArray( point ) );\n \n     }\n \n     return this;\n \n   }\n \n }\n \n SplineCurve.prototype.isSplineCurve = true;\n \n var Curves = /*#__PURE__*/Object.freeze({\n   __proto__: null,\n   ArcCurve: ArcCurve,\n   CatmullRomCurve3: CatmullRomCurve3,\n   CubicBezierCurve: CubicBezierCurve,\n   CubicBezierCurve3: CubicBezierCurve3,\n   EllipseCurve: EllipseCurve,\n   LineCurve: LineCurve,\n   LineCurve3: LineCurve3,\n   QuadraticBezierCurve: QuadraticBezierCurve,\n   QuadraticBezierCurve3: QuadraticBezierCurve3,\n   SplineCurve: SplineCurve\n });\n \n /**************************************************************\n  *\tCurved Path - a curve path is simply a array of connected\n  *  curves, but retains the api of a curve\n  **************************************************************/\n \n class CurvePath extends Curve {\n \n   constructor() {\n \n     super();\n \n     this.type = 'CurvePath';\n \n     this.curves = [];\n     this.autoClose = false; // Automatically closes the path\n \n   }\n \n   add( curve ) {\n \n     this.curves.push( curve );\n \n   }\n \n   closePath() {\n \n     // Add a line curve if start and end of lines are not connected\n     const startPoint = this.curves[ 0 ].getPoint( 0 );\n     const endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n \n     if ( ! startPoint.equals( endPoint ) ) {\n \n       this.curves.push( new LineCurve( endPoint, startPoint ) );\n \n     }\n \n   }\n \n   // To get accurate point with reference to\n   // entire path distance at time t,\n   // following has to be done:\n \n   // 1. Length of each sub path have to be known\n   // 2. Locate and identify type of curve\n   // 3. Get t for the curve\n   // 4. Return curve.getPointAt(t')\n \n   getPoint( t, optionalTarget ) {\n \n     const d = t * this.getLength();\n     const curveLengths = this.getCurveLengths();\n     let i = 0;\n \n     // To think about boundaries points.\n \n     while ( i < curveLengths.length ) {\n \n       if ( curveLengths[ i ] >= d ) {\n \n         const diff = curveLengths[ i ] - d;\n         const curve = this.curves[ i ];\n \n         const segmentLength = curve.getLength();\n         const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n \n         return curve.getPointAt( u, optionalTarget );\n \n       }\n \n       i ++;\n \n     }\n \n     return null;\n \n     // loop where sum != 0, sum > d , sum+1 <d\n \n   }\n \n   // We cannot use the default THREE.Curve getPoint() with getLength() because in\n   // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n   // getPoint() depends on getLength\n \n   getLength() {\n \n     const lens = this.getCurveLengths();\n     return lens[ lens.length - 1 ];\n \n   }\n \n   // cacheLengths must be recalculated.\n   updateArcLengths() {\n \n     this.needsUpdate = true;\n     this.cacheLengths = null;\n     this.getCurveLengths();\n \n   }\n \n   // Compute lengths and cache them\n   // We cannot overwrite getLengths() because UtoT mapping uses it.\n \n   getCurveLengths() {\n \n     // We use cache values if curves and cache array are same length\n \n     if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n \n       return this.cacheLengths;\n \n     }\n \n     // Get length of sub-curve\n     // Push sums into cached array\n \n     const lengths = [];\n     let sums = 0;\n \n     for ( let i = 0, l = this.curves.length; i < l; i ++ ) {\n \n       sums += this.curves[ i ].getLength();\n       lengths.push( sums );\n \n     }\n \n     this.cacheLengths = lengths;\n \n     return lengths;\n \n   }\n \n   getSpacedPoints( divisions = 40 ) {\n \n     const points = [];\n \n     for ( let i = 0; i <= divisions; i ++ ) {\n \n       points.push( this.getPoint( i / divisions ) );\n \n     }\n \n     if ( this.autoClose ) {\n \n       points.push( points[ 0 ] );\n \n     }\n \n     return points;\n \n   }\n \n   getPoints( divisions = 12 ) {\n \n     const points = [];\n     let last;\n \n     for ( let i = 0, curves = this.curves; i < curves.length; i ++ ) {\n \n       const curve = curves[ i ];\n       const resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\n         : ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1\n           : ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\n             : divisions;\n \n       const pts = curve.getPoints( resolution );\n \n       for ( let j = 0; j < pts.length; j ++ ) {\n \n         const point = pts[ j ];\n \n         if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n \n         points.push( point );\n         last = point;\n \n       }\n \n     }\n \n     if ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n \n       points.push( points[ 0 ] );\n \n     }\n \n     return points;\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.curves = [];\n \n     for ( let i = 0, l = source.curves.length; i < l; i ++ ) {\n \n       const curve = source.curves[ i ];\n \n       this.curves.push( curve.clone() );\n \n     }\n \n     this.autoClose = source.autoClose;\n \n     return this;\n \n   }\n \n   toJSON() {\n \n     const data = super.toJSON();\n \n     data.autoClose = this.autoClose;\n     data.curves = [];\n \n     for ( let i = 0, l = this.curves.length; i < l; i ++ ) {\n \n       const curve = this.curves[ i ];\n       data.curves.push( curve.toJSON() );\n \n     }\n \n     return data;\n \n   }\n \n   fromJSON( json ) {\n \n     super.fromJSON( json );\n \n     this.autoClose = json.autoClose;\n     this.curves = [];\n \n     for ( let i = 0, l = json.curves.length; i < l; i ++ ) {\n \n       const curve = json.curves[ i ];\n       this.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n \n     }\n \n     return this;\n \n   }\n \n }\n \n class Path extends CurvePath {\n \n   constructor( points ) {\n \n     super();\n     this.type = 'Path';\n \n     this.currentPoint = new Vector2();\n \n     if ( points ) {\n \n       this.setFromPoints( points );\n \n     }\n \n   }\n \n   setFromPoints( points ) {\n \n     this.moveTo( points[ 0 ].x, points[ 0 ].y );\n \n     for ( let i = 1, l = points.length; i < l; i ++ ) {\n \n       this.lineTo( points[ i ].x, points[ i ].y );\n \n     }\n \n     return this;\n \n   }\n \n   moveTo( x, y ) {\n \n     this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n \n     return this;\n \n   }\n \n   lineTo( x, y ) {\n \n     const curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n     this.curves.push( curve );\n \n     this.currentPoint.set( x, y );\n \n     return this;\n \n   }\n \n   quadraticCurveTo( aCPx, aCPy, aX, aY ) {\n \n     const curve = new QuadraticBezierCurve(\n       this.currentPoint.clone(),\n       new Vector2( aCPx, aCPy ),\n       new Vector2( aX, aY )\n     );\n \n     this.curves.push( curve );\n \n     this.currentPoint.set( aX, aY );\n \n     return this;\n \n   }\n \n   bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n \n     const curve = new CubicBezierCurve(\n       this.currentPoint.clone(),\n       new Vector2( aCP1x, aCP1y ),\n       new Vector2( aCP2x, aCP2y ),\n       new Vector2( aX, aY )\n     );\n \n     this.curves.push( curve );\n \n     this.currentPoint.set( aX, aY );\n \n     return this;\n \n   }\n \n   splineThru( pts /*Array of Vector*/ ) {\n \n     const npts = [ this.currentPoint.clone() ].concat( pts );\n \n     const curve = new SplineCurve( npts );\n     this.curves.push( curve );\n \n     this.currentPoint.copy( pts[ pts.length - 1 ] );\n \n     return this;\n \n   }\n \n   arc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n \n     const x0 = this.currentPoint.x;\n     const y0 = this.currentPoint.y;\n \n     this.absarc( aX + x0, aY + y0, aRadius,\n       aStartAngle, aEndAngle, aClockwise );\n \n     return this;\n \n   }\n \n   absarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n \n     this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n \n     return this;\n \n   }\n \n   ellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n \n     const x0 = this.currentPoint.x;\n     const y0 = this.currentPoint.y;\n \n     this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n \n     return this;\n \n   }\n \n   absellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n \n     const curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n \n     if ( this.curves.length > 0 ) {\n \n       // if a previous curve is present, attempt to join\n       const firstPoint = curve.getPoint( 0 );\n \n       if ( ! firstPoint.equals( this.currentPoint ) ) {\n \n         this.lineTo( firstPoint.x, firstPoint.y );\n \n       }\n \n     }\n \n     this.curves.push( curve );\n \n     const lastPoint = curve.getPoint( 1 );\n     this.currentPoint.copy( lastPoint );\n \n     return this;\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.currentPoint.copy( source.currentPoint );\n \n     return this;\n \n   }\n \n   toJSON() {\n \n     const data = super.toJSON();\n \n     data.currentPoint = this.currentPoint.toArray();\n \n     return data;\n \n   }\n \n   fromJSON( json ) {\n \n     super.fromJSON( json );\n \n     this.currentPoint.fromArray( json.currentPoint );\n \n     return this;\n \n   }\n \n }\n \n class Shape extends Path {\n \n   constructor( points ) {\n \n     super( points );\n \n     this.uuid = generateUUID();\n \n     this.type = 'Shape';\n \n     this.holes = [];\n \n   }\n \n   getPointsHoles( divisions ) {\n \n     const holesPts = [];\n \n     for ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n \n       holesPts[ i ] = this.holes[ i ].getPoints( divisions );\n \n     }\n \n     return holesPts;\n \n   }\n \n   // get points of shape and holes (keypoints based on segments parameter)\n \n   extractPoints( divisions ) {\n \n     return {\n \n       shape: this.getPoints( divisions ),\n       holes: this.getPointsHoles( divisions )\n \n     };\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.holes = [];\n \n     for ( let i = 0, l = source.holes.length; i < l; i ++ ) {\n \n       const hole = source.holes[ i ];\n \n       this.holes.push( hole.clone() );\n \n     }\n \n     return this;\n \n   }\n \n   toJSON() {\n \n     const data = super.toJSON();\n \n     data.uuid = this.uuid;\n     data.holes = [];\n \n     for ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n \n       const hole = this.holes[ i ];\n       data.holes.push( hole.toJSON() );\n \n     }\n \n     return data;\n \n   }\n \n   fromJSON( json ) {\n \n     super.fromJSON( json );\n \n     this.uuid = json.uuid;\n     this.holes = [];\n \n     for ( let i = 0, l = json.holes.length; i < l; i ++ ) {\n \n       const hole = json.holes[ i ];\n       this.holes.push( new Path().fromJSON( hole ) );\n \n     }\n \n     return this;\n \n   }\n \n }\n \n /**\n  * Port from https://github.com/mapbox/earcut (v2.2.2)\n  */\n \n const Earcut = {\n \n   triangulate: function ( data, holeIndices, dim = 2 ) {\n \n     const hasHoles = holeIndices && holeIndices.length;\n     const outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length;\n     let outerNode = linkedList( data, 0, outerLen, dim, true );\n     const triangles = [];\n \n     if ( ! outerNode || outerNode.next === outerNode.prev ) return triangles;\n \n     let minX, minY, maxX, maxY, x, y, invSize;\n \n     if ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );\n \n     // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n     if ( data.length > 80 * dim ) {\n \n       minX = maxX = data[ 0 ];\n       minY = maxY = data[ 1 ];\n \n       for ( let i = dim; i < outerLen; i += dim ) {\n \n         x = data[ i ];\n         y = data[ i + 1 ];\n         if ( x < minX ) minX = x;\n         if ( y < minY ) minY = y;\n         if ( x > maxX ) maxX = x;\n         if ( y > maxY ) maxY = y;\n \n       }\n \n       // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n       invSize = Math.max( maxX - minX, maxY - minY );\n       invSize = invSize !== 0 ? 1 / invSize : 0;\n \n     }\n \n     earcutLinked( outerNode, triangles, dim, minX, minY, invSize );\n \n     return triangles;\n \n   }\n \n };\n \n // create a circular doubly linked list from polygon points in the specified winding order\n function linkedList( data, start, end, dim, clockwise ) {\n \n   let i, last;\n \n   if ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n \n     for ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n \n   } else {\n \n     for ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n \n   }\n \n   if ( last && equals( last, last.next ) ) {\n \n     removeNode( last );\n     last = last.next;\n \n   }\n \n   return last;\n \n }\n \n // eliminate colinear or duplicate points\n function filterPoints( start, end ) {\n \n   if ( ! start ) return start;\n   if ( ! end ) end = start;\n \n   let p = start,\n     again;\n   do {\n \n     again = false;\n \n     if ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n \n       removeNode( p );\n       p = end = p.prev;\n       if ( p === p.next ) break;\n       again = true;\n \n     } else {\n \n       p = p.next;\n \n     }\n \n   } while ( again || p !== end );\n \n   return end;\n \n }\n \n // main ear slicing loop which triangulates a polygon (given as a linked list)\n function earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n \n   if ( ! ear ) return;\n \n   // interlink polygon nodes in z-order\n   if ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );\n \n   let stop = ear,\n     prev, next;\n \n   // iterate through ears, slicing them one by one\n   while ( ear.prev !== ear.next ) {\n \n     prev = ear.prev;\n     next = ear.next;\n \n     if ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n \n       // cut off the triangle\n       triangles.push( prev.i / dim );\n       triangles.push( ear.i / dim );\n       triangles.push( next.i / dim );\n \n       removeNode( ear );\n \n       // skipping the next vertex leads to less sliver triangles\n       ear = next.next;\n       stop = next.next;\n \n       continue;\n \n     }\n \n     ear = next;\n \n     // if we looped through the whole remaining polygon and can't find any more ears\n     if ( ear === stop ) {\n \n       // try filtering points and slicing again\n       if ( ! pass ) {\n \n         earcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n \n         // if this didn't work, try curing all small self-intersections locally\n \n       } else if ( pass === 1 ) {\n \n         ear = cureLocalIntersections( filterPoints( ear ), triangles, dim );\n         earcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n \n         // as a last resort, try splitting the remaining polygon into two\n \n       } else if ( pass === 2 ) {\n \n         splitEarcut( ear, triangles, dim, minX, minY, invSize );\n \n       }\n \n       break;\n \n     }\n \n   }\n \n }\n \n // check whether a polygon node forms a valid ear with adjacent nodes\n function isEar( ear ) {\n \n   const a = ear.prev,\n     b = ear,\n     c = ear.next;\n \n   if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n \n   // now make sure we don't have other points inside the potential ear\n   let p = ear.next.next;\n \n   while ( p !== ear.prev ) {\n \n     if ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n       area( p.prev, p, p.next ) >= 0 ) return false;\n     p = p.next;\n \n   }\n \n   return true;\n \n }\n \n function isEarHashed( ear, minX, minY, invSize ) {\n \n   const a = ear.prev,\n     b = ear,\n     c = ear.next;\n \n   if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n \n   // triangle bbox; min & max are calculated like this for speed\n   const minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\n     minTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\n     maxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\n     maxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\n \n   // z-order range for the current triangle bbox;\n   const minZ = zOrder( minTX, minTY, minX, minY, invSize ),\n     maxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\n \n   let p = ear.prevZ,\n     n = ear.nextZ;\n \n   // look for points inside the triangle in both directions\n   while ( p && p.z >= minZ && n && n.z <= maxZ ) {\n \n     if ( p !== ear.prev && p !== ear.next &&\n       pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n       area( p.prev, p, p.next ) >= 0 ) return false;\n     p = p.prevZ;\n \n     if ( n !== ear.prev && n !== ear.next &&\n       pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n       area( n.prev, n, n.next ) >= 0 ) return false;\n     n = n.nextZ;\n \n   }\n \n   // look for remaining points in decreasing z-order\n   while ( p && p.z >= minZ ) {\n \n     if ( p !== ear.prev && p !== ear.next &&\n       pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n       area( p.prev, p, p.next ) >= 0 ) return false;\n     p = p.prevZ;\n \n   }\n \n   // look for remaining points in increasing z-order\n   while ( n && n.z <= maxZ ) {\n \n     if ( n !== ear.prev && n !== ear.next &&\n       pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n       area( n.prev, n, n.next ) >= 0 ) return false;\n     n = n.nextZ;\n \n   }\n \n   return true;\n \n }\n \n // go through all polygon nodes and cure small local self-intersections\n function cureLocalIntersections( start, triangles, dim ) {\n \n   let p = start;\n   do {\n \n     const a = p.prev,\n       b = p.next.next;\n \n     if ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n \n       triangles.push( a.i / dim );\n       triangles.push( p.i / dim );\n       triangles.push( b.i / dim );\n \n       // remove two nodes involved\n       removeNode( p );\n       removeNode( p.next );\n \n       p = start = b;\n \n     }\n \n     p = p.next;\n \n   } while ( p !== start );\n \n   return filterPoints( p );\n \n }\n \n // try splitting polygon into two and triangulate them independently\n function splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n \n   // look for a valid diagonal that divides the polygon into two\n   let a = start;\n   do {\n \n     let b = a.next.next;\n     while ( b !== a.prev ) {\n \n       if ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n \n         // split the polygon in two by the diagonal\n         let c = splitPolygon( a, b );\n \n         // filter colinear points around the cuts\n         a = filterPoints( a, a.next );\n         c = filterPoints( c, c.next );\n \n         // run earcut on each half\n         earcutLinked( a, triangles, dim, minX, minY, invSize );\n         earcutLinked( c, triangles, dim, minX, minY, invSize );\n         return;\n \n       }\n \n       b = b.next;\n \n     }\n \n     a = a.next;\n \n   } while ( a !== start );\n \n }\n \n // link every hole into the outer loop, producing a single-ring polygon without holes\n function eliminateHoles( data, holeIndices, outerNode, dim ) {\n \n   const queue = [];\n   let i, len, start, end, list;\n \n   for ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n \n     start = holeIndices[ i ] * dim;\n     end = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n     list = linkedList( data, start, end, dim, false );\n     if ( list === list.next ) list.steiner = true;\n     queue.push( getLeftmost( list ) );\n \n   }\n \n   queue.sort( compareX );\n \n   // process holes from left to right\n   for ( i = 0; i < queue.length; i ++ ) {\n \n     eliminateHole( queue[ i ], outerNode );\n     outerNode = filterPoints( outerNode, outerNode.next );\n \n   }\n \n   return outerNode;\n \n }\n \n function compareX( a, b ) {\n \n   return a.x - b.x;\n \n }\n \n // find a bridge between vertices that connects hole with an outer ring and and link it\n function eliminateHole( hole, outerNode ) {\n \n   outerNode = findHoleBridge( hole, outerNode );\n   if ( outerNode ) {\n \n     const b = splitPolygon( outerNode, hole );\n \n     // filter collinear points around the cuts\n     filterPoints( outerNode, outerNode.next );\n     filterPoints( b, b.next );\n \n   }\n \n }\n \n // David Eberly's algorithm for finding a bridge between hole and outer polygon\n function findHoleBridge( hole, outerNode ) {\n \n   let p = outerNode;\n   const hx = hole.x;\n   const hy = hole.y;\n   let qx = - Infinity, m;\n \n   // find a segment intersected by a ray from the hole's leftmost point to the left;\n   // segment's endpoint with lesser x will be potential connection point\n   do {\n \n     if ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n \n       const x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n       if ( x <= hx && x > qx ) {\n \n         qx = x;\n         if ( x === hx ) {\n \n           if ( hy === p.y ) return p;\n           if ( hy === p.next.y ) return p.next;\n \n         }\n \n         m = p.x < p.next.x ? p : p.next;\n \n       }\n \n     }\n \n     p = p.next;\n \n   } while ( p !== outerNode );\n \n   if ( ! m ) return null;\n \n   if ( hx === qx ) return m; // hole touches outer segment; pick leftmost endpoint\n \n   // look for points inside the triangle of hole point, segment intersection and endpoint;\n   // if there are no points found, we have a valid connection;\n   // otherwise choose the point of the minimum angle with the ray as connection point\n \n   const stop = m,\n     mx = m.x,\n     my = m.y;\n   let tanMin = Infinity, tan;\n \n   p = m;\n \n   do {\n \n     if ( hx >= p.x && p.x >= mx && hx !== p.x &&\n         pointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n \n       tan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n \n       if ( locallyInside( p, hole ) && ( tan < tanMin || ( tan === tanMin && ( p.x > m.x || ( p.x === m.x && sectorContainsSector( m, p ) ) ) ) ) ) {\n \n         m = p;\n         tanMin = tan;\n \n       }\n \n     }\n \n     p = p.next;\n \n   } while ( p !== stop );\n \n   return m;\n \n }\n \n // whether sector in vertex m contains sector in vertex p in the same coordinates\n function sectorContainsSector( m, p ) {\n \n   return area( m.prev, m, p.prev ) < 0 && area( p.next, m, m.next ) < 0;\n \n }\n \n // interlink polygon nodes in z-order\n function indexCurve( start, minX, minY, invSize ) {\n \n   let p = start;\n   do {\n \n     if ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );\n     p.prevZ = p.prev;\n     p.nextZ = p.next;\n     p = p.next;\n \n   } while ( p !== start );\n \n   p.prevZ.nextZ = null;\n   p.prevZ = null;\n \n   sortLinked( p );\n \n }\n \n // Simon Tatham's linked list merge sort algorithm\n // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n function sortLinked( list ) {\n \n   let i, p, q, e, tail, numMerges, pSize, qSize,\n     inSize = 1;\n \n   do {\n \n     p = list;\n     list = null;\n     tail = null;\n     numMerges = 0;\n \n     while ( p ) {\n \n       numMerges ++;\n       q = p;\n       pSize = 0;\n       for ( i = 0; i < inSize; i ++ ) {\n \n         pSize ++;\n         q = q.nextZ;\n         if ( ! q ) break;\n \n       }\n \n       qSize = inSize;\n \n       while ( pSize > 0 || ( qSize > 0 && q ) ) {\n \n         if ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n \n           e = p;\n           p = p.nextZ;\n           pSize --;\n \n         } else {\n \n           e = q;\n           q = q.nextZ;\n           qSize --;\n \n         }\n \n         if ( tail ) tail.nextZ = e;\n         else list = e;\n \n         e.prevZ = tail;\n         tail = e;\n \n       }\n \n       p = q;\n \n     }\n \n     tail.nextZ = null;\n     inSize *= 2;\n \n   } while ( numMerges > 1 );\n \n   return list;\n \n }\n \n // z-order of a point given coords and inverse of the longer side of data bbox\n function zOrder( x, y, minX, minY, invSize ) {\n \n   // coords are transformed into non-negative 15-bit integer range\n   x = 32767 * ( x - minX ) * invSize;\n   y = 32767 * ( y - minY ) * invSize;\n \n   x = ( x | ( x << 8 ) ) & 0x00FF00FF;\n   x = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n   x = ( x | ( x << 2 ) ) & 0x33333333;\n   x = ( x | ( x << 1 ) ) & 0x55555555;\n \n   y = ( y | ( y << 8 ) ) & 0x00FF00FF;\n   y = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n   y = ( y | ( y << 2 ) ) & 0x33333333;\n   y = ( y | ( y << 1 ) ) & 0x55555555;\n \n   return x | ( y << 1 );\n \n }\n \n // find the leftmost node of a polygon ring\n function getLeftmost( start ) {\n \n   let p = start,\n     leftmost = start;\n   do {\n \n     if ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) leftmost = p;\n     p = p.next;\n \n   } while ( p !== start );\n \n   return leftmost;\n \n }\n \n // check if a point lies within a convex triangle\n function pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n \n   return ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\n       ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\n       ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\n \n }\n \n // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n function isValidDiagonal( a, b ) {\n \n   return a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) && // dones't intersect other edges\n     ( locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b ) && // locally visible\n     ( area( a.prev, a, b.prev ) || area( a, b.prev, b ) ) || // does not create opposite-facing sectors\n     equals( a, b ) && area( a.prev, a, a.next ) > 0 && area( b.prev, b, b.next ) > 0 ); // special zero-length case\n \n }\n \n // signed area of a triangle\n function area( p, q, r ) {\n \n   return ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n \n }\n \n // check if two points are equal\n function equals( p1, p2 ) {\n \n   return p1.x === p2.x && p1.y === p2.y;\n \n }\n \n // check if two segments intersect\n function intersects( p1, q1, p2, q2 ) {\n \n   const o1 = sign( area( p1, q1, p2 ) );\n   const o2 = sign( area( p1, q1, q2 ) );\n   const o3 = sign( area( p2, q2, p1 ) );\n   const o4 = sign( area( p2, q2, q1 ) );\n \n   if ( o1 !== o2 && o3 !== o4 ) return true; // general case\n \n   if ( o1 === 0 && onSegment( p1, p2, q1 ) ) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n   if ( o2 === 0 && onSegment( p1, q2, q1 ) ) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n   if ( o3 === 0 && onSegment( p2, p1, q2 ) ) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n   if ( o4 === 0 && onSegment( p2, q1, q2 ) ) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n \n   return false;\n \n }\n \n // for collinear points p, q, r, check if point q lies on segment pr\n function onSegment( p, q, r ) {\n \n   return q.x <= Math.max( p.x, r.x ) && q.x >= Math.min( p.x, r.x ) && q.y <= Math.max( p.y, r.y ) && q.y >= Math.min( p.y, r.y );\n \n }\n \n function sign( num ) {\n \n   return num > 0 ? 1 : num < 0 ? - 1 : 0;\n \n }\n \n // check if a polygon diagonal intersects any polygon segments\n function intersectsPolygon( a, b ) {\n \n   let p = a;\n   do {\n \n     if ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n         intersects( p, p.next, a, b ) ) return true;\n     p = p.next;\n \n   } while ( p !== a );\n \n   return false;\n \n }\n \n // check if a polygon diagonal is locally inside the polygon\n function locallyInside( a, b ) {\n \n   return area( a.prev, a, a.next ) < 0 ?\n     area( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n     area( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n \n }\n \n // check if the middle point of a polygon diagonal is inside the polygon\n function middleInside( a, b ) {\n \n   let p = a,\n     inside = false;\n   const px = ( a.x + b.x ) / 2,\n     py = ( a.y + b.y ) / 2;\n   do {\n \n     if ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n         ( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\n       inside = ! inside;\n     p = p.next;\n \n   } while ( p !== a );\n \n   return inside;\n \n }\n \n // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n // if one belongs to the outer ring and another to a hole, it merges it into a single ring\n function splitPolygon( a, b ) {\n \n   const a2 = new Node( a.i, a.x, a.y ),\n     b2 = new Node( b.i, b.x, b.y ),\n     an = a.next,\n     bp = b.prev;\n \n   a.next = b;\n   b.prev = a;\n \n   a2.next = an;\n   an.prev = a2;\n \n   b2.next = a2;\n   a2.prev = b2;\n \n   bp.next = b2;\n   b2.prev = bp;\n \n   return b2;\n \n }\n \n // create a node and optionally link it with previous one (in a circular doubly linked list)\n function insertNode( i, x, y, last ) {\n \n   const p = new Node( i, x, y );\n \n   if ( ! last ) {\n \n     p.prev = p;\n     p.next = p;\n \n   } else {\n \n     p.next = last.next;\n     p.prev = last;\n     last.next.prev = p;\n     last.next = p;\n \n   }\n \n   return p;\n \n }\n \n function removeNode( p ) {\n \n   p.next.prev = p.prev;\n   p.prev.next = p.next;\n \n   if ( p.prevZ ) p.prevZ.nextZ = p.nextZ;\n   if ( p.nextZ ) p.nextZ.prevZ = p.prevZ;\n \n }\n \n function Node( i, x, y ) {\n \n   // vertex index in coordinates array\n   this.i = i;\n \n   // vertex coordinates\n   this.x = x;\n   this.y = y;\n \n   // previous and next vertex nodes in a polygon ring\n   this.prev = null;\n   this.next = null;\n \n   // z-order curve value\n   this.z = null;\n \n   // previous and next nodes in z-order\n   this.prevZ = null;\n   this.nextZ = null;\n \n   // indicates whether this is a steiner point\n   this.steiner = false;\n \n }\n \n function signedArea( data, start, end, dim ) {\n \n   let sum = 0;\n   for ( let i = start, j = end - dim; i < end; i += dim ) {\n \n     sum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n     j = i;\n \n   }\n \n   return sum;\n \n }\n \n class ShapeUtils {\n \n   // calculate area of the contour polygon\n \n   static area( contour ) {\n \n     const n = contour.length;\n     let a = 0.0;\n \n     for ( let p = n - 1, q = 0; q < n; p = q ++ ) {\n \n       a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n \n     }\n \n     return a * 0.5;\n \n   }\n \n   static isClockWise( pts ) {\n \n     return ShapeUtils.area( pts ) < 0;\n \n   }\n \n   static triangulateShape( contour, holes ) {\n \n     const vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n     const holeIndices = []; // array of hole indices\n     const faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n \n     removeDupEndPts( contour );\n     addContour( vertices, contour );\n \n     //\n \n     let holeIndex = contour.length;\n \n     holes.forEach( removeDupEndPts );\n \n     for ( let i = 0; i < holes.length; i ++ ) {\n \n       holeIndices.push( holeIndex );\n       holeIndex += holes[ i ].length;\n       addContour( vertices, holes[ i ] );\n \n     }\n \n     //\n \n     const triangles = Earcut.triangulate( vertices, holeIndices );\n \n     //\n \n     for ( let i = 0; i < triangles.length; i += 3 ) {\n \n       faces.push( triangles.slice( i, i + 3 ) );\n \n     }\n \n     return faces;\n \n   }\n \n }\n \n function removeDupEndPts( points ) {\n \n   const l = points.length;\n \n   if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n \n     points.pop();\n \n   }\n \n }\n \n function addContour( vertices, contour ) {\n \n   for ( let i = 0; i < contour.length; i ++ ) {\n \n     vertices.push( contour[ i ].x );\n     vertices.push( contour[ i ].y );\n \n   }\n \n }\n \n /**\n  * Creates extruded geometry from a path shape.\n  *\n  * parameters = {\n  *\n  *  curveSegments: <int>, // number of points on the curves\n  *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n  *  depth: <float>, // Depth to extrude the shape\n  *\n  *  bevelEnabled: <bool>, // turn on bevel\n  *  bevelThickness: <float>, // how deep into the original shape bevel goes\n  *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n  *  bevelOffset: <float>, // how far from shape outline does bevel start\n  *  bevelSegments: <int>, // number of bevel layers\n  *\n  *  extrudePath: <THREE.Curve> // curve to extrude shape along\n  *\n  *  UVGenerator: <Object> // object that provides UV generator functions\n  *\n  * }\n  */\n \n class ExtrudeGeometry extends BufferGeometry {\n \n   constructor( shapes = new Shape( [ new Vector2( 0.5, 0.5 ), new Vector2( - 0.5, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), options = {} ) {\n \n     super();\n \n     this.type = 'ExtrudeGeometry';\n \n     this.parameters = {\n       shapes: shapes,\n       options: options\n     };\n \n     shapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n \n     const scope = this;\n \n     const verticesArray = [];\n     const uvArray = [];\n \n     for ( let i = 0, l = shapes.length; i < l; i ++ ) {\n \n       const shape = shapes[ i ];\n       addShape( shape );\n \n     }\n \n     // build geometry\n \n     this.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n     this.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n \n     this.computeVertexNormals();\n \n     // functions\n \n     function addShape( shape ) {\n \n       const placeholder = [];\n \n       // options\n \n       const curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n       const steps = options.steps !== undefined ? options.steps : 1;\n       let depth = options.depth !== undefined ? options.depth : 1;\n \n       let bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n       let bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;\n       let bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;\n       let bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n       let bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n \n       const extrudePath = options.extrudePath;\n \n       const uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n \n       // deprecated options\n \n       if ( options.amount !== undefined ) {\n \n         console.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );\n         depth = options.amount;\n \n       }\n \n       //\n \n       let extrudePts, extrudeByPath = false;\n       let splineTube, binormal, normal, position2;\n \n       if ( extrudePath ) {\n \n         extrudePts = extrudePath.getSpacedPoints( steps );\n \n         extrudeByPath = true;\n         bevelEnabled = false; // bevels not supported for path extrusion\n \n         // SETUP TNB variables\n \n         // TODO1 - have a .isClosed in spline?\n \n         splineTube = extrudePath.computeFrenetFrames( steps, false );\n \n         // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n \n         binormal = new Vector3();\n         normal = new Vector3();\n         position2 = new Vector3();\n \n       }\n \n       // Safeguards if bevels are not enabled\n \n       if ( ! bevelEnabled ) {\n \n         bevelSegments = 0;\n         bevelThickness = 0;\n         bevelSize = 0;\n         bevelOffset = 0;\n \n       }\n \n       // Variables initialization\n \n       const shapePoints = shape.extractPoints( curveSegments );\n \n       let vertices = shapePoints.shape;\n       const holes = shapePoints.holes;\n \n       const reverse = ! ShapeUtils.isClockWise( vertices );\n \n       if ( reverse ) {\n \n         vertices = vertices.reverse();\n \n         // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n \n         for ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n \n           const ahole = holes[ h ];\n \n           if ( ShapeUtils.isClockWise( ahole ) ) {\n \n             holes[ h ] = ahole.reverse();\n \n           }\n \n         }\n \n       }\n \n \n       const faces = ShapeUtils.triangulateShape( vertices, holes );\n \n       /* Vertices */\n \n       const contour = vertices; // vertices has all points but contour has only points of circumference\n \n       for ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n \n         const ahole = holes[ h ];\n \n         vertices = vertices.concat( ahole );\n \n       }\n \n \n       function scalePt2( pt, vec, size ) {\n \n         if ( ! vec ) console.error( 'THREE.ExtrudeGeometry: vec does not exist' );\n \n         return vec.clone().multiplyScalar( size ).add( pt );\n \n       }\n \n       const vlen = vertices.length, flen = faces.length;\n \n \n       // Find directions for point movement\n \n \n       function getBevelVec( inPt, inPrev, inNext ) {\n \n         // computes for inPt the corresponding point inPt' on a new contour\n         //   shifted by 1 unit (length of normalized vector) to the left\n         // if we walk along contour clockwise, this new contour is outside the old one\n         //\n         // inPt' is the intersection of the two lines parallel to the two\n         //  adjacent edges of inPt at a distance of 1 unit on the left side.\n \n         let v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n \n         // good reading for geometry algorithms (here: line-line intersection)\n         // http://geomalgorithms.com/a05-_intersect-1.html\n \n         const v_prev_x = inPt.x - inPrev.x,\n           v_prev_y = inPt.y - inPrev.y;\n         const v_next_x = inNext.x - inPt.x,\n           v_next_y = inNext.y - inPt.y;\n \n         const v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n \n         // check for collinear edges\n         const collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n \n         if ( Math.abs( collinear0 ) > Number.EPSILON ) {\n \n           // not collinear\n \n           // length of vectors for normalizing\n \n           const v_prev_len = Math.sqrt( v_prev_lensq );\n           const v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n \n           // shift adjacent points by unit vectors to the left\n \n           const ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n           const ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n \n           const ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n           const ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n \n           // scaling factor for v_prev to intersection point\n \n           const sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n               ( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n             ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n \n           // vector from inPt to intersection point\n \n           v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n           v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n \n           // Don't normalize!, otherwise sharp corners become ugly\n           //  but prevent crazy spikes\n           const v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n           if ( v_trans_lensq <= 2 ) {\n \n             return new Vector2( v_trans_x, v_trans_y );\n \n           } else {\n \n             shrink_by = Math.sqrt( v_trans_lensq / 2 );\n \n           }\n \n         } else {\n \n           // handle special case of collinear edges\n \n           let direction_eq = false; // assumes: opposite\n \n           if ( v_prev_x > Number.EPSILON ) {\n \n             if ( v_next_x > Number.EPSILON ) {\n \n               direction_eq = true;\n \n             }\n \n           } else {\n \n             if ( v_prev_x < - Number.EPSILON ) {\n \n               if ( v_next_x < - Number.EPSILON ) {\n \n                 direction_eq = true;\n \n               }\n \n             } else {\n \n               if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n \n                 direction_eq = true;\n \n               }\n \n             }\n \n           }\n \n           if ( direction_eq ) {\n \n             // console.log(\"Warning: lines are a straight sequence\");\n             v_trans_x = - v_prev_y;\n             v_trans_y = v_prev_x;\n             shrink_by = Math.sqrt( v_prev_lensq );\n \n           } else {\n \n             // console.log(\"Warning: lines are a straight spike\");\n             v_trans_x = v_prev_x;\n             v_trans_y = v_prev_y;\n             shrink_by = Math.sqrt( v_prev_lensq / 2 );\n \n           }\n \n         }\n \n         return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n \n       }\n \n \n       const contourMovements = [];\n \n       for ( let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n \n         if ( j === il ) j = 0;\n         if ( k === il ) k = 0;\n \n         //  (j)---(i)---(k)\n         // console.log('i,j,k', i, j , k)\n \n         contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n \n       }\n \n       const holesMovements = [];\n       let oneHoleMovements, verticesMovements = contourMovements.concat();\n \n       for ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n \n         const ahole = holes[ h ];\n \n         oneHoleMovements = [];\n \n         for ( let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n \n           if ( j === il ) j = 0;\n           if ( k === il ) k = 0;\n \n           //  (j)---(i)---(k)\n           oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n \n         }\n \n         holesMovements.push( oneHoleMovements );\n         verticesMovements = verticesMovements.concat( oneHoleMovements );\n \n       }\n \n \n       // Loop bevelSegments, 1 for the front, 1 for the back\n \n       for ( let b = 0; b < bevelSegments; b ++ ) {\n \n         //for ( b = bevelSegments; b > 0; b -- ) {\n \n         const t = b / bevelSegments;\n         const z = bevelThickness * Math.cos( t * Math.PI / 2 );\n         const bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n \n         // contract shape\n \n         for ( let i = 0, il = contour.length; i < il; i ++ ) {\n \n           const vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n \n           v( vert.x, vert.y, - z );\n \n         }\n \n         // expand holes\n \n         for ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n \n           const ahole = holes[ h ];\n           oneHoleMovements = holesMovements[ h ];\n \n           for ( let i = 0, il = ahole.length; i < il; i ++ ) {\n \n             const vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n \n             v( vert.x, vert.y, - z );\n \n           }\n \n         }\n \n       }\n \n       const bs = bevelSize + bevelOffset;\n \n       // Back facing vertices\n \n       for ( let i = 0; i < vlen; i ++ ) {\n \n         const vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n \n         if ( ! extrudeByPath ) {\n \n           v( vert.x, vert.y, 0 );\n \n         } else {\n \n           // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n \n           normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n           binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n \n           position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n \n           v( position2.x, position2.y, position2.z );\n \n         }\n \n       }\n \n       // Add stepped vertices...\n       // Including front facing vertices\n \n       for ( let s = 1; s <= steps; s ++ ) {\n \n         for ( let i = 0; i < vlen; i ++ ) {\n \n           const vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n \n           if ( ! extrudeByPath ) {\n \n             v( vert.x, vert.y, depth / steps * s );\n \n           } else {\n \n             // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n \n             normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n             binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n \n             position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n \n             v( position2.x, position2.y, position2.z );\n \n           }\n \n         }\n \n       }\n \n \n       // Add bevel segments planes\n \n       //for ( b = 1; b <= bevelSegments; b ++ ) {\n       for ( let b = bevelSegments - 1; b >= 0; b -- ) {\n \n         const t = b / bevelSegments;\n         const z = bevelThickness * Math.cos( t * Math.PI / 2 );\n         const bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n \n         // contract shape\n \n         for ( let i = 0, il = contour.length; i < il; i ++ ) {\n \n           const vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n           v( vert.x, vert.y, depth + z );\n \n         }\n \n         // expand holes\n \n         for ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n \n           const ahole = holes[ h ];\n           oneHoleMovements = holesMovements[ h ];\n \n           for ( let i = 0, il = ahole.length; i < il; i ++ ) {\n \n             const vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n \n             if ( ! extrudeByPath ) {\n \n               v( vert.x, vert.y, depth + z );\n \n             } else {\n \n               v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n \n             }\n \n           }\n \n         }\n \n       }\n \n       /* Faces */\n \n       // Top and bottom faces\n \n       buildLidFaces();\n \n       // Sides faces\n \n       buildSideFaces();\n \n \n       /////  Internal functions\n \n       function buildLidFaces() {\n \n         const start = verticesArray.length / 3;\n \n         if ( bevelEnabled ) {\n \n           let layer = 0; // steps + 1\n           let offset = vlen * layer;\n \n           // Bottom faces\n \n           for ( let i = 0; i < flen; i ++ ) {\n \n             const face = faces[ i ];\n             f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n \n           }\n \n           layer = steps + bevelSegments * 2;\n           offset = vlen * layer;\n \n           // Top faces\n \n           for ( let i = 0; i < flen; i ++ ) {\n \n             const face = faces[ i ];\n             f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n \n           }\n \n         } else {\n \n           // Bottom faces\n \n           for ( let i = 0; i < flen; i ++ ) {\n \n             const face = faces[ i ];\n             f3( face[ 2 ], face[ 1 ], face[ 0 ] );\n \n           }\n \n           // Top faces\n \n           for ( let i = 0; i < flen; i ++ ) {\n \n             const face = faces[ i ];\n             f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n \n           }\n \n         }\n \n         scope.addGroup( start, verticesArray.length / 3 - start, 0 );\n \n       }\n \n       // Create faces for the z-sides of the shape\n \n       function buildSideFaces() {\n \n         const start = verticesArray.length / 3;\n         let layeroffset = 0;\n         sidewalls( contour, layeroffset );\n         layeroffset += contour.length;\n \n         for ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n \n           const ahole = holes[ h ];\n           sidewalls( ahole, layeroffset );\n \n           //, true\n           layeroffset += ahole.length;\n \n         }\n \n \n         scope.addGroup( start, verticesArray.length / 3 - start, 1 );\n \n \n       }\n \n       function sidewalls( contour, layeroffset ) {\n \n         let i = contour.length;\n \n         while ( -- i >= 0 ) {\n \n           const j = i;\n           let k = i - 1;\n           if ( k < 0 ) k = contour.length - 1;\n \n           //console.log('b', i,j, i-1, k,vertices.length);\n \n           for ( let s = 0, sl = ( steps + bevelSegments * 2 ); s < sl; s ++ ) {\n \n             const slen1 = vlen * s;\n             const slen2 = vlen * ( s + 1 );\n \n             const a = layeroffset + j + slen1,\n               b = layeroffset + k + slen1,\n               c = layeroffset + k + slen2,\n               d = layeroffset + j + slen2;\n \n             f4( a, b, c, d );\n \n           }\n \n         }\n \n       }\n \n       function v( x, y, z ) {\n \n         placeholder.push( x );\n         placeholder.push( y );\n         placeholder.push( z );\n \n       }\n \n \n       function f3( a, b, c ) {\n \n         addVertex( a );\n         addVertex( b );\n         addVertex( c );\n \n         const nextIndex = verticesArray.length / 3;\n         const uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n \n         addUV( uvs[ 0 ] );\n         addUV( uvs[ 1 ] );\n         addUV( uvs[ 2 ] );\n \n       }\n \n       function f4( a, b, c, d ) {\n \n         addVertex( a );\n         addVertex( b );\n         addVertex( d );\n \n         addVertex( b );\n         addVertex( c );\n         addVertex( d );\n \n \n         const nextIndex = verticesArray.length / 3;\n         const uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n \n         addUV( uvs[ 0 ] );\n         addUV( uvs[ 1 ] );\n         addUV( uvs[ 3 ] );\n \n         addUV( uvs[ 1 ] );\n         addUV( uvs[ 2 ] );\n         addUV( uvs[ 3 ] );\n \n       }\n \n       function addVertex( index ) {\n \n         verticesArray.push( placeholder[ index * 3 + 0 ] );\n         verticesArray.push( placeholder[ index * 3 + 1 ] );\n         verticesArray.push( placeholder[ index * 3 + 2 ] );\n \n       }\n \n \n       function addUV( vector2 ) {\n \n         uvArray.push( vector2.x );\n         uvArray.push( vector2.y );\n \n       }\n \n     }\n \n   }\n \n   toJSON() {\n \n     const data = super.toJSON();\n \n     const shapes = this.parameters.shapes;\n     const options = this.parameters.options;\n \n     return toJSON$1( shapes, options, data );\n \n   }\n \n   static fromJSON( data, shapes ) {\n \n     const geometryShapes = [];\n \n     for ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n \n       const shape = shapes[ data.shapes[ j ] ];\n \n       geometryShapes.push( shape );\n \n     }\n \n     const extrudePath = data.options.extrudePath;\n \n     if ( extrudePath !== undefined ) {\n \n       data.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n \n     }\n \n     return new ExtrudeGeometry( geometryShapes, data.options );\n \n   }\n \n }\n \n const WorldUVGenerator = {\n \n   generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n \n     const a_x = vertices[ indexA * 3 ];\n     const a_y = vertices[ indexA * 3 + 1 ];\n     const b_x = vertices[ indexB * 3 ];\n     const b_y = vertices[ indexB * 3 + 1 ];\n     const c_x = vertices[ indexC * 3 ];\n     const c_y = vertices[ indexC * 3 + 1 ];\n \n     return [\n       new Vector2( a_x, a_y ),\n       new Vector2( b_x, b_y ),\n       new Vector2( c_x, c_y )\n     ];\n \n   },\n \n   generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n \n     const a_x = vertices[ indexA * 3 ];\n     const a_y = vertices[ indexA * 3 + 1 ];\n     const a_z = vertices[ indexA * 3 + 2 ];\n     const b_x = vertices[ indexB * 3 ];\n     const b_y = vertices[ indexB * 3 + 1 ];\n     const b_z = vertices[ indexB * 3 + 2 ];\n     const c_x = vertices[ indexC * 3 ];\n     const c_y = vertices[ indexC * 3 + 1 ];\n     const c_z = vertices[ indexC * 3 + 2 ];\n     const d_x = vertices[ indexD * 3 ];\n     const d_y = vertices[ indexD * 3 + 1 ];\n     const d_z = vertices[ indexD * 3 + 2 ];\n \n     if ( Math.abs( a_y - b_y ) < Math.abs( a_x - b_x ) ) {\n \n       return [\n         new Vector2( a_x, 1 - a_z ),\n         new Vector2( b_x, 1 - b_z ),\n         new Vector2( c_x, 1 - c_z ),\n         new Vector2( d_x, 1 - d_z )\n       ];\n \n     } else {\n \n       return [\n         new Vector2( a_y, 1 - a_z ),\n         new Vector2( b_y, 1 - b_z ),\n         new Vector2( c_y, 1 - c_z ),\n         new Vector2( d_y, 1 - d_z )\n       ];\n \n     }\n \n   }\n \n };\n \n function toJSON$1( shapes, options, data ) {\n \n   data.shapes = [];\n \n   if ( Array.isArray( shapes ) ) {\n \n     for ( let i = 0, l = shapes.length; i < l; i ++ ) {\n \n       const shape = shapes[ i ];\n \n       data.shapes.push( shape.uuid );\n \n     }\n \n   } else {\n \n     data.shapes.push( shapes.uuid );\n \n   }\n \n   if ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();\n \n   return data;\n \n }\n \n class IcosahedronGeometry extends PolyhedronGeometry {\n \n   constructor( radius = 1, detail = 0 ) {\n \n     const t = ( 1 + Math.sqrt( 5 ) ) / 2;\n \n     const vertices = [\n       - 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n       0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n       t, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n     ];\n \n     const indices = [\n       0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n       1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n       3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n       4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n     ];\n \n     super( vertices, indices, radius, detail );\n \n     this.type = 'IcosahedronGeometry';\n \n     this.parameters = {\n       radius: radius,\n       detail: detail\n     };\n \n   }\n \n   static fromJSON( data ) {\n \n     return new IcosahedronGeometry( data.radius, data.detail );\n \n   }\n \n }\n \n class LatheGeometry extends BufferGeometry {\n \n   constructor( points = [ new Vector2( 0, 0.5 ), new Vector2( 0.5, 0 ), new Vector2( 0, - 0.5 ) ], segments = 12, phiStart = 0, phiLength = Math.PI * 2 ) {\n \n     super();\n \n     this.type = 'LatheGeometry';\n \n     this.parameters = {\n       points: points,\n       segments: segments,\n       phiStart: phiStart,\n       phiLength: phiLength\n     };\n \n     segments = Math.floor( segments );\n \n     // clamp phiLength so it's in range of [ 0, 2PI ]\n \n     phiLength = clamp( phiLength, 0, Math.PI * 2 );\n \n     // buffers\n \n     const indices = [];\n     const vertices = [];\n     const uvs = [];\n \n     // helper variables\n \n     const inverseSegments = 1.0 / segments;\n     const vertex = new Vector3();\n     const uv = new Vector2();\n \n     // generate vertices and uvs\n \n     for ( let i = 0; i <= segments; i ++ ) {\n \n       const phi = phiStart + i * inverseSegments * phiLength;\n \n       const sin = Math.sin( phi );\n       const cos = Math.cos( phi );\n \n       for ( let j = 0; j <= ( points.length - 1 ); j ++ ) {\n \n         // vertex\n \n         vertex.x = points[ j ].x * sin;\n         vertex.y = points[ j ].y;\n         vertex.z = points[ j ].x * cos;\n \n         vertices.push( vertex.x, vertex.y, vertex.z );\n \n         // uv\n \n         uv.x = i / segments;\n         uv.y = j / ( points.length - 1 );\n \n         uvs.push( uv.x, uv.y );\n \n \n       }\n \n     }\n \n     // indices\n \n     for ( let i = 0; i < segments; i ++ ) {\n \n       for ( let j = 0; j < ( points.length - 1 ); j ++ ) {\n \n         const base = j + i * points.length;\n \n         const a = base;\n         const b = base + points.length;\n         const c = base + points.length + 1;\n         const d = base + 1;\n \n         // faces\n \n         indices.push( a, b, d );\n         indices.push( b, c, d );\n \n       }\n \n     }\n \n     // build geometry\n \n     this.setIndex( indices );\n     this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n     this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n \n     // generate normals\n \n     this.computeVertexNormals();\n \n     // if the geometry is closed, we need to average the normals along the seam.\n     // because the corresponding vertices are identical (but still have different UVs).\n \n     if ( phiLength === Math.PI * 2 ) {\n \n       const normals = this.attributes.normal.array;\n       const n1 = new Vector3();\n       const n2 = new Vector3();\n       const n = new Vector3();\n \n       // this is the buffer offset for the last line of vertices\n \n       const base = segments * points.length * 3;\n \n       for ( let i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n \n         // select the normal of the vertex in the first line\n \n         n1.x = normals[ j + 0 ];\n         n1.y = normals[ j + 1 ];\n         n1.z = normals[ j + 2 ];\n \n         // select the normal of the vertex in the last line\n \n         n2.x = normals[ base + j + 0 ];\n         n2.y = normals[ base + j + 1 ];\n         n2.z = normals[ base + j + 2 ];\n \n         // average normals\n \n         n.addVectors( n1, n2 ).normalize();\n \n         // assign the new values to both normals\n \n         normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n         normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n         normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n \n       }\n \n     }\n \n   }\n \n   static fromJSON( data ) {\n \n     return new LatheGeometry( data.points, data.segments, data.phiStart, data.phiLength );\n \n   }\n \n }\n \n class OctahedronGeometry extends PolyhedronGeometry {\n \n   constructor( radius = 1, detail = 0 ) {\n \n     const vertices = [\n       1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n       0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n     ];\n \n     const indices = [\n       0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n       0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n       1, 3, 4,\t1, 4, 2\n     ];\n \n     super( vertices, indices, radius, detail );\n \n     this.type = 'OctahedronGeometry';\n \n     this.parameters = {\n       radius: radius,\n       detail: detail\n     };\n \n   }\n \n   static fromJSON( data ) {\n \n     return new OctahedronGeometry( data.radius, data.detail );\n \n   }\n \n }\n \n class RingGeometry extends BufferGeometry {\n \n   constructor( innerRadius = 0.5, outerRadius = 1, thetaSegments = 8, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n \n     super();\n \n     this.type = 'RingGeometry';\n \n     this.parameters = {\n       innerRadius: innerRadius,\n       outerRadius: outerRadius,\n       thetaSegments: thetaSegments,\n       phiSegments: phiSegments,\n       thetaStart: thetaStart,\n       thetaLength: thetaLength\n     };\n \n     thetaSegments = Math.max( 3, thetaSegments );\n     phiSegments = Math.max( 1, phiSegments );\n \n     // buffers\n \n     const indices = [];\n     const vertices = [];\n     const normals = [];\n     const uvs = [];\n \n     // some helper variables\n \n     let radius = innerRadius;\n     const radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n     const vertex = new Vector3();\n     const uv = new Vector2();\n \n     // generate vertices, normals and uvs\n \n     for ( let j = 0; j <= phiSegments; j ++ ) {\n \n       for ( let i = 0; i <= thetaSegments; i ++ ) {\n \n         // values are generate from the inside of the ring to the outside\n \n         const segment = thetaStart + i / thetaSegments * thetaLength;\n \n         // vertex\n \n         vertex.x = radius * Math.cos( segment );\n         vertex.y = radius * Math.sin( segment );\n \n         vertices.push( vertex.x, vertex.y, vertex.z );\n \n         // normal\n \n         normals.push( 0, 0, 1 );\n \n         // uv\n \n         uv.x = ( vertex.x / outerRadius + 1 ) / 2;\n         uv.y = ( vertex.y / outerRadius + 1 ) / 2;\n \n         uvs.push( uv.x, uv.y );\n \n       }\n \n       // increase the radius for next row of vertices\n \n       radius += radiusStep;\n \n     }\n \n     // indices\n \n     for ( let j = 0; j < phiSegments; j ++ ) {\n \n       const thetaSegmentLevel = j * ( thetaSegments + 1 );\n \n       for ( let i = 0; i < thetaSegments; i ++ ) {\n \n         const segment = i + thetaSegmentLevel;\n \n         const a = segment;\n         const b = segment + thetaSegments + 1;\n         const c = segment + thetaSegments + 2;\n         const d = segment + 1;\n \n         // faces\n \n         indices.push( a, b, d );\n         indices.push( b, c, d );\n \n       }\n \n     }\n \n     // build geometry\n \n     this.setIndex( indices );\n     this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n     this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n     this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n \n   }\n \n   static fromJSON( data ) {\n \n     return new RingGeometry( data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength );\n \n   }\n \n }\n \n class ShapeGeometry extends BufferGeometry {\n \n   constructor( shapes = new Shape( [ new Vector2( 0, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), curveSegments = 12 ) {\n \n     super();\n     this.type = 'ShapeGeometry';\n \n     this.parameters = {\n       shapes: shapes,\n       curveSegments: curveSegments\n     };\n \n     // buffers\n \n     const indices = [];\n     const vertices = [];\n     const normals = [];\n     const uvs = [];\n \n     // helper variables\n \n     let groupStart = 0;\n     let groupCount = 0;\n \n     // allow single and array values for \"shapes\" parameter\n \n     if ( Array.isArray( shapes ) === false ) {\n \n       addShape( shapes );\n \n     } else {\n \n       for ( let i = 0; i < shapes.length; i ++ ) {\n \n         addShape( shapes[ i ] );\n \n         this.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n \n         groupStart += groupCount;\n         groupCount = 0;\n \n       }\n \n     }\n \n     // build geometry\n \n     this.setIndex( indices );\n     this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n     this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n     this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n \n \n     // helper functions\n \n     function addShape( shape ) {\n \n       const indexOffset = vertices.length / 3;\n       const points = shape.extractPoints( curveSegments );\n \n       let shapeVertices = points.shape;\n       const shapeHoles = points.holes;\n \n       // check direction of vertices\n \n       if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n \n         shapeVertices = shapeVertices.reverse();\n \n       }\n \n       for ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n \n         const shapeHole = shapeHoles[ i ];\n \n         if ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n \n           shapeHoles[ i ] = shapeHole.reverse();\n \n         }\n \n       }\n \n       const faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n \n       // join vertices of inner and outer paths to a single array\n \n       for ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n \n         const shapeHole = shapeHoles[ i ];\n         shapeVertices = shapeVertices.concat( shapeHole );\n \n       }\n \n       // vertices, normals, uvs\n \n       for ( let i = 0, l = shapeVertices.length; i < l; i ++ ) {\n \n         const vertex = shapeVertices[ i ];\n \n         vertices.push( vertex.x, vertex.y, 0 );\n         normals.push( 0, 0, 1 );\n         uvs.push( vertex.x, vertex.y ); // world uvs\n \n       }\n \n       // incides\n \n       for ( let i = 0, l = faces.length; i < l; i ++ ) {\n \n         const face = faces[ i ];\n \n         const a = face[ 0 ] + indexOffset;\n         const b = face[ 1 ] + indexOffset;\n         const c = face[ 2 ] + indexOffset;\n \n         indices.push( a, b, c );\n         groupCount += 3;\n \n       }\n \n     }\n \n   }\n \n   toJSON() {\n \n     const data = super.toJSON();\n \n     const shapes = this.parameters.shapes;\n \n     return toJSON( shapes, data );\n \n   }\n \n   static fromJSON( data, shapes ) {\n \n     const geometryShapes = [];\n \n     for ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n \n       const shape = shapes[ data.shapes[ j ] ];\n \n       geometryShapes.push( shape );\n \n     }\n \n     return new ShapeGeometry( geometryShapes, data.curveSegments );\n \n   }\n \n }\n \n function toJSON( shapes, data ) {\n \n   data.shapes = [];\n \n   if ( Array.isArray( shapes ) ) {\n \n     for ( let i = 0, l = shapes.length; i < l; i ++ ) {\n \n       const shape = shapes[ i ];\n \n       data.shapes.push( shape.uuid );\n \n     }\n \n   } else {\n \n     data.shapes.push( shapes.uuid );\n \n   }\n \n   return data;\n \n }\n \n class SphereGeometry extends BufferGeometry {\n \n   constructor( radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI ) {\n \n     super();\n     this.type = 'SphereGeometry';\n \n     this.parameters = {\n       radius: radius,\n       widthSegments: widthSegments,\n       heightSegments: heightSegments,\n       phiStart: phiStart,\n       phiLength: phiLength,\n       thetaStart: thetaStart,\n       thetaLength: thetaLength\n     };\n \n     widthSegments = Math.max( 3, Math.floor( widthSegments ) );\n     heightSegments = Math.max( 2, Math.floor( heightSegments ) );\n \n     const thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n \n     let index = 0;\n     const grid = [];\n \n     const vertex = new Vector3();\n     const normal = new Vector3();\n \n     // buffers\n \n     const indices = [];\n     const vertices = [];\n     const normals = [];\n     const uvs = [];\n \n     // generate vertices, normals and uvs\n \n     for ( let iy = 0; iy <= heightSegments; iy ++ ) {\n \n       const verticesRow = [];\n \n       const v = iy / heightSegments;\n \n       // special case for the poles\n \n       let uOffset = 0;\n \n       if ( iy == 0 && thetaStart == 0 ) {\n \n         uOffset = 0.5 / widthSegments;\n \n       } else if ( iy == heightSegments && thetaEnd == Math.PI ) {\n \n         uOffset = - 0.5 / widthSegments;\n \n       }\n \n       for ( let ix = 0; ix <= widthSegments; ix ++ ) {\n \n         const u = ix / widthSegments;\n \n         // vertex\n \n         vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n         vertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n         vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n \n         vertices.push( vertex.x, vertex.y, vertex.z );\n \n         // normal\n \n         normal.copy( vertex ).normalize();\n         normals.push( normal.x, normal.y, normal.z );\n \n         // uv\n \n         uvs.push( u + uOffset, 1 - v );\n \n         verticesRow.push( index ++ );\n \n       }\n \n       grid.push( verticesRow );\n \n     }\n \n     // indices\n \n     for ( let iy = 0; iy < heightSegments; iy ++ ) {\n \n       for ( let ix = 0; ix < widthSegments; ix ++ ) {\n \n         const a = grid[ iy ][ ix + 1 ];\n         const b = grid[ iy ][ ix ];\n         const c = grid[ iy + 1 ][ ix ];\n         const d = grid[ iy + 1 ][ ix + 1 ];\n \n         if ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\n         if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\n \n       }\n \n     }\n \n     // build geometry\n \n     this.setIndex( indices );\n     this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n     this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n     this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n \n   }\n \n   static fromJSON( data ) {\n \n     return new SphereGeometry( data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength );\n \n   }\n \n }\n \n class TetrahedronGeometry extends PolyhedronGeometry {\n \n   constructor( radius = 1, detail = 0 ) {\n \n     const vertices = [\n       1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n     ];\n \n     const indices = [\n       2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n     ];\n \n     super( vertices, indices, radius, detail );\n \n     this.type = 'TetrahedronGeometry';\n \n     this.parameters = {\n       radius: radius,\n       detail: detail\n     };\n \n   }\n \n   static fromJSON( data ) {\n \n     return new TetrahedronGeometry( data.radius, data.detail );\n \n   }\n \n }\n \n class TorusGeometry extends BufferGeometry {\n \n   constructor( radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2 ) {\n \n     super();\n     this.type = 'TorusGeometry';\n \n     this.parameters = {\n       radius: radius,\n       tube: tube,\n       radialSegments: radialSegments,\n       tubularSegments: tubularSegments,\n       arc: arc\n     };\n \n     radialSegments = Math.floor( radialSegments );\n     tubularSegments = Math.floor( tubularSegments );\n \n     // buffers\n \n     const indices = [];\n     const vertices = [];\n     const normals = [];\n     const uvs = [];\n \n     // helper variables\n \n     const center = new Vector3();\n     const vertex = new Vector3();\n     const normal = new Vector3();\n \n     // generate vertices, normals and uvs\n \n     for ( let j = 0; j <= radialSegments; j ++ ) {\n \n       for ( let i = 0; i <= tubularSegments; i ++ ) {\n \n         const u = i / tubularSegments * arc;\n         const v = j / radialSegments * Math.PI * 2;\n \n         // vertex\n \n         vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n         vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n         vertex.z = tube * Math.sin( v );\n \n         vertices.push( vertex.x, vertex.y, vertex.z );\n \n         // normal\n \n         center.x = radius * Math.cos( u );\n         center.y = radius * Math.sin( u );\n         normal.subVectors( vertex, center ).normalize();\n \n         normals.push( normal.x, normal.y, normal.z );\n \n         // uv\n \n         uvs.push( i / tubularSegments );\n         uvs.push( j / radialSegments );\n \n       }\n \n     }\n \n     // generate indices\n \n     for ( let j = 1; j <= radialSegments; j ++ ) {\n \n       for ( let i = 1; i <= tubularSegments; i ++ ) {\n \n         // indices\n \n         const a = ( tubularSegments + 1 ) * j + i - 1;\n         const b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n         const c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n         const d = ( tubularSegments + 1 ) * j + i;\n \n         // faces\n \n         indices.push( a, b, d );\n         indices.push( b, c, d );\n \n       }\n \n     }\n \n     // build geometry\n \n     this.setIndex( indices );\n     this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n     this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n     this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n \n   }\n \n   static fromJSON( data ) {\n \n     return new TorusGeometry( data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc );\n \n   }\n \n }\n \n class TorusKnotGeometry extends BufferGeometry {\n \n   constructor( radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3 ) {\n \n     super();\n     this.type = 'TorusKnotGeometry';\n \n     this.parameters = {\n       radius: radius,\n       tube: tube,\n       tubularSegments: tubularSegments,\n       radialSegments: radialSegments,\n       p: p,\n       q: q\n     };\n \n     tubularSegments = Math.floor( tubularSegments );\n     radialSegments = Math.floor( radialSegments );\n \n     // buffers\n \n     const indices = [];\n     const vertices = [];\n     const normals = [];\n     const uvs = [];\n \n     // helper variables\n \n     const vertex = new Vector3();\n     const normal = new Vector3();\n \n     const P1 = new Vector3();\n     const P2 = new Vector3();\n \n     const B = new Vector3();\n     const T = new Vector3();\n     const N = new Vector3();\n \n     // generate vertices, normals and uvs\n \n     for ( let i = 0; i <= tubularSegments; ++ i ) {\n \n       // the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n \n       const u = i / tubularSegments * p * Math.PI * 2;\n \n       // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n       // these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n \n       calculatePositionOnCurve( u, p, q, radius, P1 );\n       calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n \n       // calculate orthonormal basis\n \n       T.subVectors( P2, P1 );\n       N.addVectors( P2, P1 );\n       B.crossVectors( T, N );\n       N.crossVectors( B, T );\n \n       // normalize B, N. T can be ignored, we don't use it\n \n       B.normalize();\n       N.normalize();\n \n       for ( let j = 0; j <= radialSegments; ++ j ) {\n \n         // now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n         // because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n \n         const v = j / radialSegments * Math.PI * 2;\n         const cx = - tube * Math.cos( v );\n         const cy = tube * Math.sin( v );\n \n         // now calculate the final vertex position.\n         // first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n \n         vertex.x = P1.x + ( cx * N.x + cy * B.x );\n         vertex.y = P1.y + ( cx * N.y + cy * B.y );\n         vertex.z = P1.z + ( cx * N.z + cy * B.z );\n \n         vertices.push( vertex.x, vertex.y, vertex.z );\n \n         // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n \n         normal.subVectors( vertex, P1 ).normalize();\n \n         normals.push( normal.x, normal.y, normal.z );\n \n         // uv\n \n         uvs.push( i / tubularSegments );\n         uvs.push( j / radialSegments );\n \n       }\n \n     }\n \n     // generate indices\n \n     for ( let j = 1; j <= tubularSegments; j ++ ) {\n \n       for ( let i = 1; i <= radialSegments; i ++ ) {\n \n         // indices\n \n         const a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n         const b = ( radialSegments + 1 ) * j + ( i - 1 );\n         const c = ( radialSegments + 1 ) * j + i;\n         const d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n \n         // faces\n \n         indices.push( a, b, d );\n         indices.push( b, c, d );\n \n       }\n \n     }\n \n     // build geometry\n \n     this.setIndex( indices );\n     this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n     this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n     this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n \n     // this function calculates the current position on the torus curve\n \n     function calculatePositionOnCurve( u, p, q, radius, position ) {\n \n       const cu = Math.cos( u );\n       const su = Math.sin( u );\n       const quOverP = q / p * u;\n       const cs = Math.cos( quOverP );\n \n       position.x = radius * ( 2 + cs ) * 0.5 * cu;\n       position.y = radius * ( 2 + cs ) * su * 0.5;\n       position.z = radius * Math.sin( quOverP ) * 0.5;\n \n     }\n \n   }\n \n   static fromJSON( data ) {\n \n     return new TorusKnotGeometry( data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q );\n \n   }\n \n }\n \n class TubeGeometry extends BufferGeometry {\n \n   constructor( path = new QuadraticBezierCurve3( new Vector3( - 1, - 1, 0 ), new Vector3( - 1, 1, 0 ), new Vector3( 1, 1, 0 ) ), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false ) {\n \n     super();\n     this.type = 'TubeGeometry';\n \n     this.parameters = {\n       path: path,\n       tubularSegments: tubularSegments,\n       radius: radius,\n       radialSegments: radialSegments,\n       closed: closed\n     };\n \n     const frames = path.computeFrenetFrames( tubularSegments, closed );\n \n     // expose internals\n \n     this.tangents = frames.tangents;\n     this.normals = frames.normals;\n     this.binormals = frames.binormals;\n \n     // helper variables\n \n     const vertex = new Vector3();\n     const normal = new Vector3();\n     const uv = new Vector2();\n     let P = new Vector3();\n \n     // buffer\n \n     const vertices = [];\n     const normals = [];\n     const uvs = [];\n     const indices = [];\n \n     // create buffer data\n \n     generateBufferData();\n \n     // build geometry\n \n     this.setIndex( indices );\n     this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n     this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n     this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n \n     // functions\n \n     function generateBufferData() {\n \n       for ( let i = 0; i < tubularSegments; i ++ ) {\n \n         generateSegment( i );\n \n       }\n \n       // if the geometry is not closed, generate the last row of vertices and normals\n       // at the regular position on the given path\n       //\n       // if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n \n       generateSegment( ( closed === false ) ? tubularSegments : 0 );\n \n       // uvs are generated in a separate function.\n       // this makes it easy compute correct values for closed geometries\n \n       generateUVs();\n \n       // finally create faces\n \n       generateIndices();\n \n     }\n \n     function generateSegment( i ) {\n \n       // we use getPointAt to sample evenly distributed points from the given path\n \n       P = path.getPointAt( i / tubularSegments, P );\n \n       // retrieve corresponding normal and binormal\n \n       const N = frames.normals[ i ];\n       const B = frames.binormals[ i ];\n \n       // generate normals and vertices for the current segment\n \n       for ( let j = 0; j <= radialSegments; j ++ ) {\n \n         const v = j / radialSegments * Math.PI * 2;\n \n         const sin = Math.sin( v );\n         const cos = - Math.cos( v );\n \n         // normal\n \n         normal.x = ( cos * N.x + sin * B.x );\n         normal.y = ( cos * N.y + sin * B.y );\n         normal.z = ( cos * N.z + sin * B.z );\n         normal.normalize();\n \n         normals.push( normal.x, normal.y, normal.z );\n \n         // vertex\n \n         vertex.x = P.x + radius * normal.x;\n         vertex.y = P.y + radius * normal.y;\n         vertex.z = P.z + radius * normal.z;\n \n         vertices.push( vertex.x, vertex.y, vertex.z );\n \n       }\n \n     }\n \n     function generateIndices() {\n \n       for ( let j = 1; j <= tubularSegments; j ++ ) {\n \n         for ( let i = 1; i <= radialSegments; i ++ ) {\n \n           const a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n           const b = ( radialSegments + 1 ) * j + ( i - 1 );\n           const c = ( radialSegments + 1 ) * j + i;\n           const d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n \n           // faces\n \n           indices.push( a, b, d );\n           indices.push( b, c, d );\n \n         }\n \n       }\n \n     }\n \n     function generateUVs() {\n \n       for ( let i = 0; i <= tubularSegments; i ++ ) {\n \n         for ( let j = 0; j <= radialSegments; j ++ ) {\n \n           uv.x = i / tubularSegments;\n           uv.y = j / radialSegments;\n \n           uvs.push( uv.x, uv.y );\n \n         }\n \n       }\n \n     }\n \n   }\n \n   toJSON() {\n \n     const data = super.toJSON();\n \n     data.path = this.parameters.path.toJSON();\n \n     return data;\n \n   }\n \n   static fromJSON( data ) {\n \n     // This only works for built-in curves (e.g. CatmullRomCurve3).\n     // User defined curves or instances of CurvePath will not be deserialized.\n     return new TubeGeometry(\n       new Curves[ data.path.type ]().fromJSON( data.path ),\n       data.tubularSegments,\n       data.radius,\n       data.radialSegments,\n       data.closed\n     );\n \n   }\n \n }\n \n class WireframeGeometry extends BufferGeometry {\n \n   constructor( geometry = null ) {\n \n     super();\n     this.type = 'WireframeGeometry';\n \n     this.parameters = {\n       geometry: geometry\n     };\n \n     if ( geometry !== null ) {\n \n       // buffer\n \n       const vertices = [];\n       const edges = new Set();\n \n       // helper variables\n \n       const start = new Vector3();\n       const end = new Vector3();\n \n       if ( geometry.index !== null ) {\n \n         // indexed BufferGeometry\n \n         const position = geometry.attributes.position;\n         const indices = geometry.index;\n         let groups = geometry.groups;\n \n         if ( groups.length === 0 ) {\n \n           groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n \n         }\n \n         // create a data structure that contains all eges without duplicates\n \n         for ( let o = 0, ol = groups.length; o < ol; ++ o ) {\n \n           const group = groups[ o ];\n \n           const groupStart = group.start;\n           const groupCount = group.count;\n \n           for ( let i = groupStart, l = ( groupStart + groupCount ); i < l; i += 3 ) {\n \n             for ( let j = 0; j < 3; j ++ ) {\n \n               const index1 = indices.getX( i + j );\n               const index2 = indices.getX( i + ( j + 1 ) % 3 );\n \n               start.fromBufferAttribute( position, index1 );\n               end.fromBufferAttribute( position, index2 );\n \n               if ( isUniqueEdge( start, end, edges ) === true ) {\n \n                 vertices.push( start.x, start.y, start.z );\n                 vertices.push( end.x, end.y, end.z );\n \n               }\n \n             }\n \n           }\n \n         }\n \n       } else {\n \n         // non-indexed BufferGeometry\n \n         const position = geometry.attributes.position;\n \n         for ( let i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n \n           for ( let j = 0; j < 3; j ++ ) {\n \n             // three edges per triangle, an edge is represented as (index1, index2)\n             // e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n \n             const index1 = 3 * i + j;\n             const index2 = 3 * i + ( ( j + 1 ) % 3 );\n \n             start.fromBufferAttribute( position, index1 );\n             end.fromBufferAttribute( position, index2 );\n \n             if ( isUniqueEdge( start, end, edges ) === true ) {\n \n               vertices.push( start.x, start.y, start.z );\n               vertices.push( end.x, end.y, end.z );\n \n             }\n \n           }\n \n         }\n \n       }\n \n       // build geometry\n \n       this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n \n     }\n \n   }\n \n }\n \n function isUniqueEdge( start, end, edges ) {\n \n   const hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;\n   const hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge\n \n   if ( edges.has( hash1 ) === true || edges.has( hash2 ) === true ) {\n \n     return false;\n \n   } else {\n \n     edges.add( hash1, hash2 );\n     return true;\n \n   }\n \n }\n \n var Geometries = /*#__PURE__*/Object.freeze({\n   __proto__: null,\n   BoxGeometry: BoxGeometry,\n   BoxBufferGeometry: BoxGeometry,\n   CircleGeometry: CircleGeometry,\n   CircleBufferGeometry: CircleGeometry,\n   ConeGeometry: ConeGeometry,\n   ConeBufferGeometry: ConeGeometry,\n   CylinderGeometry: CylinderGeometry,\n   CylinderBufferGeometry: CylinderGeometry,\n   DodecahedronGeometry: DodecahedronGeometry,\n   DodecahedronBufferGeometry: DodecahedronGeometry,\n   EdgesGeometry: EdgesGeometry,\n   ExtrudeGeometry: ExtrudeGeometry,\n   ExtrudeBufferGeometry: ExtrudeGeometry,\n   IcosahedronGeometry: IcosahedronGeometry,\n   IcosahedronBufferGeometry: IcosahedronGeometry,\n   LatheGeometry: LatheGeometry,\n   LatheBufferGeometry: LatheGeometry,\n   OctahedronGeometry: OctahedronGeometry,\n   OctahedronBufferGeometry: OctahedronGeometry,\n   PlaneGeometry: PlaneGeometry,\n   PlaneBufferGeometry: PlaneGeometry,\n   PolyhedronGeometry: PolyhedronGeometry,\n   PolyhedronBufferGeometry: PolyhedronGeometry,\n   RingGeometry: RingGeometry,\n   RingBufferGeometry: RingGeometry,\n   ShapeGeometry: ShapeGeometry,\n   ShapeBufferGeometry: ShapeGeometry,\n   SphereGeometry: SphereGeometry,\n   SphereBufferGeometry: SphereGeometry,\n   TetrahedronGeometry: TetrahedronGeometry,\n   TetrahedronBufferGeometry: TetrahedronGeometry,\n   TorusGeometry: TorusGeometry,\n   TorusBufferGeometry: TorusGeometry,\n   TorusKnotGeometry: TorusKnotGeometry,\n   TorusKnotBufferGeometry: TorusKnotGeometry,\n   TubeGeometry: TubeGeometry,\n   TubeBufferGeometry: TubeGeometry,\n   WireframeGeometry: WireframeGeometry\n });\n \n /**\n  * parameters = {\n  *  color: <THREE.Color>\n  * }\n  */\n \n class ShadowMaterial extends Material {\n \n   constructor( parameters ) {\n \n     super();\n \n     this.type = 'ShadowMaterial';\n \n     this.color = new Color( 0x000000 );\n     this.transparent = true;\n \n     this.setValues( parameters );\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.color.copy( source.color );\n \n     return this;\n \n   }\n \n }\n \n ShadowMaterial.prototype.isShadowMaterial = true;\n \n /**\n  * parameters = {\n  *  color: <hex>,\n  *  roughness: <float>,\n  *  metalness: <float>,\n  *  opacity: <float>,\n  *\n  *  map: new THREE.Texture( <Image> ),\n  *\n  *  lightMap: new THREE.Texture( <Image> ),\n  *  lightMapIntensity: <float>\n  *\n  *  aoMap: new THREE.Texture( <Image> ),\n  *  aoMapIntensity: <float>\n  *\n  *  emissive: <hex>,\n  *  emissiveIntensity: <float>\n  *  emissiveMap: new THREE.Texture( <Image> ),\n  *\n  *  bumpMap: new THREE.Texture( <Image> ),\n  *  bumpScale: <float>,\n  *\n  *  normalMap: new THREE.Texture( <Image> ),\n  *  normalMapType: THREE.TangentSpaceNormalMap,\n  *  normalScale: <Vector2>,\n  *\n  *  displacementMap: new THREE.Texture( <Image> ),\n  *  displacementScale: <float>,\n  *  displacementBias: <float>,\n  *\n  *  roughnessMap: new THREE.Texture( <Image> ),\n  *\n  *  metalnessMap: new THREE.Texture( <Image> ),\n  *\n  *  alphaMap: new THREE.Texture( <Image> ),\n  *\n  *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n  *  envMapIntensity: <float>\n  *\n  *  refractionRatio: <float>,\n  *\n  *  wireframe: <boolean>,\n  *  wireframeLinewidth: <float>,\n  *\n  *  flatShading: <bool>\n  * }\n  */\n \n class MeshStandardMaterial extends Material {\n \n   constructor( parameters ) {\n \n     super();\n \n     this.defines = { 'STANDARD': '' };\n \n     this.type = 'MeshStandardMaterial';\n \n     this.color = new Color( 0xffffff ); // diffuse\n     this.roughness = 1.0;\n     this.metalness = 0.0;\n \n     this.map = null;\n \n     this.lightMap = null;\n     this.lightMapIntensity = 1.0;\n \n     this.aoMap = null;\n     this.aoMapIntensity = 1.0;\n \n     this.emissive = new Color( 0x000000 );\n     this.emissiveIntensity = 1.0;\n     this.emissiveMap = null;\n \n     this.bumpMap = null;\n     this.bumpScale = 1;\n \n     this.normalMap = null;\n     this.normalMapType = TangentSpaceNormalMap;\n     this.normalScale = new Vector2( 1, 1 );\n \n     this.displacementMap = null;\n     this.displacementScale = 1;\n     this.displacementBias = 0;\n \n     this.roughnessMap = null;\n \n     this.metalnessMap = null;\n \n     this.alphaMap = null;\n \n     this.envMap = null;\n     this.envMapIntensity = 1.0;\n \n     this.refractionRatio = 0.98;\n \n     this.wireframe = false;\n     this.wireframeLinewidth = 1;\n     this.wireframeLinecap = 'round';\n     this.wireframeLinejoin = 'round';\n \n     this.flatShading = false;\n \n     this.setValues( parameters );\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.defines = { 'STANDARD': '' };\n \n     this.color.copy( source.color );\n     this.roughness = source.roughness;\n     this.metalness = source.metalness;\n \n     this.map = source.map;\n \n     this.lightMap = source.lightMap;\n     this.lightMapIntensity = source.lightMapIntensity;\n \n     this.aoMap = source.aoMap;\n     this.aoMapIntensity = source.aoMapIntensity;\n \n     this.emissive.copy( source.emissive );\n     this.emissiveMap = source.emissiveMap;\n     this.emissiveIntensity = source.emissiveIntensity;\n \n     this.bumpMap = source.bumpMap;\n     this.bumpScale = source.bumpScale;\n \n     this.normalMap = source.normalMap;\n     this.normalMapType = source.normalMapType;\n     this.normalScale.copy( source.normalScale );\n \n     this.displacementMap = source.displacementMap;\n     this.displacementScale = source.displacementScale;\n     this.displacementBias = source.displacementBias;\n \n     this.roughnessMap = source.roughnessMap;\n \n     this.metalnessMap = source.metalnessMap;\n \n     this.alphaMap = source.alphaMap;\n \n     this.envMap = source.envMap;\n     this.envMapIntensity = source.envMapIntensity;\n \n     this.refractionRatio = source.refractionRatio;\n \n     this.wireframe = source.wireframe;\n     this.wireframeLinewidth = source.wireframeLinewidth;\n     this.wireframeLinecap = source.wireframeLinecap;\n     this.wireframeLinejoin = source.wireframeLinejoin;\n \n     this.flatShading = source.flatShading;\n \n     return this;\n \n   }\n \n }\n \n MeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n \n /**\n  * parameters = {\n  *  clearcoat: <float>,\n  *  clearcoatMap: new THREE.Texture( <Image> ),\n  *  clearcoatRoughness: <float>,\n  *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),\n  *  clearcoatNormalScale: <Vector2>,\n  *  clearcoatNormalMap: new THREE.Texture( <Image> ),\n  *\n  *  ior: <float>,\n  *  reflectivity: <float>,\n  *\n  *  sheen: <float>,\n  *  sheenColor: <Color>,\n  *  sheenColorMap: new THREE.Texture( <Image> ),\n  *  sheenRoughness: <float>,\n  *  sheenRoughnessMap: new THREE.Texture( <Image> ),\n  *\n  *  transmission: <float>,\n  *  transmissionMap: new THREE.Texture( <Image> ),\n  *\n  *  thickness: <float>,\n  *  thicknessMap: new THREE.Texture( <Image> ),\n  *  attenuationDistance: <float>,\n  *  attenuationColor: <Color>,\n  *\n  *  specularIntensity: <float>,\n  *  specularIntensityMap: new THREE.Texture( <Image> ),\n  *  specularColor: <Color>,\n  *  specularColorMap: new THREE.Texture( <Image> )\n  * }\n  */\n \n class MeshPhysicalMaterial extends MeshStandardMaterial {\n \n   constructor( parameters ) {\n \n     super();\n \n     this.defines = {\n \n       'STANDARD': '',\n       'PHYSICAL': ''\n \n     };\n \n     this.type = 'MeshPhysicalMaterial';\n \n     this.clearcoatMap = null;\n     this.clearcoatRoughness = 0.0;\n     this.clearcoatRoughnessMap = null;\n     this.clearcoatNormalScale = new Vector2( 1, 1 );\n     this.clearcoatNormalMap = null;\n \n     this.ior = 1.5;\n \n     Object.defineProperty( this, 'reflectivity', {\n       get: function () {\n \n         return ( clamp( 2.5 * ( this.ior - 1 ) / ( this.ior + 1 ), 0, 1 ) );\n \n       },\n       set: function ( reflectivity ) {\n \n         this.ior = ( 1 + 0.4 * reflectivity ) / ( 1 - 0.4 * reflectivity );\n \n       }\n     } );\n \n     this.sheenColor = new Color( 0x000000 );\n     this.sheenColorMap = null;\n     this.sheenRoughness = 1.0;\n     this.sheenRoughnessMap = null;\n \n     this.transmissionMap = null;\n \n     this.thickness = 0;\n     this.thicknessMap = null;\n     this.attenuationDistance = 0.0;\n     this.attenuationColor = new Color( 1, 1, 1 );\n \n     this.specularIntensity = 1.0;\n     this.specularIntensityMap = null;\n     this.specularColor = new Color( 1, 1, 1 );\n     this.specularColorMap = null;\n \n     this._sheen = 0.0;\n     this._clearcoat = 0;\n     this._transmission = 0;\n \n     this.setValues( parameters );\n \n   }\n \n   get sheen() {\n \n     return this._sheen;\n \n   }\n \n   set sheen( value ) {\n \n     if ( this._sheen > 0 !== value > 0 ) {\n \n       this.version ++;\n \n     }\n \n     this._sheen = value;\n \n   }\n \n   get clearcoat() {\n \n     return this._clearcoat;\n \n   }\n \n   set clearcoat( value ) {\n \n     if ( this._clearcoat > 0 !== value > 0 ) {\n \n       this.version ++;\n \n     }\n \n     this._clearcoat = value;\n \n   }\n \n   get transmission() {\n \n     return this._transmission;\n \n   }\n \n   set transmission( value ) {\n \n     if ( this._transmission > 0 !== value > 0 ) {\n \n       this.version ++;\n \n     }\n \n     this._transmission = value;\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.defines = {\n \n       'STANDARD': '',\n       'PHYSICAL': ''\n \n     };\n \n     this.clearcoat = source.clearcoat;\n     this.clearcoatMap = source.clearcoatMap;\n     this.clearcoatRoughness = source.clearcoatRoughness;\n     this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n     this.clearcoatNormalMap = source.clearcoatNormalMap;\n     this.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n \n     this.ior = source.ior;\n \n     this.sheen = source.sheen;\n     this.sheenColor.copy( source.sheenColor );\n     this.sheenColorMap = source.sheenColorMap;\n     this.sheenRoughness = source.sheenRoughness;\n     this.sheenRoughnessMap = source.sheenRoughnessMap;\n \n     this.transmission = source.transmission;\n     this.transmissionMap = source.transmissionMap;\n \n     this.thickness = source.thickness;\n     this.thicknessMap = source.thicknessMap;\n     this.attenuationDistance = source.attenuationDistance;\n     this.attenuationColor.copy( source.attenuationColor );\n \n     this.specularIntensity = source.specularIntensity;\n     this.specularIntensityMap = source.specularIntensityMap;\n     this.specularColor.copy( source.specularColor );\n     this.specularColorMap = source.specularColorMap;\n \n     return this;\n \n   }\n \n }\n \n MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n \n /**\n  * parameters = {\n  *  color: <hex>,\n  *  specular: <hex>,\n  *  shininess: <float>,\n  *  opacity: <float>,\n  *\n  *  map: new THREE.Texture( <Image> ),\n  *\n  *  lightMap: new THREE.Texture( <Image> ),\n  *  lightMapIntensity: <float>\n  *\n  *  aoMap: new THREE.Texture( <Image> ),\n  *  aoMapIntensity: <float>\n  *\n  *  emissive: <hex>,\n  *  emissiveIntensity: <float>\n  *  emissiveMap: new THREE.Texture( <Image> ),\n  *\n  *  bumpMap: new THREE.Texture( <Image> ),\n  *  bumpScale: <float>,\n  *\n  *  normalMap: new THREE.Texture( <Image> ),\n  *  normalMapType: THREE.TangentSpaceNormalMap,\n  *  normalScale: <Vector2>,\n  *\n  *  displacementMap: new THREE.Texture( <Image> ),\n  *  displacementScale: <float>,\n  *  displacementBias: <float>,\n  *\n  *  specularMap: new THREE.Texture( <Image> ),\n  *\n  *  alphaMap: new THREE.Texture( <Image> ),\n  *\n  *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n  *  combine: THREE.MultiplyOperation,\n  *  reflectivity: <float>,\n  *  refractionRatio: <float>,\n  *\n  *  wireframe: <boolean>,\n  *  wireframeLinewidth: <float>,\n  *\n  *  flatShading: <bool>\n  * }\n  */\n \n class MeshPhongMaterial extends Material {\n \n   constructor( parameters ) {\n \n     super();\n \n     this.type = 'MeshPhongMaterial';\n \n     this.color = new Color( 0xffffff ); // diffuse\n     this.specular = new Color( 0x111111 );\n     this.shininess = 30;\n \n     this.map = null;\n \n     this.lightMap = null;\n     this.lightMapIntensity = 1.0;\n \n     this.aoMap = null;\n     this.aoMapIntensity = 1.0;\n \n     this.emissive = new Color( 0x000000 );\n     this.emissiveIntensity = 1.0;\n     this.emissiveMap = null;\n \n     this.bumpMap = null;\n     this.bumpScale = 1;\n \n     this.normalMap = null;\n     this.normalMapType = TangentSpaceNormalMap;\n     this.normalScale = new Vector2( 1, 1 );\n \n     this.displacementMap = null;\n     this.displacementScale = 1;\n     this.displacementBias = 0;\n \n     this.specularMap = null;\n \n     this.alphaMap = null;\n \n     this.envMap = null;\n     this.combine = MultiplyOperation;\n     this.reflectivity = 1;\n     this.refractionRatio = 0.98;\n \n     this.wireframe = false;\n     this.wireframeLinewidth = 1;\n     this.wireframeLinecap = 'round';\n     this.wireframeLinejoin = 'round';\n \n     this.flatShading = false;\n \n     this.setValues( parameters );\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.color.copy( source.color );\n     this.specular.copy( source.specular );\n     this.shininess = source.shininess;\n \n     this.map = source.map;\n \n     this.lightMap = source.lightMap;\n     this.lightMapIntensity = source.lightMapIntensity;\n \n     this.aoMap = source.aoMap;\n     this.aoMapIntensity = source.aoMapIntensity;\n \n     this.emissive.copy( source.emissive );\n     this.emissiveMap = source.emissiveMap;\n     this.emissiveIntensity = source.emissiveIntensity;\n \n     this.bumpMap = source.bumpMap;\n     this.bumpScale = source.bumpScale;\n \n     this.normalMap = source.normalMap;\n     this.normalMapType = source.normalMapType;\n     this.normalScale.copy( source.normalScale );\n \n     this.displacementMap = source.displacementMap;\n     this.displacementScale = source.displacementScale;\n     this.displacementBias = source.displacementBias;\n \n     this.specularMap = source.specularMap;\n \n     this.alphaMap = source.alphaMap;\n \n     this.envMap = source.envMap;\n     this.combine = source.combine;\n     this.reflectivity = source.reflectivity;\n     this.refractionRatio = source.refractionRatio;\n \n     this.wireframe = source.wireframe;\n     this.wireframeLinewidth = source.wireframeLinewidth;\n     this.wireframeLinecap = source.wireframeLinecap;\n     this.wireframeLinejoin = source.wireframeLinejoin;\n \n     this.flatShading = source.flatShading;\n \n     return this;\n \n   }\n \n }\n \n MeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n \n /**\n  * parameters = {\n  *  color: <hex>,\n  *\n  *  map: new THREE.Texture( <Image> ),\n  *  gradientMap: new THREE.Texture( <Image> ),\n  *\n  *  lightMap: new THREE.Texture( <Image> ),\n  *  lightMapIntensity: <float>\n  *\n  *  aoMap: new THREE.Texture( <Image> ),\n  *  aoMapIntensity: <float>\n  *\n  *  emissive: <hex>,\n  *  emissiveIntensity: <float>\n  *  emissiveMap: new THREE.Texture( <Image> ),\n  *\n  *  bumpMap: new THREE.Texture( <Image> ),\n  *  bumpScale: <float>,\n  *\n  *  normalMap: new THREE.Texture( <Image> ),\n  *  normalMapType: THREE.TangentSpaceNormalMap,\n  *  normalScale: <Vector2>,\n  *\n  *  displacementMap: new THREE.Texture( <Image> ),\n  *  displacementScale: <float>,\n  *  displacementBias: <float>,\n  *\n  *  alphaMap: new THREE.Texture( <Image> ),\n  *\n  *  wireframe: <boolean>,\n  *  wireframeLinewidth: <float>,\n  *\n  * }\n  */\n \n class MeshToonMaterial extends Material {\n \n   constructor( parameters ) {\n \n     super();\n \n     this.defines = { 'TOON': '' };\n \n     this.type = 'MeshToonMaterial';\n \n     this.color = new Color( 0xffffff );\n \n     this.map = null;\n     this.gradientMap = null;\n \n     this.lightMap = null;\n     this.lightMapIntensity = 1.0;\n \n     this.aoMap = null;\n     this.aoMapIntensity = 1.0;\n \n     this.emissive = new Color( 0x000000 );\n     this.emissiveIntensity = 1.0;\n     this.emissiveMap = null;\n \n     this.bumpMap = null;\n     this.bumpScale = 1;\n \n     this.normalMap = null;\n     this.normalMapType = TangentSpaceNormalMap;\n     this.normalScale = new Vector2( 1, 1 );\n \n     this.displacementMap = null;\n     this.displacementScale = 1;\n     this.displacementBias = 0;\n \n     this.alphaMap = null;\n \n     this.wireframe = false;\n     this.wireframeLinewidth = 1;\n     this.wireframeLinecap = 'round';\n     this.wireframeLinejoin = 'round';\n \n     this.setValues( parameters );\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.color.copy( source.color );\n \n     this.map = source.map;\n     this.gradientMap = source.gradientMap;\n \n     this.lightMap = source.lightMap;\n     this.lightMapIntensity = source.lightMapIntensity;\n \n     this.aoMap = source.aoMap;\n     this.aoMapIntensity = source.aoMapIntensity;\n \n     this.emissive.copy( source.emissive );\n     this.emissiveMap = source.emissiveMap;\n     this.emissiveIntensity = source.emissiveIntensity;\n \n     this.bumpMap = source.bumpMap;\n     this.bumpScale = source.bumpScale;\n \n     this.normalMap = source.normalMap;\n     this.normalMapType = source.normalMapType;\n     this.normalScale.copy( source.normalScale );\n \n     this.displacementMap = source.displacementMap;\n     this.displacementScale = source.displacementScale;\n     this.displacementBias = source.displacementBias;\n \n     this.alphaMap = source.alphaMap;\n \n     this.wireframe = source.wireframe;\n     this.wireframeLinewidth = source.wireframeLinewidth;\n     this.wireframeLinecap = source.wireframeLinecap;\n     this.wireframeLinejoin = source.wireframeLinejoin;\n \n     return this;\n \n   }\n \n }\n \n MeshToonMaterial.prototype.isMeshToonMaterial = true;\n \n /**\n  * parameters = {\n  *  opacity: <float>,\n  *\n  *  bumpMap: new THREE.Texture( <Image> ),\n  *  bumpScale: <float>,\n  *\n  *  normalMap: new THREE.Texture( <Image> ),\n  *  normalMapType: THREE.TangentSpaceNormalMap,\n  *  normalScale: <Vector2>,\n  *\n  *  displacementMap: new THREE.Texture( <Image> ),\n  *  displacementScale: <float>,\n  *  displacementBias: <float>,\n  *\n  *  wireframe: <boolean>,\n  *  wireframeLinewidth: <float>\n  *\n  *  flatShading: <bool>\n  * }\n  */\n \n class MeshNormalMaterial extends Material {\n \n   constructor( parameters ) {\n \n     super();\n \n     this.type = 'MeshNormalMaterial';\n \n     this.bumpMap = null;\n     this.bumpScale = 1;\n \n     this.normalMap = null;\n     this.normalMapType = TangentSpaceNormalMap;\n     this.normalScale = new Vector2( 1, 1 );\n \n     this.displacementMap = null;\n     this.displacementScale = 1;\n     this.displacementBias = 0;\n \n     this.wireframe = false;\n     this.wireframeLinewidth = 1;\n \n     this.fog = false;\n \n     this.flatShading = false;\n \n     this.setValues( parameters );\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.bumpMap = source.bumpMap;\n     this.bumpScale = source.bumpScale;\n \n     this.normalMap = source.normalMap;\n     this.normalMapType = source.normalMapType;\n     this.normalScale.copy( source.normalScale );\n \n     this.displacementMap = source.displacementMap;\n     this.displacementScale = source.displacementScale;\n     this.displacementBias = source.displacementBias;\n \n     this.wireframe = source.wireframe;\n     this.wireframeLinewidth = source.wireframeLinewidth;\n \n     this.flatShading = source.flatShading;\n \n     return this;\n \n   }\n \n }\n \n MeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n \n /**\n  * parameters = {\n  *  color: <hex>,\n  *  opacity: <float>,\n  *\n  *  map: new THREE.Texture( <Image> ),\n  *\n  *  lightMap: new THREE.Texture( <Image> ),\n  *  lightMapIntensity: <float>\n  *\n  *  aoMap: new THREE.Texture( <Image> ),\n  *  aoMapIntensity: <float>\n  *\n  *  emissive: <hex>,\n  *  emissiveIntensity: <float>\n  *  emissiveMap: new THREE.Texture( <Image> ),\n  *\n  *  specularMap: new THREE.Texture( <Image> ),\n  *\n  *  alphaMap: new THREE.Texture( <Image> ),\n  *\n  *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n  *  combine: THREE.Multiply,\n  *  reflectivity: <float>,\n  *  refractionRatio: <float>,\n  *\n  *  wireframe: <boolean>,\n  *  wireframeLinewidth: <float>,\n  *\n  * }\n  */\n \n class MeshLambertMaterial extends Material {\n \n   constructor( parameters ) {\n \n     super();\n \n     this.type = 'MeshLambertMaterial';\n \n     this.color = new Color( 0xffffff ); // diffuse\n \n     this.map = null;\n \n     this.lightMap = null;\n     this.lightMapIntensity = 1.0;\n \n     this.aoMap = null;\n     this.aoMapIntensity = 1.0;\n \n     this.emissive = new Color( 0x000000 );\n     this.emissiveIntensity = 1.0;\n     this.emissiveMap = null;\n \n     this.specularMap = null;\n \n     this.alphaMap = null;\n \n     this.envMap = null;\n     this.combine = MultiplyOperation;\n     this.reflectivity = 1;\n     this.refractionRatio = 0.98;\n \n     this.wireframe = false;\n     this.wireframeLinewidth = 1;\n     this.wireframeLinecap = 'round';\n     this.wireframeLinejoin = 'round';\n \n     this.setValues( parameters );\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.color.copy( source.color );\n \n     this.map = source.map;\n \n     this.lightMap = source.lightMap;\n     this.lightMapIntensity = source.lightMapIntensity;\n \n     this.aoMap = source.aoMap;\n     this.aoMapIntensity = source.aoMapIntensity;\n \n     this.emissive.copy( source.emissive );\n     this.emissiveMap = source.emissiveMap;\n     this.emissiveIntensity = source.emissiveIntensity;\n \n     this.specularMap = source.specularMap;\n \n     this.alphaMap = source.alphaMap;\n \n     this.envMap = source.envMap;\n     this.combine = source.combine;\n     this.reflectivity = source.reflectivity;\n     this.refractionRatio = source.refractionRatio;\n \n     this.wireframe = source.wireframe;\n     this.wireframeLinewidth = source.wireframeLinewidth;\n     this.wireframeLinecap = source.wireframeLinecap;\n     this.wireframeLinejoin = source.wireframeLinejoin;\n \n     return this;\n \n   }\n \n }\n \n MeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n \n /**\n  * parameters = {\n  *  color: <hex>,\n  *  opacity: <float>,\n  *\n  *  matcap: new THREE.Texture( <Image> ),\n  *\n  *  map: new THREE.Texture( <Image> ),\n  *\n  *  bumpMap: new THREE.Texture( <Image> ),\n  *  bumpScale: <float>,\n  *\n  *  normalMap: new THREE.Texture( <Image> ),\n  *  normalMapType: THREE.TangentSpaceNormalMap,\n  *  normalScale: <Vector2>,\n  *\n  *  displacementMap: new THREE.Texture( <Image> ),\n  *  displacementScale: <float>,\n  *  displacementBias: <float>,\n  *\n  *  alphaMap: new THREE.Texture( <Image> ),\n  *\n  *  flatShading: <bool>\n  * }\n  */\n \n class MeshMatcapMaterial extends Material {\n \n   constructor( parameters ) {\n \n     super();\n \n     this.defines = { 'MATCAP': '' };\n \n     this.type = 'MeshMatcapMaterial';\n \n     this.color = new Color( 0xffffff ); // diffuse\n \n     this.matcap = null;\n \n     this.map = null;\n \n     this.bumpMap = null;\n     this.bumpScale = 1;\n \n     this.normalMap = null;\n     this.normalMapType = TangentSpaceNormalMap;\n     this.normalScale = new Vector2( 1, 1 );\n \n     this.displacementMap = null;\n     this.displacementScale = 1;\n     this.displacementBias = 0;\n \n     this.alphaMap = null;\n \n     this.flatShading = false;\n \n     this.setValues( parameters );\n \n   }\n \n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.defines = { 'MATCAP': '' };\n \n     this.color.copy( source.color );\n \n     this.matcap = source.matcap;\n \n     this.map = source.map;\n \n     this.bumpMap = source.bumpMap;\n     this.bumpScale = source.bumpScale;\n \n     this.normalMap = source.normalMap;\n     this.normalMapType = source.normalMapType;\n     this.normalScale.copy( source.normalScale );\n \n     this.displacementMap = source.displacementMap;\n     this.displacementScale = source.displacementScale;\n     this.displacementBias = source.displacementBias;\n \n     this.alphaMap = source.alphaMap;\n \n     this.flatShading = source.flatShading;\n \n     return this;\n \n   }\n \n }\n \n MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n \n /**\n  * parameters = {\n  *  color: <hex>,\n  *  opacity: <float>,\n  *\n  *  linewidth: <float>,\n  *\n  *  scale: <float>,\n  *  dashSize: <float>,\n  *  gapSize: <float>\n  * }\n  */\n \n class LineDashedMaterial extends LineBasicMaterial {\n \n   constructor( parameters ) {\n \n     super();\n \n     this.type = 'LineDashedMaterial';\n \n     this.scale = 1;\n     this.dashSize = 3;\n     this.gapSize = 1;\n \n     this.setValues( parameters );\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.scale = source.scale;\n     this.dashSize = source.dashSize;\n     this.gapSize = source.gapSize;\n \n     return this;\n \n   }\n \n }\n \n LineDashedMaterial.prototype.isLineDashedMaterial = true;\n \n var Materials = /*#__PURE__*/Object.freeze({\n   __proto__: null,\n   ShadowMaterial: ShadowMaterial,\n   SpriteMaterial: SpriteMaterial,\n   RawShaderMaterial: RawShaderMaterial,\n   ShaderMaterial: ShaderMaterial,\n   PointsMaterial: PointsMaterial,\n   MeshPhysicalMaterial: MeshPhysicalMaterial,\n   MeshStandardMaterial: MeshStandardMaterial,\n   MeshPhongMaterial: MeshPhongMaterial,\n   MeshToonMaterial: MeshToonMaterial,\n   MeshNormalMaterial: MeshNormalMaterial,\n   MeshLambertMaterial: MeshLambertMaterial,\n   MeshDepthMaterial: MeshDepthMaterial,\n   MeshDistanceMaterial: MeshDistanceMaterial,\n   MeshBasicMaterial: MeshBasicMaterial,\n   MeshMatcapMaterial: MeshMatcapMaterial,\n   LineDashedMaterial: LineDashedMaterial,\n   LineBasicMaterial: LineBasicMaterial,\n   Material: Material\n });\n \n const AnimationUtils = {\n \n   // same as Array.prototype.slice, but also works on typed arrays\n   arraySlice: function ( array, from, to ) {\n \n     if ( AnimationUtils.isTypedArray( array ) ) {\n \n       // in ios9 array.subarray(from, undefined) will return empty array\n       // but array.subarray(from) or array.subarray(from, len) is correct\n       return new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n \n     }\n \n     return array.slice( from, to );\n \n   },\n \n   // converts an array to a specific type\n   convertArray: function ( array, type, forceClone ) {\n \n     if ( ! array || // let 'undefined' and 'null' pass\n       ! forceClone && array.constructor === type ) return array;\n \n     if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n \n       return new type( array ); // create typed array\n \n     }\n \n     return Array.prototype.slice.call( array ); // create Array\n \n   },\n \n   isTypedArray: function ( object ) {\n \n     return ArrayBuffer.isView( object ) &&\n       ! ( object instanceof DataView );\n \n   },\n \n   // returns an array by which times and values can be sorted\n   getKeyframeOrder: function ( times ) {\n \n     function compareTime( i, j ) {\n \n       return times[ i ] - times[ j ];\n \n     }\n \n     const n = times.length;\n     const result = new Array( n );\n     for ( let i = 0; i !== n; ++ i ) result[ i ] = i;\n \n     result.sort( compareTime );\n \n     return result;\n \n   },\n \n   // uses the array previously returned by 'getKeyframeOrder' to sort data\n   sortedArray: function ( values, stride, order ) {\n \n     const nValues = values.length;\n     const result = new values.constructor( nValues );\n \n     for ( let i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n \n       const srcOffset = order[ i ] * stride;\n \n       for ( let j = 0; j !== stride; ++ j ) {\n \n         result[ dstOffset ++ ] = values[ srcOffset + j ];\n \n       }\n \n     }\n \n     return result;\n \n   },\n \n   // function for parsing AOS keyframe formats\n   flattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n \n     let i = 1, key = jsonKeys[ 0 ];\n \n     while ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n \n       key = jsonKeys[ i ++ ];\n \n     }\n \n     if ( key === undefined ) return; // no data\n \n     let value = key[ valuePropertyName ];\n     if ( value === undefined ) return; // no data\n \n     if ( Array.isArray( value ) ) {\n \n       do {\n \n         value = key[ valuePropertyName ];\n \n         if ( value !== undefined ) {\n \n           times.push( key.time );\n           values.push.apply( values, value ); // push all elements\n \n         }\n \n         key = jsonKeys[ i ++ ];\n \n       } while ( key !== undefined );\n \n     } else if ( value.toArray !== undefined ) {\n \n       // ...assume THREE.Math-ish\n \n       do {\n \n         value = key[ valuePropertyName ];\n \n         if ( value !== undefined ) {\n \n           times.push( key.time );\n           value.toArray( values, values.length );\n \n         }\n \n         key = jsonKeys[ i ++ ];\n \n       } while ( key !== undefined );\n \n     } else {\n \n       // otherwise push as-is\n \n       do {\n \n         value = key[ valuePropertyName ];\n \n         if ( value !== undefined ) {\n \n           times.push( key.time );\n           values.push( value );\n \n         }\n \n         key = jsonKeys[ i ++ ];\n \n       } while ( key !== undefined );\n \n     }\n \n   },\n \n   subclip: function ( sourceClip, name, startFrame, endFrame, fps = 30 ) {\n \n     const clip = sourceClip.clone();\n \n     clip.name = name;\n \n     const tracks = [];\n \n     for ( let i = 0; i < clip.tracks.length; ++ i ) {\n \n       const track = clip.tracks[ i ];\n       const valueSize = track.getValueSize();\n \n       const times = [];\n       const values = [];\n \n       for ( let j = 0; j < track.times.length; ++ j ) {\n \n         const frame = track.times[ j ] * fps;\n \n         if ( frame < startFrame || frame >= endFrame ) continue;\n \n         times.push( track.times[ j ] );\n \n         for ( let k = 0; k < valueSize; ++ k ) {\n \n           values.push( track.values[ j * valueSize + k ] );\n \n         }\n \n       }\n \n       if ( times.length === 0 ) continue;\n \n       track.times = AnimationUtils.convertArray( times, track.times.constructor );\n       track.values = AnimationUtils.convertArray( values, track.values.constructor );\n \n       tracks.push( track );\n \n     }\n \n     clip.tracks = tracks;\n \n     // find minimum .times value across all tracks in the trimmed clip\n \n     let minStartTime = Infinity;\n \n     for ( let i = 0; i < clip.tracks.length; ++ i ) {\n \n       if ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\n \n         minStartTime = clip.tracks[ i ].times[ 0 ];\n \n       }\n \n     }\n \n     // shift all tracks such that clip begins at t=0\n \n     for ( let i = 0; i < clip.tracks.length; ++ i ) {\n \n       clip.tracks[ i ].shift( - 1 * minStartTime );\n \n     }\n \n     clip.resetDuration();\n \n     return clip;\n \n   },\n \n   makeClipAdditive: function ( targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30 ) {\n \n     if ( fps <= 0 ) fps = 30;\n \n     const numTracks = referenceClip.tracks.length;\n     const referenceTime = referenceFrame / fps;\n \n     // Make each track's values relative to the values at the reference frame\n     for ( let i = 0; i < numTracks; ++ i ) {\n \n       const referenceTrack = referenceClip.tracks[ i ];\n       const referenceTrackType = referenceTrack.ValueTypeName;\n \n       // Skip this track if it's non-numeric\n       if ( referenceTrackType === 'bool' || referenceTrackType === 'string' ) continue;\n \n       // Find the track in the target clip whose name and type matches the reference track\n       const targetTrack = targetClip.tracks.find( function ( track ) {\n \n         return track.name === referenceTrack.name\n           && track.ValueTypeName === referenceTrackType;\n \n       } );\n \n       if ( targetTrack === undefined ) continue;\n \n       let referenceOffset = 0;\n       const referenceValueSize = referenceTrack.getValueSize();\n \n       if ( referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n \n         referenceOffset = referenceValueSize / 3;\n \n       }\n \n       let targetOffset = 0;\n       const targetValueSize = targetTrack.getValueSize();\n \n       if ( targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n \n         targetOffset = targetValueSize / 3;\n \n       }\n \n       const lastIndex = referenceTrack.times.length - 1;\n       let referenceValue;\n \n       // Find the value to subtract out of the track\n       if ( referenceTime <= referenceTrack.times[ 0 ] ) {\n \n         // Reference frame is earlier than the first keyframe, so just use the first keyframe\n         const startIndex = referenceOffset;\n         const endIndex = referenceValueSize - referenceOffset;\n         referenceValue = AnimationUtils.arraySlice( referenceTrack.values, startIndex, endIndex );\n \n       } else if ( referenceTime >= referenceTrack.times[ lastIndex ] ) {\n \n         // Reference frame is after the last keyframe, so just use the last keyframe\n         const startIndex = lastIndex * referenceValueSize + referenceOffset;\n         const endIndex = startIndex + referenceValueSize - referenceOffset;\n         referenceValue = AnimationUtils.arraySlice( referenceTrack.values, startIndex, endIndex );\n \n       } else {\n \n         // Interpolate to the reference value\n         const interpolant = referenceTrack.createInterpolant();\n         const startIndex = referenceOffset;\n         const endIndex = referenceValueSize - referenceOffset;\n         interpolant.evaluate( referenceTime );\n         referenceValue = AnimationUtils.arraySlice( interpolant.resultBuffer, startIndex, endIndex );\n \n       }\n \n       // Conjugate the quaternion\n       if ( referenceTrackType === 'quaternion' ) {\n \n         const referenceQuat = new Quaternion().fromArray( referenceValue ).normalize().conjugate();\n         referenceQuat.toArray( referenceValue );\n \n       }\n \n       // Subtract the reference value from all of the track values\n \n       const numTimes = targetTrack.times.length;\n       for ( let j = 0; j < numTimes; ++ j ) {\n \n         const valueStart = j * targetValueSize + targetOffset;\n \n         if ( referenceTrackType === 'quaternion' ) {\n \n           // Multiply the conjugate for quaternion track types\n           Quaternion.multiplyQuaternionsFlat(\n             targetTrack.values,\n             valueStart,\n             referenceValue,\n             0,\n             targetTrack.values,\n             valueStart\n           );\n \n         } else {\n \n           const valueEnd = targetValueSize - targetOffset * 2;\n \n           // Subtract each value for all other numeric track types\n           for ( let k = 0; k < valueEnd; ++ k ) {\n \n             targetTrack.values[ valueStart + k ] -= referenceValue[ k ];\n \n           }\n \n         }\n \n       }\n \n     }\n \n     targetClip.blendMode = AdditiveAnimationBlendMode;\n \n     return targetClip;\n \n   }\n \n };\n \n /**\n  * Abstract base class of interpolants over parametric samples.\n  *\n  * The parameter domain is one dimensional, typically the time or a path\n  * along a curve defined by the data.\n  *\n  * The sample values can have any dimensionality and derived classes may\n  * apply special interpretations to the data.\n  *\n  * This class provides the interval seek in a Template Method, deferring\n  * the actual interpolation to derived classes.\n  *\n  * Time complexity is O(1) for linear access crossing at most two points\n  * and O(log N) for random access, where N is the number of positions.\n  *\n  * References:\n  *\n  * \t\thttp://www.oodesign.com/template-method-pattern.html\n  *\n  */\n \n class Interpolant {\n \n   constructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n \n     this.parameterPositions = parameterPositions;\n     this._cachedIndex = 0;\n \n     this.resultBuffer = resultBuffer !== undefined ?\n       resultBuffer : new sampleValues.constructor( sampleSize );\n     this.sampleValues = sampleValues;\n     this.valueSize = sampleSize;\n \n     this.settings = null;\n     this.DefaultSettings_ = {};\n \n   }\n \n   evaluate( t ) {\n \n     const pp = this.parameterPositions;\n     let i1 = this._cachedIndex,\n       t1 = pp[ i1 ],\n       t0 = pp[ i1 - 1 ];\n \n     validate_interval: {\n \n       seek: {\n \n         let right;\n \n         linear_scan: {\n \n           //- See http://jsperf.com/comparison-to-undefined/3\n           //- slower code:\n           //-\n           //- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n           forward_scan: if ( ! ( t < t1 ) ) {\n \n             for ( let giveUpAt = i1 + 2; ; ) {\n \n               if ( t1 === undefined ) {\n \n                 if ( t < t0 ) break forward_scan;\n \n                 // after end\n \n                 i1 = pp.length;\n                 this._cachedIndex = i1;\n                 return this.afterEnd_( i1 - 1, t, t0 );\n \n               }\n \n               if ( i1 === giveUpAt ) break; // this loop\n \n               t0 = t1;\n               t1 = pp[ ++ i1 ];\n \n               if ( t < t1 ) {\n \n                 // we have arrived at the sought interval\n                 break seek;\n \n               }\n \n             }\n \n             // prepare binary search on the right side of the index\n             right = pp.length;\n             break linear_scan;\n \n           }\n \n           //- slower code:\n           //-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n           if ( ! ( t >= t0 ) ) {\n \n             // looping?\n \n             const t1global = pp[ 1 ];\n \n             if ( t < t1global ) {\n \n               i1 = 2; // + 1, using the scan for the details\n               t0 = t1global;\n \n             }\n \n             // linear reverse scan\n \n             for ( let giveUpAt = i1 - 2; ; ) {\n \n               if ( t0 === undefined ) {\n \n                 // before start\n \n                 this._cachedIndex = 0;\n                 return this.beforeStart_( 0, t, t1 );\n \n               }\n \n               if ( i1 === giveUpAt ) break; // this loop\n \n               t1 = t0;\n               t0 = pp[ -- i1 - 1 ];\n \n               if ( t >= t0 ) {\n \n                 // we have arrived at the sought interval\n                 break seek;\n \n               }\n \n             }\n \n             // prepare binary search on the left side of the index\n             right = i1;\n             i1 = 0;\n             break linear_scan;\n \n           }\n \n           // the interval is valid\n \n           break validate_interval;\n \n         } // linear scan\n \n         // binary search\n \n         while ( i1 < right ) {\n \n           const mid = ( i1 + right ) >>> 1;\n \n           if ( t < pp[ mid ] ) {\n \n             right = mid;\n \n           } else {\n \n             i1 = mid + 1;\n \n           }\n \n         }\n \n         t1 = pp[ i1 ];\n         t0 = pp[ i1 - 1 ];\n \n         // check boundary cases, again\n \n         if ( t0 === undefined ) {\n \n           this._cachedIndex = 0;\n           return this.beforeStart_( 0, t, t1 );\n \n         }\n \n         if ( t1 === undefined ) {\n \n           i1 = pp.length;\n           this._cachedIndex = i1;\n           return this.afterEnd_( i1 - 1, t0, t );\n \n         }\n \n       } // seek\n \n       this._cachedIndex = i1;\n \n       this.intervalChanged_( i1, t0, t1 );\n \n     } // validate_interval\n \n     return this.interpolate_( i1, t0, t, t1 );\n \n   }\n \n   getSettings_() {\n \n     return this.settings || this.DefaultSettings_;\n \n   }\n \n   copySampleValue_( index ) {\n \n     // copies a sample value to the result buffer\n \n     const result = this.resultBuffer,\n       values = this.sampleValues,\n       stride = this.valueSize,\n       offset = index * stride;\n \n     for ( let i = 0; i !== stride; ++ i ) {\n \n       result[ i ] = values[ offset + i ];\n \n     }\n \n     return result;\n \n   }\n \n   // Template methods for derived classes:\n \n   interpolate_( /* i1, t0, t, t1 */ ) {\n \n     throw new Error( 'call to abstract method' );\n     // implementations shall return this.resultBuffer\n \n   }\n \n   intervalChanged_( /* i1, t0, t1 */ ) {\n \n     // empty\n \n   }\n \n }\n \n // ALIAS DEFINITIONS\n \n Interpolant.prototype.beforeStart_ = Interpolant.prototype.copySampleValue_;\n Interpolant.prototype.afterEnd_ = Interpolant.prototype.copySampleValue_;\n \n /**\n  * Fast and simple cubic spline interpolant.\n  *\n  * It was derived from a Hermitian construction setting the first derivative\n  * at each sample position to the linear slope between neighboring positions\n  * over their parameter interval.\n  */\n \n class CubicInterpolant extends Interpolant {\n \n   constructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n \n     super( parameterPositions, sampleValues, sampleSize, resultBuffer );\n \n     this._weightPrev = - 0;\n     this._offsetPrev = - 0;\n     this._weightNext = - 0;\n     this._offsetNext = - 0;\n \n     this.DefaultSettings_ = {\n \n       endingStart: ZeroCurvatureEnding,\n       endingEnd: ZeroCurvatureEnding\n \n     };\n \n   }\n \n   intervalChanged_( i1, t0, t1 ) {\n \n     const pp = this.parameterPositions;\n     let iPrev = i1 - 2,\n       iNext = i1 + 1,\n \n       tPrev = pp[ iPrev ],\n       tNext = pp[ iNext ];\n \n     if ( tPrev === undefined ) {\n \n       switch ( this.getSettings_().endingStart ) {\n \n         case ZeroSlopeEnding:\n \n           // f'(t0) = 0\n           iPrev = i1;\n           tPrev = 2 * t0 - t1;\n \n           break;\n \n         case WrapAroundEnding:\n \n           // use the other end of the curve\n           iPrev = pp.length - 2;\n           tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n \n           break;\n \n         default: // ZeroCurvatureEnding\n \n           // f''(t0) = 0 a.k.a. Natural Spline\n           iPrev = i1;\n           tPrev = t1;\n \n       }\n \n     }\n \n     if ( tNext === undefined ) {\n \n       switch ( this.getSettings_().endingEnd ) {\n \n         case ZeroSlopeEnding:\n \n           // f'(tN) = 0\n           iNext = i1;\n           tNext = 2 * t1 - t0;\n \n           break;\n \n         case WrapAroundEnding:\n \n           // use the other end of the curve\n           iNext = 1;\n           tNext = t1 + pp[ 1 ] - pp[ 0 ];\n \n           break;\n \n         default: // ZeroCurvatureEnding\n \n           // f''(tN) = 0, a.k.a. Natural Spline\n           iNext = i1 - 1;\n           tNext = t0;\n \n       }\n \n     }\n \n     const halfDt = ( t1 - t0 ) * 0.5,\n       stride = this.valueSize;\n \n     this._weightPrev = halfDt / ( t0 - tPrev );\n     this._weightNext = halfDt / ( tNext - t1 );\n     this._offsetPrev = iPrev * stride;\n     this._offsetNext = iNext * stride;\n \n   }\n \n   interpolate_( i1, t0, t, t1 ) {\n \n     const result = this.resultBuffer,\n       values = this.sampleValues,\n       stride = this.valueSize,\n \n       o1 = i1 * stride,\t\to0 = o1 - stride,\n       oP = this._offsetPrev, \toN = this._offsetNext,\n       wP = this._weightPrev,\twN = this._weightNext,\n \n       p = ( t - t0 ) / ( t1 - t0 ),\n       pp = p * p,\n       ppp = pp * p;\n \n     // evaluate polynomials\n \n     const sP = - wP * ppp + 2 * wP * pp - wP * p;\n     const s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n     const s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n     const sN = wN * ppp - wN * pp;\n \n     // combine data linearly\n \n     for ( let i = 0; i !== stride; ++ i ) {\n \n       result[ i ] =\n           sP * values[ oP + i ] +\n           s0 * values[ o0 + i ] +\n           s1 * values[ o1 + i ] +\n           sN * values[ oN + i ];\n \n     }\n \n     return result;\n \n   }\n \n }\n \n class LinearInterpolant extends Interpolant {\n \n   constructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n \n     super( parameterPositions, sampleValues, sampleSize, resultBuffer );\n \n   }\n \n   interpolate_( i1, t0, t, t1 ) {\n \n     const result = this.resultBuffer,\n       values = this.sampleValues,\n       stride = this.valueSize,\n \n       offset1 = i1 * stride,\n       offset0 = offset1 - stride,\n \n       weight1 = ( t - t0 ) / ( t1 - t0 ),\n       weight0 = 1 - weight1;\n \n     for ( let i = 0; i !== stride; ++ i ) {\n \n       result[ i ] =\n           values[ offset0 + i ] * weight0 +\n           values[ offset1 + i ] * weight1;\n \n     }\n \n     return result;\n \n   }\n \n }\n \n /**\n  *\n  * Interpolant that evaluates to the sample value at the position preceeding\n  * the parameter.\n  */\n \n class DiscreteInterpolant extends Interpolant {\n \n   constructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n \n     super( parameterPositions, sampleValues, sampleSize, resultBuffer );\n \n   }\n \n   interpolate_( i1 /*, t0, t, t1 */ ) {\n \n     return this.copySampleValue_( i1 - 1 );\n \n   }\n \n }\n \n class KeyframeTrack {\n \n   constructor( name, times, values, interpolation ) {\n \n     if ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );\n     if ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );\n \n     this.name = name;\n \n     this.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n     this.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n \n     this.setInterpolation( interpolation || this.DefaultInterpolation );\n \n   }\n \n   // Serialization (in static context, because of constructor invocation\n   // and automatic invocation of .toJSON):\n \n   static toJSON( track ) {\n \n     const trackType = track.constructor;\n \n     let json;\n \n     // derived classes can define a static toJSON method\n     if ( trackType.toJSON !== this.toJSON ) {\n \n       json = trackType.toJSON( track );\n \n     } else {\n \n       // by default, we assume the data can be serialized as-is\n       json = {\n \n         'name': track.name,\n         'times': AnimationUtils.convertArray( track.times, Array ),\n         'values': AnimationUtils.convertArray( track.values, Array )\n \n       };\n \n       const interpolation = track.getInterpolation();\n \n       if ( interpolation !== track.DefaultInterpolation ) {\n \n         json.interpolation = interpolation;\n \n       }\n \n     }\n \n     json.type = track.ValueTypeName; // mandatory\n \n     return json;\n \n   }\n \n   InterpolantFactoryMethodDiscrete( result ) {\n \n     return new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n \n   }\n \n   InterpolantFactoryMethodLinear( result ) {\n \n     return new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n \n   }\n \n   InterpolantFactoryMethodSmooth( result ) {\n \n     return new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n \n   }\n \n   setInterpolation( interpolation ) {\n \n     let factoryMethod;\n \n     switch ( interpolation ) {\n \n       case InterpolateDiscrete:\n \n         factoryMethod = this.InterpolantFactoryMethodDiscrete;\n \n         break;\n \n       case InterpolateLinear:\n \n         factoryMethod = this.InterpolantFactoryMethodLinear;\n \n         break;\n \n       case InterpolateSmooth:\n \n         factoryMethod = this.InterpolantFactoryMethodSmooth;\n \n         break;\n \n     }\n \n     if ( factoryMethod === undefined ) {\n \n       const message = 'unsupported interpolation for ' +\n         this.ValueTypeName + ' keyframe track named ' + this.name;\n \n       if ( this.createInterpolant === undefined ) {\n \n         // fall back to default, unless the default itself is messed up\n         if ( interpolation !== this.DefaultInterpolation ) {\n \n           this.setInterpolation( this.DefaultInterpolation );\n \n         } else {\n \n           throw new Error( message ); // fatal, in this case\n \n         }\n \n       }\n \n       console.warn( 'THREE.KeyframeTrack:', message );\n       return this;\n \n     }\n \n     this.createInterpolant = factoryMethod;\n \n     return this;\n \n   }\n \n   getInterpolation() {\n \n     switch ( this.createInterpolant ) {\n \n       case this.InterpolantFactoryMethodDiscrete:\n \n         return InterpolateDiscrete;\n \n       case this.InterpolantFactoryMethodLinear:\n \n         return InterpolateLinear;\n \n       case this.InterpolantFactoryMethodSmooth:\n \n         return InterpolateSmooth;\n \n     }\n \n   }\n \n   getValueSize() {\n \n     return this.values.length / this.times.length;\n \n   }\n \n   // move all keyframes either forwards or backwards in time\n   shift( timeOffset ) {\n \n     if ( timeOffset !== 0.0 ) {\n \n       const times = this.times;\n \n       for ( let i = 0, n = times.length; i !== n; ++ i ) {\n \n         times[ i ] += timeOffset;\n \n       }\n \n     }\n \n     return this;\n \n   }\n \n   // scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n   scale( timeScale ) {\n \n     if ( timeScale !== 1.0 ) {\n \n       const times = this.times;\n \n       for ( let i = 0, n = times.length; i !== n; ++ i ) {\n \n         times[ i ] *= timeScale;\n \n       }\n \n     }\n \n     return this;\n \n   }\n \n   // removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n   // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n   trim( startTime, endTime ) {\n \n     const times = this.times,\n       nKeys = times.length;\n \n     let from = 0,\n       to = nKeys - 1;\n \n     while ( from !== nKeys && times[ from ] < startTime ) {\n \n       ++ from;\n \n     }\n \n     while ( to !== - 1 && times[ to ] > endTime ) {\n \n       -- to;\n \n     }\n \n     ++ to; // inclusive -> exclusive bound\n \n     if ( from !== 0 || to !== nKeys ) {\n \n       // empty tracks are forbidden, so keep at least one keyframe\n       if ( from >= to ) {\n \n         to = Math.max( to, 1 );\n         from = to - 1;\n \n       }\n \n       const stride = this.getValueSize();\n       this.times = AnimationUtils.arraySlice( times, from, to );\n       this.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\n \n     }\n \n     return this;\n \n   }\n \n   // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n   validate() {\n \n     let valid = true;\n \n     const valueSize = this.getValueSize();\n     if ( valueSize - Math.floor( valueSize ) !== 0 ) {\n \n       console.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n       valid = false;\n \n     }\n \n     const times = this.times,\n       values = this.values,\n \n       nKeys = times.length;\n \n     if ( nKeys === 0 ) {\n \n       console.error( 'THREE.KeyframeTrack: Track is empty.', this );\n       valid = false;\n \n     }\n \n     let prevTime = null;\n \n     for ( let i = 0; i !== nKeys; i ++ ) {\n \n       const currTime = times[ i ];\n \n       if ( typeof currTime === 'number' && isNaN( currTime ) ) {\n \n         console.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n         valid = false;\n         break;\n \n       }\n \n       if ( prevTime !== null && prevTime > currTime ) {\n \n         console.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n         valid = false;\n         break;\n \n       }\n \n       prevTime = currTime;\n \n     }\n \n     if ( values !== undefined ) {\n \n       if ( AnimationUtils.isTypedArray( values ) ) {\n \n         for ( let i = 0, n = values.length; i !== n; ++ i ) {\n \n           const value = values[ i ];\n \n           if ( isNaN( value ) ) {\n \n             console.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n             valid = false;\n             break;\n \n           }\n \n         }\n \n       }\n \n     }\n \n     return valid;\n \n   }\n \n   // removes equivalent sequential keys as common in morph target sequences\n   // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n   optimize() {\n \n     // times or values may be shared with other tracks, so overwriting is unsafe\n     const times = AnimationUtils.arraySlice( this.times ),\n       values = AnimationUtils.arraySlice( this.values ),\n       stride = this.getValueSize(),\n \n       smoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n \n       lastIndex = times.length - 1;\n \n     let writeIndex = 1;\n \n     for ( let i = 1; i < lastIndex; ++ i ) {\n \n       let keep = false;\n \n       const time = times[ i ];\n       const timeNext = times[ i + 1 ];\n \n       // remove adjacent keyframes scheduled at the same time\n \n       if ( time !== timeNext && ( i !== 1 || time !== times[ 0 ] ) ) {\n \n         if ( ! smoothInterpolation ) {\n \n           // remove unnecessary keyframes same as their neighbors\n \n           const offset = i * stride,\n             offsetP = offset - stride,\n             offsetN = offset + stride;\n \n           for ( let j = 0; j !== stride; ++ j ) {\n \n             const value = values[ offset + j ];\n \n             if ( value !== values[ offsetP + j ] ||\n               value !== values[ offsetN + j ] ) {\n \n               keep = true;\n               break;\n \n             }\n \n           }\n \n         } else {\n \n           keep = true;\n \n         }\n \n       }\n \n       // in-place compaction\n \n       if ( keep ) {\n \n         if ( i !== writeIndex ) {\n \n           times[ writeIndex ] = times[ i ];\n \n           const readOffset = i * stride,\n             writeOffset = writeIndex * stride;\n \n           for ( let j = 0; j !== stride; ++ j ) {\n \n             values[ writeOffset + j ] = values[ readOffset + j ];\n \n           }\n \n         }\n \n         ++ writeIndex;\n \n       }\n \n     }\n \n     // flush last keyframe (compaction looks ahead)\n \n     if ( lastIndex > 0 ) {\n \n       times[ writeIndex ] = times[ lastIndex ];\n \n       for ( let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n \n         values[ writeOffset + j ] = values[ readOffset + j ];\n \n       }\n \n       ++ writeIndex;\n \n     }\n \n     if ( writeIndex !== times.length ) {\n \n       this.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n       this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n \n     } else {\n \n       this.times = times;\n       this.values = values;\n \n     }\n \n     return this;\n \n   }\n \n   clone() {\n \n     const times = AnimationUtils.arraySlice( this.times, 0 );\n     const values = AnimationUtils.arraySlice( this.values, 0 );\n \n     const TypedKeyframeTrack = this.constructor;\n     const track = new TypedKeyframeTrack( this.name, times, values );\n \n     // Interpolant argument to constructor is not saved, so copy the factory method directly.\n     track.createInterpolant = this.createInterpolant;\n \n     return track;\n \n   }\n \n }\n \n KeyframeTrack.prototype.TimeBufferType = Float32Array;\n KeyframeTrack.prototype.ValueBufferType = Float32Array;\n KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n \n /**\n  * A Track of Boolean keyframe values.\n  */\n class BooleanKeyframeTrack extends KeyframeTrack {}\n \n BooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\n BooleanKeyframeTrack.prototype.ValueBufferType = Array;\n BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n \n /**\n  * A Track of keyframe values that represent color.\n  */\n class ColorKeyframeTrack extends KeyframeTrack {}\n \n ColorKeyframeTrack.prototype.ValueTypeName = 'color';\n \n /**\n  * A Track of numeric keyframe values.\n  */\n class NumberKeyframeTrack extends KeyframeTrack {}\n \n NumberKeyframeTrack.prototype.ValueTypeName = 'number';\n \n /**\n  * Spherical linear unit quaternion interpolant.\n  */\n \n class QuaternionLinearInterpolant extends Interpolant {\n \n   constructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n \n     super( parameterPositions, sampleValues, sampleSize, resultBuffer );\n \n   }\n \n   interpolate_( i1, t0, t, t1 ) {\n \n     const result = this.resultBuffer,\n       values = this.sampleValues,\n       stride = this.valueSize,\n \n       alpha = ( t - t0 ) / ( t1 - t0 );\n \n     let offset = i1 * stride;\n \n     for ( let end = offset + stride; offset !== end; offset += 4 ) {\n \n       Quaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n \n     }\n \n     return result;\n \n   }\n \n }\n \n /**\n  * A Track of quaternion keyframe values.\n  */\n class QuaternionKeyframeTrack extends KeyframeTrack {\n \n   InterpolantFactoryMethodLinear( result ) {\n \n     return new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n \n   }\n \n }\n \n QuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion';\n // ValueBufferType is inherited\n QuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n \n /**\n  * A Track that interpolates Strings\n  */\n class StringKeyframeTrack extends KeyframeTrack {}\n \n StringKeyframeTrack.prototype.ValueTypeName = 'string';\n StringKeyframeTrack.prototype.ValueBufferType = Array;\n StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n \n /**\n  * A Track of vectored keyframe values.\n  */\n class VectorKeyframeTrack extends KeyframeTrack {}\n \n VectorKeyframeTrack.prototype.ValueTypeName = 'vector';\n \n class AnimationClip {\n \n   constructor( name, duration = - 1, tracks, blendMode = NormalAnimationBlendMode ) {\n \n     this.name = name;\n     this.tracks = tracks;\n     this.duration = duration;\n     this.blendMode = blendMode;\n \n     this.uuid = generateUUID();\n \n     // this means it should figure out its duration by scanning the tracks\n     if ( this.duration < 0 ) {\n \n       this.resetDuration();\n \n     }\n \n   }\n \n \n   static parse( json ) {\n \n     const tracks = [],\n       jsonTracks = json.tracks,\n       frameTime = 1.0 / ( json.fps || 1.0 );\n \n     for ( let i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n \n       tracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n \n     }\n \n     const clip = new this( json.name, json.duration, tracks, json.blendMode );\n     clip.uuid = json.uuid;\n \n     return clip;\n \n   }\n \n   static toJSON( clip ) {\n \n     const tracks = [],\n       clipTracks = clip.tracks;\n \n     const json = {\n \n       'name': clip.name,\n       'duration': clip.duration,\n       'tracks': tracks,\n       'uuid': clip.uuid,\n       'blendMode': clip.blendMode\n \n     };\n \n     for ( let i = 0, n = clipTracks.length; i !== n; ++ i ) {\n \n       tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n \n     }\n \n     return json;\n \n   }\n \n   static CreateFromMorphTargetSequence( name, morphTargetSequence, fps, noLoop ) {\n \n     const numMorphTargets = morphTargetSequence.length;\n     const tracks = [];\n \n     for ( let i = 0; i < numMorphTargets; i ++ ) {\n \n       let times = [];\n       let values = [];\n \n       times.push(\n         ( i + numMorphTargets - 1 ) % numMorphTargets,\n         i,\n         ( i + 1 ) % numMorphTargets );\n \n       values.push( 0, 1, 0 );\n \n       const order = AnimationUtils.getKeyframeOrder( times );\n       times = AnimationUtils.sortedArray( times, 1, order );\n       values = AnimationUtils.sortedArray( values, 1, order );\n \n       // if there is a key at the first frame, duplicate it as the\n       // last frame as well for perfect loop.\n       if ( ! noLoop && times[ 0 ] === 0 ) {\n \n         times.push( numMorphTargets );\n         values.push( values[ 0 ] );\n \n       }\n \n       tracks.push(\n         new NumberKeyframeTrack(\n           '.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n           times, values\n         ).scale( 1.0 / fps ) );\n \n     }\n \n     return new this( name, - 1, tracks );\n \n   }\n \n   static findByName( objectOrClipArray, name ) {\n \n     let clipArray = objectOrClipArray;\n \n     if ( ! Array.isArray( objectOrClipArray ) ) {\n \n       const o = objectOrClipArray;\n       clipArray = o.geometry && o.geometry.animations || o.animations;\n \n     }\n \n     for ( let i = 0; i < clipArray.length; i ++ ) {\n \n       if ( clipArray[ i ].name === name ) {\n \n         return clipArray[ i ];\n \n       }\n \n     }\n \n     return null;\n \n   }\n \n   static CreateClipsFromMorphTargetSequences( morphTargets, fps, noLoop ) {\n \n     const animationToMorphTargets = {};\n \n     // tested with https://regex101.com/ on trick sequences\n     // such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n     const pattern = /^([\\w-]*?)([\\d]+)$/;\n \n     // sort morph target names into animation groups based\n     // patterns like Walk_001, Walk_002, Run_001, Run_002\n     for ( let i = 0, il = morphTargets.length; i < il; i ++ ) {\n \n       const morphTarget = morphTargets[ i ];\n       const parts = morphTarget.name.match( pattern );\n \n       if ( parts && parts.length > 1 ) {\n \n         const name = parts[ 1 ];\n \n         let animationMorphTargets = animationToMorphTargets[ name ];\n \n         if ( ! animationMorphTargets ) {\n \n           animationToMorphTargets[ name ] = animationMorphTargets = [];\n \n         }\n \n         animationMorphTargets.push( morphTarget );\n \n       }\n \n     }\n \n     const clips = [];\n \n     for ( const name in animationToMorphTargets ) {\n \n       clips.push( this.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n \n     }\n \n     return clips;\n \n   }\n \n   // parse the animation.hierarchy format\n   static parseAnimation( animation, bones ) {\n \n     if ( ! animation ) {\n \n       console.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n       return null;\n \n     }\n \n     const addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n \n       // only return track if there are actually keys.\n       if ( animationKeys.length !== 0 ) {\n \n         const times = [];\n         const values = [];\n \n         AnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n \n         // empty keys are filtered out, so check again\n         if ( times.length !== 0 ) {\n \n           destTracks.push( new trackType( trackName, times, values ) );\n \n         }\n \n       }\n \n     };\n \n     const tracks = [];\n \n     const clipName = animation.name || 'default';\n     const fps = animation.fps || 30;\n     const blendMode = animation.blendMode;\n \n     // automatic length determination in AnimationClip.\n     let duration = animation.length || - 1;\n \n     const hierarchyTracks = animation.hierarchy || [];\n \n     for ( let h = 0; h < hierarchyTracks.length; h ++ ) {\n \n       const animationKeys = hierarchyTracks[ h ].keys;\n \n       // skip empty tracks\n       if ( ! animationKeys || animationKeys.length === 0 ) continue;\n \n       // process morph targets\n       if ( animationKeys[ 0 ].morphTargets ) {\n \n         // figure out all morph targets used in this track\n         const morphTargetNames = {};\n \n         let k;\n \n         for ( k = 0; k < animationKeys.length; k ++ ) {\n \n           if ( animationKeys[ k ].morphTargets ) {\n \n             for ( let m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n \n               morphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n \n             }\n \n           }\n \n         }\n \n         // create a track for each morph target with all zero\n         // morphTargetInfluences except for the keys in which\n         // the morphTarget is named.\n         for ( const morphTargetName in morphTargetNames ) {\n \n           const times = [];\n           const values = [];\n \n           for ( let m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n \n             const animationKey = animationKeys[ k ];\n \n             times.push( animationKey.time );\n             values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n \n           }\n \n           tracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n \n         }\n \n         duration = morphTargetNames.length * ( fps || 1.0 );\n \n       } else {\n \n         // ...assume skeletal animation\n \n         const boneName = '.bones[' + bones[ h ].name + ']';\n \n         addNonemptyTrack(\n           VectorKeyframeTrack, boneName + '.position',\n           animationKeys, 'pos', tracks );\n \n         addNonemptyTrack(\n           QuaternionKeyframeTrack, boneName + '.quaternion',\n           animationKeys, 'rot', tracks );\n \n         addNonemptyTrack(\n           VectorKeyframeTrack, boneName + '.scale',\n           animationKeys, 'scl', tracks );\n \n       }\n \n     }\n \n     if ( tracks.length === 0 ) {\n \n       return null;\n \n     }\n \n     const clip = new this( clipName, duration, tracks, blendMode );\n \n     return clip;\n \n   }\n \n   resetDuration() {\n \n     const tracks = this.tracks;\n     let duration = 0;\n \n     for ( let i = 0, n = tracks.length; i !== n; ++ i ) {\n \n       const track = this.tracks[ i ];\n \n       duration = Math.max( duration, track.times[ track.times.length - 1 ] );\n \n     }\n \n     this.duration = duration;\n \n     return this;\n \n   }\n \n   trim() {\n \n     for ( let i = 0; i < this.tracks.length; i ++ ) {\n \n       this.tracks[ i ].trim( 0, this.duration );\n \n     }\n \n     return this;\n \n   }\n \n   validate() {\n \n     let valid = true;\n \n     for ( let i = 0; i < this.tracks.length; i ++ ) {\n \n       valid = valid && this.tracks[ i ].validate();\n \n     }\n \n     return valid;\n \n   }\n \n   optimize() {\n \n     for ( let i = 0; i < this.tracks.length; i ++ ) {\n \n       this.tracks[ i ].optimize();\n \n     }\n \n     return this;\n \n   }\n \n   clone() {\n \n     const tracks = [];\n \n     for ( let i = 0; i < this.tracks.length; i ++ ) {\n \n       tracks.push( this.tracks[ i ].clone() );\n \n     }\n \n     return new this.constructor( this.name, this.duration, tracks, this.blendMode );\n \n   }\n \n   toJSON() {\n \n     return this.constructor.toJSON( this );\n \n   }\n \n }\n \n function getTrackTypeForValueTypeName( typeName ) {\n \n   switch ( typeName.toLowerCase() ) {\n \n     case 'scalar':\n     case 'double':\n     case 'float':\n     case 'number':\n     case 'integer':\n \n       return NumberKeyframeTrack;\n \n     case 'vector':\n     case 'vector2':\n     case 'vector3':\n     case 'vector4':\n \n       return VectorKeyframeTrack;\n \n     case 'color':\n \n       return ColorKeyframeTrack;\n \n     case 'quaternion':\n \n       return QuaternionKeyframeTrack;\n \n     case 'bool':\n     case 'boolean':\n \n       return BooleanKeyframeTrack;\n \n     case 'string':\n \n       return StringKeyframeTrack;\n \n   }\n \n   throw new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n \n }\n \n function parseKeyframeTrack( json ) {\n \n   if ( json.type === undefined ) {\n \n     throw new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n \n   }\n \n   const trackType = getTrackTypeForValueTypeName( json.type );\n \n   if ( json.times === undefined ) {\n \n     const times = [], values = [];\n \n     AnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n \n     json.times = times;\n     json.values = values;\n \n   }\n \n   // derived classes can define a static parse method\n   if ( trackType.parse !== undefined ) {\n \n     return trackType.parse( json );\n \n   } else {\n \n     // by default, we assume a constructor compatible with the base\n     return new trackType( json.name, json.times, json.values, json.interpolation );\n \n   }\n \n }\n \n const Cache = {\n \n   enabled: false,\n \n   files: {},\n \n   add: function ( key, file ) {\n \n     if ( this.enabled === false ) return;\n \n     // console.log( 'THREE.Cache', 'Adding key:', key );\n \n     this.files[ key ] = file;\n \n   },\n \n   get: function ( key ) {\n \n     if ( this.enabled === false ) return;\n \n     // console.log( 'THREE.Cache', 'Checking key:', key );\n \n     return this.files[ key ];\n \n   },\n \n   remove: function ( key ) {\n \n     delete this.files[ key ];\n \n   },\n \n   clear: function () {\n \n     this.files = {};\n \n   }\n \n };\n \n class LoadingManager {\n \n   constructor( onLoad, onProgress, onError ) {\n \n     const scope = this;\n \n     let isLoading = false;\n     let itemsLoaded = 0;\n     let itemsTotal = 0;\n     let urlModifier = undefined;\n     const handlers = [];\n \n     // Refer to #5689 for the reason why we don't set .onStart\n     // in the constructor\n \n     this.onStart = undefined;\n     this.onLoad = onLoad;\n     this.onProgress = onProgress;\n     this.onError = onError;\n \n     this.itemStart = function ( url ) {\n \n       itemsTotal ++;\n \n       if ( isLoading === false ) {\n \n         if ( scope.onStart !== undefined ) {\n \n           scope.onStart( url, itemsLoaded, itemsTotal );\n \n         }\n \n       }\n \n       isLoading = true;\n \n     };\n \n     this.itemEnd = function ( url ) {\n \n       itemsLoaded ++;\n \n       if ( scope.onProgress !== undefined ) {\n \n         scope.onProgress( url, itemsLoaded, itemsTotal );\n \n       }\n \n       if ( itemsLoaded === itemsTotal ) {\n \n         isLoading = false;\n \n         if ( scope.onLoad !== undefined ) {\n \n           scope.onLoad();\n \n         }\n \n       }\n \n     };\n \n     this.itemError = function ( url ) {\n \n       if ( scope.onError !== undefined ) {\n \n         scope.onError( url );\n \n       }\n \n     };\n \n     this.resolveURL = function ( url ) {\n \n       if ( urlModifier ) {\n \n         return urlModifier( url );\n \n       }\n \n       return url;\n \n     };\n \n     this.setURLModifier = function ( transform ) {\n \n       urlModifier = transform;\n \n       return this;\n \n     };\n \n     this.addHandler = function ( regex, loader ) {\n \n       handlers.push( regex, loader );\n \n       return this;\n \n     };\n \n     this.removeHandler = function ( regex ) {\n \n       const index = handlers.indexOf( regex );\n \n       if ( index !== - 1 ) {\n \n         handlers.splice( index, 2 );\n \n       }\n \n       return this;\n \n     };\n \n     this.getHandler = function ( file ) {\n \n       for ( let i = 0, l = handlers.length; i < l; i += 2 ) {\n \n         const regex = handlers[ i ];\n         const loader = handlers[ i + 1 ];\n \n         if ( regex.global ) regex.lastIndex = 0; // see #17920\n \n         if ( regex.test( file ) ) {\n \n           return loader;\n \n         }\n \n       }\n \n       return null;\n \n     };\n \n   }\n \n }\n \n const DefaultLoadingManager = new LoadingManager();\n \n class Loader {\n \n   constructor( manager ) {\n \n     this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n \n     this.crossOrigin = 'anonymous';\n     this.withCredentials = false;\n     this.path = '';\n     this.resourcePath = '';\n     this.requestHeader = {};\n \n   }\n \n   load( /* url, onLoad, onProgress, onError */ ) {}\n \n   loadAsync( url, onProgress ) {\n \n     const scope = this;\n \n     return new Promise( function ( resolve, reject ) {\n \n       scope.load( url, resolve, onProgress, reject );\n \n     } );\n \n   }\n \n   parse( /* data */ ) {}\n \n   setCrossOrigin( crossOrigin ) {\n \n     this.crossOrigin = crossOrigin;\n     return this;\n \n   }\n \n   setWithCredentials( value ) {\n \n     this.withCredentials = value;\n     return this;\n \n   }\n \n   setPath( path ) {\n \n     this.path = path;\n     return this;\n \n   }\n \n   setResourcePath( resourcePath ) {\n \n     this.resourcePath = resourcePath;\n     return this;\n \n   }\n \n   setRequestHeader( requestHeader ) {\n \n     this.requestHeader = requestHeader;\n     return this;\n \n   }\n \n }\n \n const loading = {};\n \n class FileLoader extends Loader {\n \n   constructor( manager ) {\n \n     super( manager );\n \n   }\n \n   load( url, onLoad, onProgress, onError ) {\n \n     if ( url === undefined ) url = '';\n \n     if ( this.path !== undefined ) url = this.path + url;\n \n     url = this.manager.resolveURL( url );\n \n     const cached = Cache.get( url );\n \n     if ( cached !== undefined ) {\n \n       this.manager.itemStart( url );\n \n       setTimeout( () => {\n \n         if ( onLoad ) onLoad( cached );\n \n         this.manager.itemEnd( url );\n \n       }, 0 );\n \n       return cached;\n \n     }\n \n     // Check if request is duplicate\n \n     if ( loading[ url ] !== undefined ) {\n \n       loading[ url ].push( {\n \n         onLoad: onLoad,\n         onProgress: onProgress,\n         onError: onError\n \n       } );\n \n       return;\n \n     }\n \n     // Initialise array for duplicate requests\n     loading[ url ] = [];\n \n     loading[ url ].push( {\n       onLoad: onLoad,\n       onProgress: onProgress,\n       onError: onError,\n     } );\n \n     // create request\n     const req = new Request( url, {\n       headers: new Headers( this.requestHeader ),\n       credentials: this.withCredentials ? 'include' : 'same-origin',\n       // An abort controller could be added within a future PR\n     } );\n \n     // start the fetch\n     fetch( req )\n       .then( response => {\n \n         if ( response.status === 200 || response.status === 0 ) {\n \n           // Some browsers return HTTP Status 0 when using non-http protocol\n           // e.g. 'file://' or 'data://'. Handle as success.\n \n           if ( response.status === 0 ) {\n \n             console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\n \n           }\n \n           const callbacks = loading[ url ];\n           const reader = response.body.getReader();\n           const contentLength = response.headers.get( 'Content-Length' );\n           const total = contentLength ? parseInt( contentLength ) : 0;\n           const lengthComputable = total !== 0;\n           let loaded = 0;\n \n           // periodically read data into the new stream tracking while download progress\n           return new ReadableStream( {\n             start( controller ) {\n \n               readData();\n \n               function readData() {\n \n                 reader.read().then( ( { done, value } ) => {\n \n                   if ( done ) {\n \n                     controller.close();\n \n                   } else {\n \n                     loaded += value.byteLength;\n \n                     const event = new ProgressEvent( 'progress', { lengthComputable, loaded, total } );\n                     for ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n \n                       const callback = callbacks[ i ];\n                       if ( callback.onProgress ) callback.onProgress( event );\n \n                     }\n \n                     controller.enqueue( value );\n                     readData();\n \n                   }\n \n                 } );\n \n               }\n \n             }\n \n           } );\n \n         } else {\n \n           throw Error( `fetch for \"${response.url}\" responded with ${response.status}: ${response.statusText}` );\n \n         }\n \n       } )\n       .then( stream => {\n \n         const response = new Response( stream );\n \n         switch ( this.responseType ) {\n \n           case 'arraybuffer':\n \n             return response.arrayBuffer();\n \n           case 'blob':\n \n             return response.blob();\n \n           case 'document':\n \n             return response.text()\n               .then( text => {\n \n                 const parser = new DOMParser();\n                 return parser.parseFromString( text, this.mimeType );\n \n               } );\n \n           case 'json':\n \n             return response.json();\n \n           default:\n \n             return response.text();\n \n         }\n \n       } )\n       .then( data => {\n \n         // Add to cache only on HTTP success, so that we do not cache\n         // error response bodies as proper responses to requests.\n         Cache.add( url, data );\n \n         const callbacks = loading[ url ];\n         delete loading[ url ];\n \n         for ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n \n           const callback = callbacks[ i ];\n           if ( callback.onLoad ) callback.onLoad( data );\n \n         }\n \n         this.manager.itemEnd( url );\n \n       } )\n       .catch( err => {\n \n         // Abort errors and other errors are handled the same\n \n         const callbacks = loading[ url ];\n         delete loading[ url ];\n \n         for ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n \n           const callback = callbacks[ i ];\n           if ( callback.onError ) callback.onError( err );\n \n         }\n \n         this.manager.itemError( url );\n         this.manager.itemEnd( url );\n \n       } );\n \n     this.manager.itemStart( url );\n \n   }\n \n   setResponseType( value ) {\n \n     this.responseType = value;\n     return this;\n \n   }\n \n   setMimeType( value ) {\n \n     this.mimeType = value;\n     return this;\n \n   }\n \n }\n \n class AnimationLoader extends Loader {\n \n   constructor( manager ) {\n \n     super( manager );\n \n   }\n \n   load( url, onLoad, onProgress, onError ) {\n \n     const scope = this;\n \n     const loader = new FileLoader( this.manager );\n     loader.setPath( this.path );\n     loader.setRequestHeader( this.requestHeader );\n     loader.setWithCredentials( this.withCredentials );\n     loader.load( url, function ( text ) {\n \n       try {\n \n         onLoad( scope.parse( JSON.parse( text ) ) );\n \n       } catch ( e ) {\n \n         if ( onError ) {\n \n           onError( e );\n \n         } else {\n \n           console.error( e );\n \n         }\n \n         scope.manager.itemError( url );\n \n       }\n \n     }, onProgress, onError );\n \n   }\n \n   parse( json ) {\n \n     const animations = [];\n \n     for ( let i = 0; i < json.length; i ++ ) {\n \n       const clip = AnimationClip.parse( json[ i ] );\n \n       animations.push( clip );\n \n     }\n \n     return animations;\n \n   }\n \n }\n \n /**\n  * Abstract Base class to block based textures loader (dds, pvr, ...)\n  *\n  * Sub classes have to implement the parse() method which will be used in load().\n  */\n \n class CompressedTextureLoader extends Loader {\n \n   constructor( manager ) {\n \n     super( manager );\n \n   }\n \n   load( url, onLoad, onProgress, onError ) {\n \n     const scope = this;\n \n     const images = [];\n \n     const texture = new CompressedTexture();\n \n     const loader = new FileLoader( this.manager );\n     loader.setPath( this.path );\n     loader.setResponseType( 'arraybuffer' );\n     loader.setRequestHeader( this.requestHeader );\n     loader.setWithCredentials( scope.withCredentials );\n \n     let loaded = 0;\n \n     function loadTexture( i ) {\n \n       loader.load( url[ i ], function ( buffer ) {\n \n         const texDatas = scope.parse( buffer, true );\n \n         images[ i ] = {\n           width: texDatas.width,\n           height: texDatas.height,\n           format: texDatas.format,\n           mipmaps: texDatas.mipmaps\n         };\n \n         loaded += 1;\n \n         if ( loaded === 6 ) {\n \n           if ( texDatas.mipmapCount === 1 ) texture.minFilter = LinearFilter;\n \n           texture.image = images;\n           texture.format = texDatas.format;\n           texture.needsUpdate = true;\n \n           if ( onLoad ) onLoad( texture );\n \n         }\n \n       }, onProgress, onError );\n \n     }\n \n     if ( Array.isArray( url ) ) {\n \n       for ( let i = 0, il = url.length; i < il; ++ i ) {\n \n         loadTexture( i );\n \n       }\n \n     } else {\n \n       // compressed cubemap texture stored in a single DDS file\n \n       loader.load( url, function ( buffer ) {\n \n         const texDatas = scope.parse( buffer, true );\n \n         if ( texDatas.isCubemap ) {\n \n           const faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n \n           for ( let f = 0; f < faces; f ++ ) {\n \n             images[ f ] = { mipmaps: [] };\n \n             for ( let i = 0; i < texDatas.mipmapCount; i ++ ) {\n \n               images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n               images[ f ].format = texDatas.format;\n               images[ f ].width = texDatas.width;\n               images[ f ].height = texDatas.height;\n \n             }\n \n           }\n \n           texture.image = images;\n \n         } else {\n \n           texture.image.width = texDatas.width;\n           texture.image.height = texDatas.height;\n           texture.mipmaps = texDatas.mipmaps;\n \n         }\n \n         if ( texDatas.mipmapCount === 1 ) {\n \n           texture.minFilter = LinearFilter;\n \n         }\n \n         texture.format = texDatas.format;\n         texture.needsUpdate = true;\n \n         if ( onLoad ) onLoad( texture );\n \n       }, onProgress, onError );\n \n     }\n \n     return texture;\n \n   }\n \n }\n \n class ImageLoader extends Loader {\n \n   constructor( manager ) {\n \n     super( manager );\n \n   }\n \n   load( url, onLoad, onProgress, onError ) {\n \n     if ( this.path !== undefined ) url = this.path + url;\n \n     url = this.manager.resolveURL( url );\n \n     const scope = this;\n \n     const cached = Cache.get( url );\n \n     if ( cached !== undefined ) {\n \n       scope.manager.itemStart( url );\n \n       setTimeout( function () {\n \n         if ( onLoad ) onLoad( cached );\n \n         scope.manager.itemEnd( url );\n \n       }, 0 );\n \n       return cached;\n \n     }\n \n     const image = createElementNS( 'img' );\n \n     function onImageLoad() {\n \n       removeEventListeners();\n \n       Cache.add( url, this );\n \n       if ( onLoad ) onLoad( this );\n \n       scope.manager.itemEnd( url );\n \n     }\n \n     function onImageError( event ) {\n \n       removeEventListeners();\n \n       if ( onError ) onError( event );\n \n       scope.manager.itemError( url );\n       scope.manager.itemEnd( url );\n \n     }\n \n     function removeEventListeners() {\n \n       image.removeEventListener( 'load', onImageLoad, false );\n       image.removeEventListener( 'error', onImageError, false );\n \n     }\n \n     image.addEventListener( 'load', onImageLoad, false );\n     image.addEventListener( 'error', onImageError, false );\n \n     if ( url.substr( 0, 5 ) !== 'data:' ) {\n \n       if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n \n     }\n \n     scope.manager.itemStart( url );\n \n     image.src = url;\n \n     return image;\n \n   }\n \n }\n \n class CubeTextureLoader extends Loader {\n \n   constructor( manager ) {\n \n     super( manager );\n \n   }\n \n   load( urls, onLoad, onProgress, onError ) {\n \n     const texture = new CubeTexture();\n \n     const loader = new ImageLoader( this.manager );\n     loader.setCrossOrigin( this.crossOrigin );\n     loader.setPath( this.path );\n \n     let loaded = 0;\n \n     function loadTexture( i ) {\n \n       loader.load( urls[ i ], function ( image ) {\n \n         texture.images[ i ] = image;\n \n         loaded ++;\n \n         if ( loaded === 6 ) {\n \n           texture.needsUpdate = true;\n \n           if ( onLoad ) onLoad( texture );\n \n         }\n \n       }, undefined, onError );\n \n     }\n \n     for ( let i = 0; i < urls.length; ++ i ) {\n \n       loadTexture( i );\n \n     }\n \n     return texture;\n \n   }\n \n }\n \n /**\n  * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n  *\n  * Sub classes have to implement the parse() method which will be used in load().\n  */\n \n class DataTextureLoader extends Loader {\n \n   constructor( manager ) {\n \n     super( manager );\n \n   }\n \n   load( url, onLoad, onProgress, onError ) {\n \n     const scope = this;\n \n     const texture = new DataTexture();\n \n     const loader = new FileLoader( this.manager );\n     loader.setResponseType( 'arraybuffer' );\n     loader.setRequestHeader( this.requestHeader );\n     loader.setPath( this.path );\n     loader.setWithCredentials( scope.withCredentials );\n     loader.load( url, function ( buffer ) {\n \n       const texData = scope.parse( buffer );\n \n       if ( ! texData ) return;\n \n       if ( texData.image !== undefined ) {\n \n         texture.image = texData.image;\n \n       } else if ( texData.data !== undefined ) {\n \n         texture.image.width = texData.width;\n         texture.image.height = texData.height;\n         texture.image.data = texData.data;\n \n       }\n \n       texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n       texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n \n       texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n       texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n \n       texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n \n       if ( texData.encoding !== undefined ) {\n \n         texture.encoding = texData.encoding;\n \n       }\n \n       if ( texData.flipY !== undefined ) {\n \n         texture.flipY = texData.flipY;\n \n       }\n \n       if ( texData.format !== undefined ) {\n \n         texture.format = texData.format;\n \n       }\n \n       if ( texData.type !== undefined ) {\n \n         texture.type = texData.type;\n \n       }\n \n       if ( texData.mipmaps !== undefined ) {\n \n         texture.mipmaps = texData.mipmaps;\n         texture.minFilter = LinearMipmapLinearFilter; // presumably...\n \n       }\n \n       if ( texData.mipmapCount === 1 ) {\n \n         texture.minFilter = LinearFilter;\n \n       }\n \n       if ( texData.generateMipmaps !== undefined ) {\n \n         texture.generateMipmaps = texData.generateMipmaps;\n \n       }\n \n       texture.needsUpdate = true;\n \n       if ( onLoad ) onLoad( texture, texData );\n \n     }, onProgress, onError );\n \n \n     return texture;\n \n   }\n \n }\n \n class TextureLoader extends Loader {\n \n   constructor( manager ) {\n \n     super( manager );\n \n   }\n \n   load( url, onLoad, onProgress, onError ) {\n \n     const texture = new Texture();\n \n     const loader = new ImageLoader( this.manager );\n     loader.setCrossOrigin( this.crossOrigin );\n     loader.setPath( this.path );\n \n     loader.load( url, function ( image ) {\n \n       texture.image = image;\n       texture.needsUpdate = true;\n \n       if ( onLoad !== undefined ) {\n \n         onLoad( texture );\n \n       }\n \n     }, onProgress, onError );\n \n     return texture;\n \n   }\n \n }\n \n class Light extends Object3D {\n \n   constructor( color, intensity = 1 ) {\n \n     super();\n \n     this.type = 'Light';\n \n     this.color = new Color( color );\n     this.intensity = intensity;\n \n   }\n \n   dispose() {\n \n     // Empty here in base class; some subclasses override.\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.color.copy( source.color );\n     this.intensity = source.intensity;\n \n     return this;\n \n   }\n \n   toJSON( meta ) {\n \n     const data = super.toJSON( meta );\n \n     data.object.color = this.color.getHex();\n     data.object.intensity = this.intensity;\n \n     if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n \n     if ( this.distance !== undefined ) data.object.distance = this.distance;\n     if ( this.angle !== undefined ) data.object.angle = this.angle;\n     if ( this.decay !== undefined ) data.object.decay = this.decay;\n     if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n \n     if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n \n     return data;\n \n   }\n \n }\n \n Light.prototype.isLight = true;\n \n class HemisphereLight extends Light {\n \n   constructor( skyColor, groundColor, intensity ) {\n \n     super( skyColor, intensity );\n \n     this.type = 'HemisphereLight';\n \n     this.position.copy( Object3D.DefaultUp );\n     this.updateMatrix();\n \n     this.groundColor = new Color( groundColor );\n \n   }\n \n   copy( source ) {\n \n     Light.prototype.copy.call( this, source );\n \n     this.groundColor.copy( source.groundColor );\n \n     return this;\n \n   }\n \n }\n \n HemisphereLight.prototype.isHemisphereLight = true;\n \n const _projScreenMatrix$1 = /*@__PURE__*/ new Matrix4();\n const _lightPositionWorld$1 = /*@__PURE__*/ new Vector3();\n const _lookTarget$1 = /*@__PURE__*/ new Vector3();\n \n class LightShadow {\n \n   constructor( camera ) {\n \n     this.camera = camera;\n \n     this.bias = 0;\n     this.normalBias = 0;\n     this.radius = 1;\n     this.blurSamples = 8;\n \n     this.mapSize = new Vector2( 512, 512 );\n \n     this.map = null;\n     this.mapPass = null;\n     this.matrix = new Matrix4();\n \n     this.autoUpdate = true;\n     this.needsUpdate = false;\n \n     this._frustum = new Frustum();\n     this._frameExtents = new Vector2( 1, 1 );\n \n     this._viewportCount = 1;\n \n     this._viewports = [\n \n       new Vector4( 0, 0, 1, 1 )\n \n     ];\n \n   }\n \n   getViewportCount() {\n \n     return this._viewportCount;\n \n   }\n \n   getFrustum() {\n \n     return this._frustum;\n \n   }\n \n   updateMatrices( light ) {\n \n     const shadowCamera = this.camera;\n     const shadowMatrix = this.matrix;\n \n     _lightPositionWorld$1.setFromMatrixPosition( light.matrixWorld );\n     shadowCamera.position.copy( _lightPositionWorld$1 );\n \n     _lookTarget$1.setFromMatrixPosition( light.target.matrixWorld );\n     shadowCamera.lookAt( _lookTarget$1 );\n     shadowCamera.updateMatrixWorld();\n \n     _projScreenMatrix$1.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n     this._frustum.setFromProjectionMatrix( _projScreenMatrix$1 );\n \n     shadowMatrix.set(\n       0.5, 0.0, 0.0, 0.5,\n       0.0, 0.5, 0.0, 0.5,\n       0.0, 0.0, 0.5, 0.5,\n       0.0, 0.0, 0.0, 1.0\n     );\n \n     shadowMatrix.multiply( shadowCamera.projectionMatrix );\n     shadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n \n   }\n \n   getViewport( viewportIndex ) {\n \n     return this._viewports[ viewportIndex ];\n \n   }\n \n   getFrameExtents() {\n \n     return this._frameExtents;\n \n   }\n \n   dispose() {\n \n     if ( this.map ) {\n \n       this.map.dispose();\n \n     }\n \n     if ( this.mapPass ) {\n \n       this.mapPass.dispose();\n \n     }\n \n   }\n \n   copy( source ) {\n \n     this.camera = source.camera.clone();\n \n     this.bias = source.bias;\n     this.radius = source.radius;\n \n     this.mapSize.copy( source.mapSize );\n \n     return this;\n \n   }\n \n   clone() {\n \n     return new this.constructor().copy( this );\n \n   }\n \n   toJSON() {\n \n     const object = {};\n \n     if ( this.bias !== 0 ) object.bias = this.bias;\n     if ( this.normalBias !== 0 ) object.normalBias = this.normalBias;\n     if ( this.radius !== 1 ) object.radius = this.radius;\n     if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n \n     object.camera = this.camera.toJSON( false ).object;\n     delete object.camera.matrix;\n \n     return object;\n \n   }\n \n }\n \n class SpotLightShadow extends LightShadow {\n \n   constructor() {\n \n     super( new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n \n     this.focus = 1;\n \n   }\n \n   updateMatrices( light ) {\n \n     const camera = this.camera;\n \n     const fov = RAD2DEG * 2 * light.angle * this.focus;\n     const aspect = this.mapSize.width / this.mapSize.height;\n     const far = light.distance || camera.far;\n \n     if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n \n       camera.fov = fov;\n       camera.aspect = aspect;\n       camera.far = far;\n       camera.updateProjectionMatrix();\n \n     }\n \n     super.updateMatrices( light );\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.focus = source.focus;\n \n     return this;\n \n   }\n \n }\n \n SpotLightShadow.prototype.isSpotLightShadow = true;\n \n class SpotLight extends Light {\n \n   constructor( color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 1 ) {\n \n     super( color, intensity );\n \n     this.type = 'SpotLight';\n \n     this.position.copy( Object3D.DefaultUp );\n     this.updateMatrix();\n \n     this.target = new Object3D();\n \n     this.distance = distance;\n     this.angle = angle;\n     this.penumbra = penumbra;\n     this.decay = decay; // for physically correct lights, should be 2.\n \n     this.shadow = new SpotLightShadow();\n \n   }\n \n   get power() {\n \n     // compute the light's luminous power (in lumens) from its intensity (in candela)\n     // by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)\n     return this.intensity * Math.PI;\n \n   }\n \n   set power( power ) {\n \n     // set the light's intensity (in candela) from the desired luminous power (in lumens)\n     this.intensity = power / Math.PI;\n \n   }\n \n   dispose() {\n \n     this.shadow.dispose();\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.distance = source.distance;\n     this.angle = source.angle;\n     this.penumbra = source.penumbra;\n     this.decay = source.decay;\n \n     this.target = source.target.clone();\n \n     this.shadow = source.shadow.clone();\n \n     return this;\n \n   }\n \n }\n \n SpotLight.prototype.isSpotLight = true;\n \n const _projScreenMatrix = /*@__PURE__*/ new Matrix4();\n const _lightPositionWorld = /*@__PURE__*/ new Vector3();\n const _lookTarget = /*@__PURE__*/ new Vector3();\n \n class PointLightShadow extends LightShadow {\n \n   constructor() {\n \n     super( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n \n     this._frameExtents = new Vector2( 4, 2 );\n \n     this._viewportCount = 6;\n \n     this._viewports = [\n       // These viewports map a cube-map onto a 2D texture with the\n       // following orientation:\n       //\n       //  xzXZ\n       //   y Y\n       //\n       // X - Positive x direction\n       // x - Negative x direction\n       // Y - Positive y direction\n       // y - Negative y direction\n       // Z - Positive z direction\n       // z - Negative z direction\n \n       // positive X\n       new Vector4( 2, 1, 1, 1 ),\n       // negative X\n       new Vector4( 0, 1, 1, 1 ),\n       // positive Z\n       new Vector4( 3, 1, 1, 1 ),\n       // negative Z\n       new Vector4( 1, 1, 1, 1 ),\n       // positive Y\n       new Vector4( 3, 0, 1, 1 ),\n       // negative Y\n       new Vector4( 1, 0, 1, 1 )\n     ];\n \n     this._cubeDirections = [\n       new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n       new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n     ];\n \n     this._cubeUps = [\n       new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n       new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n     ];\n \n   }\n \n   updateMatrices( light, viewportIndex = 0 ) {\n \n     const camera = this.camera;\n     const shadowMatrix = this.matrix;\n \n     const far = light.distance || camera.far;\n \n     if ( far !== camera.far ) {\n \n       camera.far = far;\n       camera.updateProjectionMatrix();\n \n     }\n \n     _lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n     camera.position.copy( _lightPositionWorld );\n \n     _lookTarget.copy( camera.position );\n     _lookTarget.add( this._cubeDirections[ viewportIndex ] );\n     camera.up.copy( this._cubeUps[ viewportIndex ] );\n     camera.lookAt( _lookTarget );\n     camera.updateMatrixWorld();\n \n     shadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\n \n     _projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n     this._frustum.setFromProjectionMatrix( _projScreenMatrix );\n \n   }\n \n }\n \n PointLightShadow.prototype.isPointLightShadow = true;\n \n class PointLight extends Light {\n \n   constructor( color, intensity, distance = 0, decay = 1 ) {\n \n     super( color, intensity );\n \n     this.type = 'PointLight';\n \n     this.distance = distance;\n     this.decay = decay; // for physically correct lights, should be 2.\n \n     this.shadow = new PointLightShadow();\n \n   }\n \n   get power() {\n \n     // compute the light's luminous power (in lumens) from its intensity (in candela)\n     // for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\n     return this.intensity * 4 * Math.PI;\n \n   }\n \n   set power( power ) {\n \n     // set the light's intensity (in candela) from the desired luminous power (in lumens)\n     this.intensity = power / ( 4 * Math.PI );\n \n   }\n \n   dispose() {\n \n     this.shadow.dispose();\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.distance = source.distance;\n     this.decay = source.decay;\n \n     this.shadow = source.shadow.clone();\n \n     return this;\n \n   }\n \n }\n \n PointLight.prototype.isPointLight = true;\n \n class DirectionalLightShadow extends LightShadow {\n \n   constructor() {\n \n     super( new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n \n   }\n \n }\n \n DirectionalLightShadow.prototype.isDirectionalLightShadow = true;\n \n class DirectionalLight extends Light {\n \n   constructor( color, intensity ) {\n \n     super( color, intensity );\n \n     this.type = 'DirectionalLight';\n \n     this.position.copy( Object3D.DefaultUp );\n     this.updateMatrix();\n \n     this.target = new Object3D();\n \n     this.shadow = new DirectionalLightShadow();\n \n   }\n \n   dispose() {\n \n     this.shadow.dispose();\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.target = source.target.clone();\n     this.shadow = source.shadow.clone();\n \n     return this;\n \n   }\n \n }\n \n DirectionalLight.prototype.isDirectionalLight = true;\n \n class AmbientLight extends Light {\n \n   constructor( color, intensity ) {\n \n     super( color, intensity );\n \n     this.type = 'AmbientLight';\n \n   }\n \n }\n \n AmbientLight.prototype.isAmbientLight = true;\n \n class RectAreaLight extends Light {\n \n   constructor( color, intensity, width = 10, height = 10 ) {\n \n     super( color, intensity );\n \n     this.type = 'RectAreaLight';\n \n     this.width = width;\n     this.height = height;\n \n   }\n \n   get power() {\n \n     // compute the light's luminous power (in lumens) from its intensity (in nits)\n     return this.intensity * this.width * this.height * Math.PI;\n \n   }\n \n   set power( power ) {\n \n     // set the light's intensity (in nits) from the desired luminous power (in lumens)\n     this.intensity = power / ( this.width * this.height * Math.PI );\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.width = source.width;\n     this.height = source.height;\n \n     return this;\n \n   }\n \n   toJSON( meta ) {\n \n     const data = super.toJSON( meta );\n \n     data.object.width = this.width;\n     data.object.height = this.height;\n \n     return data;\n \n   }\n \n }\n \n RectAreaLight.prototype.isRectAreaLight = true;\n \n /**\n  * Primary reference:\n  *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n  *\n  * Secondary reference:\n  *   https://www.ppsloan.org/publications/StupidSH36.pdf\n  */\n \n // 3-band SH defined by 9 coefficients\n \n class SphericalHarmonics3 {\n \n   constructor() {\n \n     this.coefficients = [];\n \n     for ( let i = 0; i < 9; i ++ ) {\n \n       this.coefficients.push( new Vector3() );\n \n     }\n \n   }\n \n   set( coefficients ) {\n \n     for ( let i = 0; i < 9; i ++ ) {\n \n       this.coefficients[ i ].copy( coefficients[ i ] );\n \n     }\n \n     return this;\n \n   }\n \n   zero() {\n \n     for ( let i = 0; i < 9; i ++ ) {\n \n       this.coefficients[ i ].set( 0, 0, 0 );\n \n     }\n \n     return this;\n \n   }\n \n   // get the radiance in the direction of the normal\n   // target is a Vector3\n   getAt( normal, target ) {\n \n     // normal is assumed to be unit length\n \n     const x = normal.x, y = normal.y, z = normal.z;\n \n     const coeff = this.coefficients;\n \n     // band 0\n     target.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n \n     // band 1\n     target.addScaledVector( coeff[ 1 ], 0.488603 * y );\n     target.addScaledVector( coeff[ 2 ], 0.488603 * z );\n     target.addScaledVector( coeff[ 3 ], 0.488603 * x );\n \n     // band 2\n     target.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );\n     target.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );\n     target.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n     target.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );\n     target.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n \n     return target;\n \n   }\n \n   // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n   // target is a Vector3\n   // https://graphics.stanford.edu/papers/envmap/envmap.pdf\n   getIrradianceAt( normal, target ) {\n \n     // normal is assumed to be unit length\n \n     const x = normal.x, y = normal.y, z = normal.z;\n \n     const coeff = this.coefficients;\n \n     // band 0\n     target.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n \n     // band 1\n     target.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n     target.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );\n     target.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );\n \n     // band 2\n     target.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n     target.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n     target.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n     target.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n     target.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n \n     return target;\n \n   }\n \n   add( sh ) {\n \n     for ( let i = 0; i < 9; i ++ ) {\n \n       this.coefficients[ i ].add( sh.coefficients[ i ] );\n \n     }\n \n     return this;\n \n   }\n \n   addScaledSH( sh, s ) {\n \n     for ( let i = 0; i < 9; i ++ ) {\n \n       this.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );\n \n     }\n \n     return this;\n \n   }\n \n   scale( s ) {\n \n     for ( let i = 0; i < 9; i ++ ) {\n \n       this.coefficients[ i ].multiplyScalar( s );\n \n     }\n \n     return this;\n \n   }\n \n   lerp( sh, alpha ) {\n \n     for ( let i = 0; i < 9; i ++ ) {\n \n       this.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n \n     }\n \n     return this;\n \n   }\n \n   equals( sh ) {\n \n     for ( let i = 0; i < 9; i ++ ) {\n \n       if ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n \n         return false;\n \n       }\n \n     }\n \n     return true;\n \n   }\n \n   copy( sh ) {\n \n     return this.set( sh.coefficients );\n \n   }\n \n   clone() {\n \n     return new this.constructor().copy( this );\n \n   }\n \n   fromArray( array, offset = 0 ) {\n \n     const coefficients = this.coefficients;\n \n     for ( let i = 0; i < 9; i ++ ) {\n \n       coefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n \n     }\n \n     return this;\n \n   }\n \n   toArray( array = [], offset = 0 ) {\n \n     const coefficients = this.coefficients;\n \n     for ( let i = 0; i < 9; i ++ ) {\n \n       coefficients[ i ].toArray( array, offset + ( i * 3 ) );\n \n     }\n \n     return array;\n \n   }\n \n   // evaluate the basis functions\n   // shBasis is an Array[ 9 ]\n   static getBasisAt( normal, shBasis ) {\n \n     // normal is assumed to be unit length\n \n     const x = normal.x, y = normal.y, z = normal.z;\n \n     // band 0\n     shBasis[ 0 ] = 0.282095;\n \n     // band 1\n     shBasis[ 1 ] = 0.488603 * y;\n     shBasis[ 2 ] = 0.488603 * z;\n     shBasis[ 3 ] = 0.488603 * x;\n \n     // band 2\n     shBasis[ 4 ] = 1.092548 * x * y;\n     shBasis[ 5 ] = 1.092548 * y * z;\n     shBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n     shBasis[ 7 ] = 1.092548 * x * z;\n     shBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n \n   }\n \n }\n \n SphericalHarmonics3.prototype.isSphericalHarmonics3 = true;\n \n class LightProbe extends Light {\n \n   constructor( sh = new SphericalHarmonics3(), intensity = 1 ) {\n \n     super( undefined, intensity );\n \n     this.sh = sh;\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.sh.copy( source.sh );\n \n     return this;\n \n   }\n \n   fromJSON( json ) {\n \n     this.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n     this.sh.fromArray( json.sh );\n \n     return this;\n \n   }\n \n   toJSON( meta ) {\n \n     const data = super.toJSON( meta );\n \n     data.object.sh = this.sh.toArray();\n \n     return data;\n \n   }\n \n }\n \n LightProbe.prototype.isLightProbe = true;\n \n class MaterialLoader extends Loader {\n \n   constructor( manager ) {\n \n     super( manager );\n     this.textures = {};\n \n   }\n \n   load( url, onLoad, onProgress, onError ) {\n \n     const scope = this;\n \n     const loader = new FileLoader( scope.manager );\n     loader.setPath( scope.path );\n     loader.setRequestHeader( scope.requestHeader );\n     loader.setWithCredentials( scope.withCredentials );\n     loader.load( url, function ( text ) {\n \n       try {\n \n         onLoad( scope.parse( JSON.parse( text ) ) );\n \n       } catch ( e ) {\n \n         if ( onError ) {\n \n           onError( e );\n \n         } else {\n \n           console.error( e );\n \n         }\n \n         scope.manager.itemError( url );\n \n       }\n \n     }, onProgress, onError );\n \n   }\n \n   parse( json ) {\n \n     const textures = this.textures;\n \n     function getTexture( name ) {\n \n       if ( textures[ name ] === undefined ) {\n \n         console.warn( 'THREE.MaterialLoader: Undefined texture', name );\n \n       }\n \n       return textures[ name ];\n \n     }\n \n     const material = new Materials[ json.type ]();\n \n     if ( json.uuid !== undefined ) material.uuid = json.uuid;\n     if ( json.name !== undefined ) material.name = json.name;\n     if ( json.color !== undefined && material.color !== undefined ) material.color.setHex( json.color );\n     if ( json.roughness !== undefined ) material.roughness = json.roughness;\n     if ( json.metalness !== undefined ) material.metalness = json.metalness;\n     if ( json.sheen !== undefined ) material.sheen = json.sheen;\n     if ( json.sheenColor !== undefined ) material.sheenColor = new Color().setHex( json.sheenColor );\n     if ( json.sheenRoughness !== undefined ) material.sheenRoughness = json.sheenRoughness;\n     if ( json.emissive !== undefined && material.emissive !== undefined ) material.emissive.setHex( json.emissive );\n     if ( json.specular !== undefined && material.specular !== undefined ) material.specular.setHex( json.specular );\n     if ( json.specularIntensity !== undefined ) material.specularIntensity = json.specularIntensity;\n     if ( json.specularColor !== undefined && material.specularColor !== undefined ) material.specularColor.setHex( json.specularColor );\n     if ( json.shininess !== undefined ) material.shininess = json.shininess;\n     if ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;\n     if ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;\n     if ( json.transmission !== undefined ) material.transmission = json.transmission;\n     if ( json.thickness !== undefined ) material.thickness = json.thickness;\n     if ( json.attenuationDistance !== undefined ) material.attenuationDistance = json.attenuationDistance;\n     if ( json.attenuationColor !== undefined && material.attenuationColor !== undefined ) material.attenuationColor.setHex( json.attenuationColor );\n     if ( json.fog !== undefined ) material.fog = json.fog;\n     if ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\n     if ( json.blending !== undefined ) material.blending = json.blending;\n     if ( json.combine !== undefined ) material.combine = json.combine;\n     if ( json.side !== undefined ) material.side = json.side;\n     if ( json.shadowSide !== undefined ) material.shadowSide = json.shadowSide;\n     if ( json.opacity !== undefined ) material.opacity = json.opacity;\n     if ( json.format !== undefined ) material.format = json.format;\n     if ( json.transparent !== undefined ) material.transparent = json.transparent;\n     if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n     if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n     if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n     if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n \n     if ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;\n     if ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;\n     if ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;\n     if ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;\n     if ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;\n     if ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;\n     if ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;\n     if ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;\n \n     if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n     if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n     if ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n     if ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n \n     if ( json.rotation !== undefined ) material.rotation = json.rotation;\n \n     if ( json.linewidth !== 1 ) material.linewidth = json.linewidth;\n     if ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\n     if ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\n     if ( json.scale !== undefined ) material.scale = json.scale;\n \n     if ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\n     if ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\n     if ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\n \n     if ( json.dithering !== undefined ) material.dithering = json.dithering;\n \n     if ( json.alphaToCoverage !== undefined ) material.alphaToCoverage = json.alphaToCoverage;\n     if ( json.premultipliedAlpha !== undefined ) material.premultipliedAlpha = json.premultipliedAlpha;\n \n     if ( json.visible !== undefined ) material.visible = json.visible;\n \n     if ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;\n \n     if ( json.userData !== undefined ) material.userData = json.userData;\n \n     if ( json.vertexColors !== undefined ) {\n \n       if ( typeof json.vertexColors === 'number' ) {\n \n         material.vertexColors = ( json.vertexColors > 0 ) ? true : false;\n \n       } else {\n \n         material.vertexColors = json.vertexColors;\n \n       }\n \n     }\n \n     // Shader Material\n \n     if ( json.uniforms !== undefined ) {\n \n       for ( const name in json.uniforms ) {\n \n         const uniform = json.uniforms[ name ];\n \n         material.uniforms[ name ] = {};\n \n         switch ( uniform.type ) {\n \n           case 't':\n             material.uniforms[ name ].value = getTexture( uniform.value );\n             break;\n \n           case 'c':\n             material.uniforms[ name ].value = new Color().setHex( uniform.value );\n             break;\n \n           case 'v2':\n             material.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n             break;\n \n           case 'v3':\n             material.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n             break;\n \n           case 'v4':\n             material.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n             break;\n \n           case 'm3':\n             material.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n             break;\n \n           case 'm4':\n             material.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n             break;\n \n           default:\n             material.uniforms[ name ].value = uniform.value;\n \n         }\n \n       }\n \n     }\n \n     if ( json.defines !== undefined ) material.defines = json.defines;\n     if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n     if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n \n     if ( json.extensions !== undefined ) {\n \n       for ( const key in json.extensions ) {\n \n         material.extensions[ key ] = json.extensions[ key ];\n \n       }\n \n     }\n \n     // Deprecated\n \n     if ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading\n \n     // for PointsMaterial\n \n     if ( json.size !== undefined ) material.size = json.size;\n     if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n \n     // maps\n \n     if ( json.map !== undefined ) material.map = getTexture( json.map );\n     if ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );\n \n     if ( json.alphaMap !== undefined ) material.alphaMap = getTexture( json.alphaMap );\n \n     if ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n     if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n \n     if ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n     if ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;\n     if ( json.normalScale !== undefined ) {\n \n       let normalScale = json.normalScale;\n \n       if ( Array.isArray( normalScale ) === false ) {\n \n         // Blender exporter used to export a scalar. See #7459\n \n         normalScale = [ normalScale, normalScale ];\n \n       }\n \n       material.normalScale = new Vector2().fromArray( normalScale );\n \n     }\n \n     if ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n     if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n     if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n \n     if ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n     if ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n \n     if ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n     if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n \n     if ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n     if ( json.specularIntensityMap !== undefined ) material.specularIntensityMap = getTexture( json.specularIntensityMap );\n     if ( json.specularColorMap !== undefined ) material.specularColorMap = getTexture( json.specularColorMap );\n \n     if ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n     if ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;\n \n     if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n     if ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;\n \n     if ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n     if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n \n     if ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n     if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n \n     if ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n \n     if ( json.clearcoatMap !== undefined ) material.clearcoatMap = getTexture( json.clearcoatMap );\n     if ( json.clearcoatRoughnessMap !== undefined ) material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap );\n     if ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );\n     if ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );\n \n     if ( json.transmissionMap !== undefined ) material.transmissionMap = getTexture( json.transmissionMap );\n     if ( json.thicknessMap !== undefined ) material.thicknessMap = getTexture( json.thicknessMap );\n \n     if ( json.sheenColorMap !== undefined ) material.sheenColorMap = getTexture( json.sheenColorMap );\n     if ( json.sheenRoughnessMap !== undefined ) material.sheenRoughnessMap = getTexture( json.sheenRoughnessMap );\n \n     return material;\n \n   }\n \n   setTextures( value ) {\n \n     this.textures = value;\n     return this;\n \n   }\n \n }\n \n class LoaderUtils {\n \n   static decodeText( array ) {\n \n     if ( typeof TextDecoder !== 'undefined' ) {\n \n       return new TextDecoder().decode( array );\n \n     }\n \n     // Avoid the String.fromCharCode.apply(null, array) shortcut, which\n     // throws a \"maximum call stack size exceeded\" error for large arrays.\n \n     let s = '';\n \n     for ( let i = 0, il = array.length; i < il; i ++ ) {\n \n       // Implicitly assumes little-endian.\n       s += String.fromCharCode( array[ i ] );\n \n     }\n \n     try {\n \n       // merges multi-byte utf-8 characters.\n \n       return decodeURIComponent( escape( s ) );\n \n     } catch ( e ) { // see #16358\n \n       return s;\n \n     }\n \n   }\n \n   static extractUrlBase( url ) {\n \n     const index = url.lastIndexOf( '/' );\n \n     if ( index === - 1 ) return './';\n \n     return url.substr( 0, index + 1 );\n \n   }\n \n   static resolveURL( url, path ) {\n \n     // Invalid URL\n     if ( typeof url !== 'string' || url === '' ) return '';\n \n     // Host Relative URL\n     if ( /^https?:\\/\\//i.test( path ) && /^\\//.test( url ) ) {\n \n       path = path.replace( /(^https?:\\/\\/[^\\/]+).*/i, '$1' );\n \n     }\n \n     // Absolute URL http://,https://,//\n     if ( /^(https?:)?\\/\\//i.test( url ) ) return url;\n \n     // Data URI\n     if ( /^data:.*,.*$/i.test( url ) ) return url;\n \n     // Blob URL\n     if ( /^blob:.*$/i.test( url ) ) return url;\n \n     // Relative URL\n     return path + url;\n \n   }\n \n }\n \n class InstancedBufferGeometry extends BufferGeometry {\n \n   constructor() {\n \n     super();\n \n     this.type = 'InstancedBufferGeometry';\n     this.instanceCount = Infinity;\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.instanceCount = source.instanceCount;\n \n     return this;\n \n   }\n \n   clone() {\n \n     return new this.constructor().copy( this );\n \n   }\n \n   toJSON() {\n \n     const data = super.toJSON( this );\n \n     data.instanceCount = this.instanceCount;\n \n     data.isInstancedBufferGeometry = true;\n \n     return data;\n \n   }\n \n }\n \n InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\n \n class BufferGeometryLoader extends Loader {\n \n   constructor( manager ) {\n \n     super( manager );\n \n   }\n \n   load( url, onLoad, onProgress, onError ) {\n \n     const scope = this;\n \n     const loader = new FileLoader( scope.manager );\n     loader.setPath( scope.path );\n     loader.setRequestHeader( scope.requestHeader );\n     loader.setWithCredentials( scope.withCredentials );\n     loader.load( url, function ( text ) {\n \n       try {\n \n         onLoad( scope.parse( JSON.parse( text ) ) );\n \n       } catch ( e ) {\n \n         if ( onError ) {\n \n           onError( e );\n \n         } else {\n \n           console.error( e );\n \n         }\n \n         scope.manager.itemError( url );\n \n       }\n \n     }, onProgress, onError );\n \n   }\n \n   parse( json ) {\n \n     const interleavedBufferMap = {};\n     const arrayBufferMap = {};\n \n     function getInterleavedBuffer( json, uuid ) {\n \n       if ( interleavedBufferMap[ uuid ] !== undefined ) return interleavedBufferMap[ uuid ];\n \n       const interleavedBuffers = json.interleavedBuffers;\n       const interleavedBuffer = interleavedBuffers[ uuid ];\n \n       const buffer = getArrayBuffer( json, interleavedBuffer.buffer );\n \n       const array = getTypedArray( interleavedBuffer.type, buffer );\n       const ib = new InterleavedBuffer( array, interleavedBuffer.stride );\n       ib.uuid = interleavedBuffer.uuid;\n \n       interleavedBufferMap[ uuid ] = ib;\n \n       return ib;\n \n     }\n \n     function getArrayBuffer( json, uuid ) {\n \n       if ( arrayBufferMap[ uuid ] !== undefined ) return arrayBufferMap[ uuid ];\n \n       const arrayBuffers = json.arrayBuffers;\n       const arrayBuffer = arrayBuffers[ uuid ];\n \n       const ab = new Uint32Array( arrayBuffer ).buffer;\n \n       arrayBufferMap[ uuid ] = ab;\n \n       return ab;\n \n     }\n \n     const geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n \n     const index = json.data.index;\n \n     if ( index !== undefined ) {\n \n       const typedArray = getTypedArray( index.type, index.array );\n       geometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n \n     }\n \n     const attributes = json.data.attributes;\n \n     for ( const key in attributes ) {\n \n       const attribute = attributes[ key ];\n       let bufferAttribute;\n \n       if ( attribute.isInterleavedBufferAttribute ) {\n \n         const interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n         bufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n \n       } else {\n \n         const typedArray = getTypedArray( attribute.type, attribute.array );\n         const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n         bufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\n \n       }\n \n       if ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n       if ( attribute.usage !== undefined ) bufferAttribute.setUsage( attribute.usage );\n \n       if ( attribute.updateRange !== undefined ) {\n \n         bufferAttribute.updateRange.offset = attribute.updateRange.offset;\n         bufferAttribute.updateRange.count = attribute.updateRange.count;\n \n       }\n \n       geometry.setAttribute( key, bufferAttribute );\n \n     }\n \n     const morphAttributes = json.data.morphAttributes;\n \n     if ( morphAttributes ) {\n \n       for ( const key in morphAttributes ) {\n \n         const attributeArray = morphAttributes[ key ];\n \n         const array = [];\n \n         for ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n \n           const attribute = attributeArray[ i ];\n           let bufferAttribute;\n \n           if ( attribute.isInterleavedBufferAttribute ) {\n \n             const interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n             bufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n \n           } else {\n \n             const typedArray = getTypedArray( attribute.type, attribute.array );\n             bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\n \n           }\n \n           if ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n           array.push( bufferAttribute );\n \n         }\n \n         geometry.morphAttributes[ key ] = array;\n \n       }\n \n     }\n \n     const morphTargetsRelative = json.data.morphTargetsRelative;\n \n     if ( morphTargetsRelative ) {\n \n       geometry.morphTargetsRelative = true;\n \n     }\n \n     const groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n \n     if ( groups !== undefined ) {\n \n       for ( let i = 0, n = groups.length; i !== n; ++ i ) {\n \n         const group = groups[ i ];\n \n         geometry.addGroup( group.start, group.count, group.materialIndex );\n \n       }\n \n     }\n \n     const boundingSphere = json.data.boundingSphere;\n \n     if ( boundingSphere !== undefined ) {\n \n       const center = new Vector3();\n \n       if ( boundingSphere.center !== undefined ) {\n \n         center.fromArray( boundingSphere.center );\n \n       }\n \n       geometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n \n     }\n \n     if ( json.name ) geometry.name = json.name;\n     if ( json.userData ) geometry.userData = json.userData;\n \n     return geometry;\n \n   }\n \n }\n \n class ObjectLoader extends Loader {\n \n   constructor( manager ) {\n \n     super( manager );\n \n   }\n \n   load( url, onLoad, onProgress, onError ) {\n \n     const scope = this;\n \n     const path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n     this.resourcePath = this.resourcePath || path;\n \n     const loader = new FileLoader( this.manager );\n     loader.setPath( this.path );\n     loader.setRequestHeader( this.requestHeader );\n     loader.setWithCredentials( this.withCredentials );\n     loader.load( url, function ( text ) {\n \n       let json = null;\n \n       try {\n \n         json = JSON.parse( text );\n \n       } catch ( error ) {\n \n         if ( onError !== undefined ) onError( error );\n \n         console.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n \n         return;\n \n       }\n \n       const metadata = json.metadata;\n \n       if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n \n         console.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n         return;\n \n       }\n \n       scope.parse( json, onLoad );\n \n     }, onProgress, onError );\n \n   }\n \n   async loadAsync( url, onProgress ) {\n \n     const scope = this;\n \n     const path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n     this.resourcePath = this.resourcePath || path;\n \n     const loader = new FileLoader( this.manager );\n     loader.setPath( this.path );\n     loader.setRequestHeader( this.requestHeader );\n     loader.setWithCredentials( this.withCredentials );\n \n     const text = await loader.loadAsync( url, onProgress );\n \n     const json = JSON.parse( text );\n \n     const metadata = json.metadata;\n \n     if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n \n       throw new Error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n \n     }\n \n     return await scope.parseAsync( json );\n \n   }\n \n   parse( json, onLoad ) {\n \n     const animations = this.parseAnimations( json.animations );\n     const shapes = this.parseShapes( json.shapes );\n     const geometries = this.parseGeometries( json.geometries, shapes );\n \n     const images = this.parseImages( json.images, function () {\n \n       if ( onLoad !== undefined ) onLoad( object );\n \n     } );\n \n     const textures = this.parseTextures( json.textures, images );\n     const materials = this.parseMaterials( json.materials, textures );\n \n     const object = this.parseObject( json.object, geometries, materials, textures, animations );\n     const skeletons = this.parseSkeletons( json.skeletons, object );\n \n     this.bindSkeletons( object, skeletons );\n \n     //\n \n     if ( onLoad !== undefined ) {\n \n       let hasImages = false;\n \n       for ( const uuid in images ) {\n \n         if ( images[ uuid ] instanceof HTMLImageElement ) {\n \n           hasImages = true;\n           break;\n \n         }\n \n       }\n \n       if ( hasImages === false ) onLoad( object );\n \n     }\n \n     return object;\n \n   }\n \n   async parseAsync( json ) {\n \n     const animations = this.parseAnimations( json.animations );\n     const shapes = this.parseShapes( json.shapes );\n     const geometries = this.parseGeometries( json.geometries, shapes );\n \n     const images = await this.parseImagesAsync( json.images );\n \n     const textures = this.parseTextures( json.textures, images );\n     const materials = this.parseMaterials( json.materials, textures );\n \n     const object = this.parseObject( json.object, geometries, materials, textures, animations );\n     const skeletons = this.parseSkeletons( json.skeletons, object );\n \n     this.bindSkeletons( object, skeletons );\n \n     return object;\n \n   }\n \n   parseShapes( json ) {\n \n     const shapes = {};\n \n     if ( json !== undefined ) {\n \n       for ( let i = 0, l = json.length; i < l; i ++ ) {\n \n         const shape = new Shape().fromJSON( json[ i ] );\n \n         shapes[ shape.uuid ] = shape;\n \n       }\n \n     }\n \n     return shapes;\n \n   }\n \n   parseSkeletons( json, object ) {\n \n     const skeletons = {};\n     const bones = {};\n \n     // generate bone lookup table\n \n     object.traverse( function ( child ) {\n \n       if ( child.isBone ) bones[ child.uuid ] = child;\n \n     } );\n \n     // create skeletons\n \n     if ( json !== undefined ) {\n \n       for ( let i = 0, l = json.length; i < l; i ++ ) {\n \n         const skeleton = new Skeleton().fromJSON( json[ i ], bones );\n \n         skeletons[ skeleton.uuid ] = skeleton;\n \n       }\n \n     }\n \n     return skeletons;\n \n   }\n \n   parseGeometries( json, shapes ) {\n \n     const geometries = {};\n \n     if ( json !== undefined ) {\n \n       const bufferGeometryLoader = new BufferGeometryLoader();\n \n       for ( let i = 0, l = json.length; i < l; i ++ ) {\n \n         let geometry;\n         const data = json[ i ];\n \n         switch ( data.type ) {\n \n           case 'BufferGeometry':\n           case 'InstancedBufferGeometry':\n \n             geometry = bufferGeometryLoader.parse( data );\n \n             break;\n \n           case 'Geometry':\n \n             console.error( 'THREE.ObjectLoader: The legacy Geometry type is no longer supported.' );\n \n             break;\n \n           default:\n \n             if ( data.type in Geometries ) {\n \n               geometry = Geometries[ data.type ].fromJSON( data, shapes );\n \n             } else {\n \n               console.warn( `THREE.ObjectLoader: Unsupported geometry type \"${ data.type }\"` );\n \n             }\n \n         }\n \n         geometry.uuid = data.uuid;\n \n         if ( data.name !== undefined ) geometry.name = data.name;\n         if ( geometry.isBufferGeometry === true && data.userData !== undefined ) geometry.userData = data.userData;\n \n         geometries[ data.uuid ] = geometry;\n \n       }\n \n     }\n \n     return geometries;\n \n   }\n \n   parseMaterials( json, textures ) {\n \n     const cache = {}; // MultiMaterial\n     const materials = {};\n \n     if ( json !== undefined ) {\n \n       const loader = new MaterialLoader();\n       loader.setTextures( textures );\n \n       for ( let i = 0, l = json.length; i < l; i ++ ) {\n \n         const data = json[ i ];\n \n         if ( data.type === 'MultiMaterial' ) {\n \n           // Deprecated\n \n           const array = [];\n \n           for ( let j = 0; j < data.materials.length; j ++ ) {\n \n             const material = data.materials[ j ];\n \n             if ( cache[ material.uuid ] === undefined ) {\n \n               cache[ material.uuid ] = loader.parse( material );\n \n             }\n \n             array.push( cache[ material.uuid ] );\n \n           }\n \n           materials[ data.uuid ] = array;\n \n         } else {\n \n           if ( cache[ data.uuid ] === undefined ) {\n \n             cache[ data.uuid ] = loader.parse( data );\n \n           }\n \n           materials[ data.uuid ] = cache[ data.uuid ];\n \n         }\n \n       }\n \n     }\n \n     return materials;\n \n   }\n \n   parseAnimations( json ) {\n \n     const animations = {};\n \n     if ( json !== undefined ) {\n \n       for ( let i = 0; i < json.length; i ++ ) {\n \n         const data = json[ i ];\n \n         const clip = AnimationClip.parse( data );\n \n         animations[ clip.uuid ] = clip;\n \n       }\n \n     }\n \n     return animations;\n \n   }\n \n   parseImages( json, onLoad ) {\n \n     const scope = this;\n     const images = {};\n \n     let loader;\n \n     function loadImage( url ) {\n \n       scope.manager.itemStart( url );\n \n       return loader.load( url, function () {\n \n         scope.manager.itemEnd( url );\n \n       }, undefined, function () {\n \n         scope.manager.itemError( url );\n         scope.manager.itemEnd( url );\n \n       } );\n \n     }\n \n     function deserializeImage( image ) {\n \n       if ( typeof image === 'string' ) {\n \n         const url = image;\n \n         const path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\n \n         return loadImage( path );\n \n       } else {\n \n         if ( image.data ) {\n \n           return {\n             data: getTypedArray( image.type, image.data ),\n             width: image.width,\n             height: image.height\n           };\n \n         } else {\n \n           return null;\n \n         }\n \n       }\n \n     }\n \n     if ( json !== undefined && json.length > 0 ) {\n \n       const manager = new LoadingManager( onLoad );\n \n       loader = new ImageLoader( manager );\n       loader.setCrossOrigin( this.crossOrigin );\n \n       for ( let i = 0, il = json.length; i < il; i ++ ) {\n \n         const image = json[ i ];\n         const url = image.url;\n \n         if ( Array.isArray( url ) ) {\n \n           // load array of images e.g CubeTexture\n \n           images[ image.uuid ] = [];\n \n           for ( let j = 0, jl = url.length; j < jl; j ++ ) {\n \n             const currentUrl = url[ j ];\n \n             const deserializedImage = deserializeImage( currentUrl );\n \n             if ( deserializedImage !== null ) {\n \n               if ( deserializedImage instanceof HTMLImageElement ) {\n \n                 images[ image.uuid ].push( deserializedImage );\n \n               } else {\n \n                 // special case: handle array of data textures for cube textures\n \n                 images[ image.uuid ].push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\n \n               }\n \n             }\n \n           }\n \n         } else {\n \n           // load single image\n \n           const deserializedImage = deserializeImage( image.url );\n \n           if ( deserializedImage !== null ) {\n \n             images[ image.uuid ] = deserializedImage;\n \n           }\n \n         }\n \n       }\n \n     }\n \n     return images;\n \n   }\n \n   async parseImagesAsync( json ) {\n \n     const scope = this;\n     const images = {};\n \n     let loader;\n \n     async function deserializeImage( image ) {\n \n       if ( typeof image === 'string' ) {\n \n         const url = image;\n \n         const path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\n \n         return await loader.loadAsync( path );\n \n       } else {\n \n         if ( image.data ) {\n \n           return {\n             data: getTypedArray( image.type, image.data ),\n             width: image.width,\n             height: image.height\n           };\n \n         } else {\n \n           return null;\n \n         }\n \n       }\n \n     }\n \n     if ( json !== undefined && json.length > 0 ) {\n \n       loader = new ImageLoader( this.manager );\n       loader.setCrossOrigin( this.crossOrigin );\n \n       for ( let i = 0, il = json.length; i < il; i ++ ) {\n \n         const image = json[ i ];\n         const url = image.url;\n \n         if ( Array.isArray( url ) ) {\n \n           // load array of images e.g CubeTexture\n \n           images[ image.uuid ] = [];\n \n           for ( let j = 0, jl = url.length; j < jl; j ++ ) {\n \n             const currentUrl = url[ j ];\n \n             const deserializedImage = await deserializeImage( currentUrl );\n \n             if ( deserializedImage !== null ) {\n \n               if ( deserializedImage instanceof HTMLImageElement ) {\n \n                 images[ image.uuid ].push( deserializedImage );\n \n               } else {\n \n                 // special case: handle array of data textures for cube textures\n \n                 images[ image.uuid ].push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\n \n               }\n \n             }\n \n           }\n \n         } else {\n \n           // load single image\n \n           const deserializedImage = await deserializeImage( image.url );\n \n           if ( deserializedImage !== null ) {\n \n             images[ image.uuid ] = deserializedImage;\n \n           }\n \n         }\n \n       }\n \n     }\n \n     return images;\n \n   }\n \n   parseTextures( json, images ) {\n \n     function parseConstant( value, type ) {\n \n       if ( typeof value === 'number' ) return value;\n \n       console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n \n       return type[ value ];\n \n     }\n \n     const textures = {};\n \n     if ( json !== undefined ) {\n \n       for ( let i = 0, l = json.length; i < l; i ++ ) {\n \n         const data = json[ i ];\n \n         if ( data.image === undefined ) {\n \n           console.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n \n         }\n \n         if ( images[ data.image ] === undefined ) {\n \n           console.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n \n         }\n \n         let texture;\n         const image = images[ data.image ];\n \n         if ( Array.isArray( image ) ) {\n \n           texture = new CubeTexture( image );\n \n           if ( image.length === 6 ) texture.needsUpdate = true;\n \n         } else {\n \n           if ( image && image.data ) {\n \n             texture = new DataTexture( image.data, image.width, image.height );\n \n           } else {\n \n             texture = new Texture( image );\n \n           }\n \n           if ( image ) texture.needsUpdate = true; // textures can have undefined image data\n \n         }\n \n         texture.uuid = data.uuid;\n \n         if ( data.name !== undefined ) texture.name = data.name;\n \n         if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\n \n         if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n         if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n         if ( data.center !== undefined ) texture.center.fromArray( data.center );\n         if ( data.rotation !== undefined ) texture.rotation = data.rotation;\n \n         if ( data.wrap !== undefined ) {\n \n           texture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n           texture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n \n         }\n \n         if ( data.format !== undefined ) texture.format = data.format;\n         if ( data.type !== undefined ) texture.type = data.type;\n         if ( data.encoding !== undefined ) texture.encoding = data.encoding;\n \n         if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\n         if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\n         if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n \n         if ( data.flipY !== undefined ) texture.flipY = data.flipY;\n \n         if ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;\n         if ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;\n \n         if ( data.userData !== undefined ) texture.userData = data.userData;\n \n         textures[ data.uuid ] = texture;\n \n       }\n \n     }\n \n     return textures;\n \n   }\n \n   parseObject( data, geometries, materials, textures, animations ) {\n \n     let object;\n \n     function getGeometry( name ) {\n \n       if ( geometries[ name ] === undefined ) {\n \n         console.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n \n       }\n \n       return geometries[ name ];\n \n     }\n \n     function getMaterial( name ) {\n \n       if ( name === undefined ) return undefined;\n \n       if ( Array.isArray( name ) ) {\n \n         const array = [];\n \n         for ( let i = 0, l = name.length; i < l; i ++ ) {\n \n           const uuid = name[ i ];\n \n           if ( materials[ uuid ] === undefined ) {\n \n             console.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n \n           }\n \n           array.push( materials[ uuid ] );\n \n         }\n \n         return array;\n \n       }\n \n       if ( materials[ name ] === undefined ) {\n \n         console.warn( 'THREE.ObjectLoader: Undefined material', name );\n \n       }\n \n       return materials[ name ];\n \n     }\n \n     function getTexture( uuid ) {\n \n       if ( textures[ uuid ] === undefined ) {\n \n         console.warn( 'THREE.ObjectLoader: Undefined texture', uuid );\n \n       }\n \n       return textures[ uuid ];\n \n     }\n \n     let geometry, material;\n \n     switch ( data.type ) {\n \n       case 'Scene':\n \n         object = new Scene();\n \n         if ( data.background !== undefined ) {\n \n           if ( Number.isInteger( data.background ) ) {\n \n             object.background = new Color( data.background );\n \n           } else {\n \n             object.background = getTexture( data.background );\n \n           }\n \n         }\n \n         if ( data.environment !== undefined ) {\n \n           object.environment = getTexture( data.environment );\n \n         }\n \n         if ( data.fog !== undefined ) {\n \n           if ( data.fog.type === 'Fog' ) {\n \n             object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n \n           } else if ( data.fog.type === 'FogExp2' ) {\n \n             object.fog = new FogExp2( data.fog.color, data.fog.density );\n \n           }\n \n         }\n \n         break;\n \n       case 'PerspectiveCamera':\n \n         object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n \n         if ( data.focus !== undefined ) object.focus = data.focus;\n         if ( data.zoom !== undefined ) object.zoom = data.zoom;\n         if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n         if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n         if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n \n         break;\n \n       case 'OrthographicCamera':\n \n         object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n \n         if ( data.zoom !== undefined ) object.zoom = data.zoom;\n         if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n \n         break;\n \n       case 'AmbientLight':\n \n         object = new AmbientLight( data.color, data.intensity );\n \n         break;\n \n       case 'DirectionalLight':\n \n         object = new DirectionalLight( data.color, data.intensity );\n \n         break;\n \n       case 'PointLight':\n \n         object = new PointLight( data.color, data.intensity, data.distance, data.decay );\n \n         break;\n \n       case 'RectAreaLight':\n \n         object = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n \n         break;\n \n       case 'SpotLight':\n \n         object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n \n         break;\n \n       case 'HemisphereLight':\n \n         object = new HemisphereLight( data.color, data.groundColor, data.intensity );\n \n         break;\n \n       case 'LightProbe':\n \n         object = new LightProbe().fromJSON( data );\n \n         break;\n \n       case 'SkinnedMesh':\n \n         geometry = getGeometry( data.geometry );\n          material = getMaterial( data.material );\n \n         object = new SkinnedMesh( geometry, material );\n \n         if ( data.bindMode !== undefined ) object.bindMode = data.bindMode;\n         if ( data.bindMatrix !== undefined ) object.bindMatrix.fromArray( data.bindMatrix );\n         if ( data.skeleton !== undefined ) object.skeleton = data.skeleton;\n \n         break;\n \n       case 'Mesh':\n \n         geometry = getGeometry( data.geometry );\n         material = getMaterial( data.material );\n \n         object = new Mesh( geometry, material );\n \n         break;\n \n       case 'InstancedMesh':\n \n         geometry = getGeometry( data.geometry );\n         material = getMaterial( data.material );\n         const count = data.count;\n         const instanceMatrix = data.instanceMatrix;\n         const instanceColor = data.instanceColor;\n \n         object = new InstancedMesh( geometry, material, count );\n         object.instanceMatrix = new InstancedBufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\n         if ( instanceColor !== undefined ) object.instanceColor = new InstancedBufferAttribute( new Float32Array( instanceColor.array ), instanceColor.itemSize );\n \n         break;\n \n       case 'LOD':\n \n         object = new LOD();\n \n         break;\n \n       case 'Line':\n \n         object = new Line( getGeometry( data.geometry ), getMaterial( data.material ) );\n \n         break;\n \n       case 'LineLoop':\n \n         object = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n \n         break;\n \n       case 'LineSegments':\n \n         object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n \n         break;\n \n       case 'PointCloud':\n       case 'Points':\n \n         object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n \n         break;\n \n       case 'Sprite':\n \n         object = new Sprite( getMaterial( data.material ) );\n \n         break;\n \n       case 'Group':\n \n         object = new Group();\n \n         break;\n \n       case 'Bone':\n \n         object = new Bone();\n \n         break;\n \n       default:\n \n         object = new Object3D();\n \n     }\n \n     object.uuid = data.uuid;\n \n     if ( data.name !== undefined ) object.name = data.name;\n \n     if ( data.matrix !== undefined ) {\n \n       object.matrix.fromArray( data.matrix );\n \n       if ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;\n       if ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );\n \n     } else {\n \n       if ( data.position !== undefined ) object.position.fromArray( data.position );\n       if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n       if ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n       if ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n \n     }\n \n     if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n     if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n \n     if ( data.shadow ) {\n \n       if ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n       if ( data.shadow.normalBias !== undefined ) object.shadow.normalBias = data.shadow.normalBias;\n       if ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n       if ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n       if ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n \n     }\n \n     if ( data.visible !== undefined ) object.visible = data.visible;\n     if ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;\n     if ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;\n     if ( data.userData !== undefined ) object.userData = data.userData;\n     if ( data.layers !== undefined ) object.layers.mask = data.layers;\n \n     if ( data.children !== undefined ) {\n \n       const children = data.children;\n \n       for ( let i = 0; i < children.length; i ++ ) {\n \n         object.add( this.parseObject( children[ i ], geometries, materials, textures, animations ) );\n \n       }\n \n     }\n \n     if ( data.animations !== undefined ) {\n \n       const objectAnimations = data.animations;\n \n       for ( let i = 0; i < objectAnimations.length; i ++ ) {\n \n         const uuid = objectAnimations[ i ];\n \n         object.animations.push( animations[ uuid ] );\n \n       }\n \n     }\n \n     if ( data.type === 'LOD' ) {\n \n       if ( data.autoUpdate !== undefined ) object.autoUpdate = data.autoUpdate;\n \n       const levels = data.levels;\n \n       for ( let l = 0; l < levels.length; l ++ ) {\n \n         const level = levels[ l ];\n         const child = object.getObjectByProperty( 'uuid', level.object );\n \n         if ( child !== undefined ) {\n \n           object.addLevel( child, level.distance );\n \n         }\n \n       }\n \n     }\n \n     return object;\n \n   }\n \n   bindSkeletons( object, skeletons ) {\n \n     if ( Object.keys( skeletons ).length === 0 ) return;\n \n     object.traverse( function ( child ) {\n \n       if ( child.isSkinnedMesh === true && child.skeleton !== undefined ) {\n \n         const skeleton = skeletons[ child.skeleton ];\n \n         if ( skeleton === undefined ) {\n \n           console.warn( 'THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton );\n \n         } else {\n \n           child.bind( skeleton, child.bindMatrix );\n \n         }\n \n       }\n \n     } );\n \n   }\n \n   /* DEPRECATED */\n \n   setTexturePath( value ) {\n \n     console.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );\n     return this.setResourcePath( value );\n \n   }\n \n }\n \n const TEXTURE_MAPPING = {\n   UVMapping: UVMapping,\n   CubeReflectionMapping: CubeReflectionMapping,\n   CubeRefractionMapping: CubeRefractionMapping,\n   EquirectangularReflectionMapping: EquirectangularReflectionMapping,\n   EquirectangularRefractionMapping: EquirectangularRefractionMapping,\n   CubeUVReflectionMapping: CubeUVReflectionMapping,\n   CubeUVRefractionMapping: CubeUVRefractionMapping\n };\n \n const TEXTURE_WRAPPING = {\n   RepeatWrapping: RepeatWrapping,\n   ClampToEdgeWrapping: ClampToEdgeWrapping,\n   MirroredRepeatWrapping: MirroredRepeatWrapping\n };\n \n const TEXTURE_FILTER = {\n   NearestFilter: NearestFilter,\n   NearestMipmapNearestFilter: NearestMipmapNearestFilter,\n   NearestMipmapLinearFilter: NearestMipmapLinearFilter,\n   LinearFilter: LinearFilter,\n   LinearMipmapNearestFilter: LinearMipmapNearestFilter,\n   LinearMipmapLinearFilter: LinearMipmapLinearFilter\n };\n \n class ImageBitmapLoader extends Loader {\n \n   constructor( manager ) {\n \n     super( manager );\n \n     if ( typeof createImageBitmap === 'undefined' ) {\n \n       console.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n \n     }\n \n     if ( typeof fetch === 'undefined' ) {\n \n       console.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n \n     }\n \n     this.options = { premultiplyAlpha: 'none' };\n \n   }\n \n   setOptions( options ) {\n \n     this.options = options;\n \n     return this;\n \n   }\n \n   load( url, onLoad, onProgress, onError ) {\n \n     if ( url === undefined ) url = '';\n \n     if ( this.path !== undefined ) url = this.path + url;\n \n     url = this.manager.resolveURL( url );\n \n     const scope = this;\n \n     const cached = Cache.get( url );\n \n     if ( cached !== undefined ) {\n \n       scope.manager.itemStart( url );\n \n       setTimeout( function () {\n \n         if ( onLoad ) onLoad( cached );\n \n         scope.manager.itemEnd( url );\n \n       }, 0 );\n \n       return cached;\n \n     }\n \n     const fetchOptions = {};\n     fetchOptions.credentials = ( this.crossOrigin === 'anonymous' ) ? 'same-origin' : 'include';\n     fetchOptions.headers = this.requestHeader;\n \n     fetch( url, fetchOptions ).then( function ( res ) {\n \n       return res.blob();\n \n     } ).then( function ( blob ) {\n \n       return createImageBitmap( blob, Object.assign( scope.options, { colorSpaceConversion: 'none' } ) );\n \n     } ).then( function ( imageBitmap ) {\n \n       Cache.add( url, imageBitmap );\n \n       if ( onLoad ) onLoad( imageBitmap );\n \n       scope.manager.itemEnd( url );\n \n     } ).catch( function ( e ) {\n \n       if ( onError ) onError( e );\n \n       scope.manager.itemError( url );\n       scope.manager.itemEnd( url );\n \n     } );\n \n     scope.manager.itemStart( url );\n \n   }\n \n }\n \n ImageBitmapLoader.prototype.isImageBitmapLoader = true;\n \n let _context;\n \n const AudioContext = {\n \n   getContext: function () {\n \n     if ( _context === undefined ) {\n \n       _context = new ( window.AudioContext || window.webkitAudioContext )();\n \n     }\n \n     return _context;\n \n   },\n \n   setContext: function ( value ) {\n \n     _context = value;\n \n   }\n \n };\n \n class AudioLoader extends Loader {\n \n   constructor( manager ) {\n \n     super( manager );\n \n   }\n \n   load( url, onLoad, onProgress, onError ) {\n \n     const scope = this;\n \n     const loader = new FileLoader( this.manager );\n     loader.setResponseType( 'arraybuffer' );\n     loader.setPath( this.path );\n     loader.setRequestHeader( this.requestHeader );\n     loader.setWithCredentials( this.withCredentials );\n     loader.load( url, function ( buffer ) {\n \n       try {\n \n         // Create a copy of the buffer. The `decodeAudioData` method\n         // detaches the buffer when complete, preventing reuse.\n         const bufferCopy = buffer.slice( 0 );\n \n         const context = AudioContext.getContext();\n         context.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n \n           onLoad( audioBuffer );\n \n         } );\n \n       } catch ( e ) {\n \n         if ( onError ) {\n \n           onError( e );\n \n         } else {\n \n           console.error( e );\n \n         }\n \n         scope.manager.itemError( url );\n \n       }\n \n     }, onProgress, onError );\n \n   }\n \n }\n \n class HemisphereLightProbe extends LightProbe {\n \n   constructor( skyColor, groundColor, intensity = 1 ) {\n \n     super( undefined, intensity );\n \n     const color1 = new Color().set( skyColor );\n     const color2 = new Color().set( groundColor );\n \n     const sky = new Vector3( color1.r, color1.g, color1.b );\n     const ground = new Vector3( color2.r, color2.g, color2.b );\n \n     // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n     const c0 = Math.sqrt( Math.PI );\n     const c1 = c0 * Math.sqrt( 0.75 );\n \n     this.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );\n     this.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );\n \n   }\n \n }\n \n HemisphereLightProbe.prototype.isHemisphereLightProbe = true;\n \n class AmbientLightProbe extends LightProbe {\n \n   constructor( color, intensity = 1 ) {\n \n     super( undefined, intensity );\n \n     const color1 = new Color().set( color );\n \n     // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n     this.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );\n \n   }\n \n }\n \n AmbientLightProbe.prototype.isAmbientLightProbe = true;\n \n const _eyeRight = /*@__PURE__*/ new Matrix4();\n const _eyeLeft = /*@__PURE__*/ new Matrix4();\n const _projectionMatrix = /*@__PURE__*/ new Matrix4();\n \n class StereoCamera {\n \n   constructor() {\n \n     this.type = 'StereoCamera';\n \n     this.aspect = 1;\n \n     this.eyeSep = 0.064;\n \n     this.cameraL = new PerspectiveCamera();\n     this.cameraL.layers.enable( 1 );\n     this.cameraL.matrixAutoUpdate = false;\n \n     this.cameraR = new PerspectiveCamera();\n     this.cameraR.layers.enable( 2 );\n     this.cameraR.matrixAutoUpdate = false;\n \n     this._cache = {\n       focus: null,\n       fov: null,\n       aspect: null,\n       near: null,\n       far: null,\n       zoom: null,\n       eyeSep: null\n     };\n \n   }\n \n   update( camera ) {\n \n     const cache = this._cache;\n \n     const needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n       cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n       cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n \n     if ( needsUpdate ) {\n \n       cache.focus = camera.focus;\n       cache.fov = camera.fov;\n       cache.aspect = camera.aspect * this.aspect;\n       cache.near = camera.near;\n       cache.far = camera.far;\n       cache.zoom = camera.zoom;\n       cache.eyeSep = this.eyeSep;\n \n       // Off-axis stereoscopic effect based on\n       // http://paulbourke.net/stereographics/stereorender/\n \n       _projectionMatrix.copy( camera.projectionMatrix );\n       const eyeSepHalf = cache.eyeSep / 2;\n       const eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n       const ymax = ( cache.near * Math.tan( DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n       let xmin, xmax;\n \n       // translate xOffset\n \n       _eyeLeft.elements[ 12 ] = - eyeSepHalf;\n       _eyeRight.elements[ 12 ] = eyeSepHalf;\n \n       // for left eye\n \n       xmin = - ymax * cache.aspect + eyeSepOnProjection;\n       xmax = ymax * cache.aspect + eyeSepOnProjection;\n \n       _projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n       _projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n \n       this.cameraL.projectionMatrix.copy( _projectionMatrix );\n \n       // for right eye\n \n       xmin = - ymax * cache.aspect - eyeSepOnProjection;\n       xmax = ymax * cache.aspect - eyeSepOnProjection;\n \n       _projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n       _projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n \n       this.cameraR.projectionMatrix.copy( _projectionMatrix );\n \n     }\n \n     this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n     this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n \n   }\n \n }\n \n class Clock {\n \n   constructor( autoStart = true ) {\n \n     this.autoStart = autoStart;\n \n     this.startTime = 0;\n     this.oldTime = 0;\n     this.elapsedTime = 0;\n \n     this.running = false;\n \n   }\n \n   start() {\n \n     this.startTime = now();\n \n     this.oldTime = this.startTime;\n     this.elapsedTime = 0;\n     this.running = true;\n \n   }\n \n   stop() {\n \n     this.getElapsedTime();\n     this.running = false;\n     this.autoStart = false;\n \n   }\n \n   getElapsedTime() {\n \n     this.getDelta();\n     return this.elapsedTime;\n \n   }\n \n   getDelta() {\n \n     let diff = 0;\n \n     if ( this.autoStart && ! this.running ) {\n \n       this.start();\n       return 0;\n \n     }\n \n     if ( this.running ) {\n \n       const newTime = now();\n \n       diff = ( newTime - this.oldTime ) / 1000;\n       this.oldTime = newTime;\n \n       this.elapsedTime += diff;\n \n     }\n \n     return diff;\n \n   }\n \n }\n \n function now() {\n \n   return ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n \n }\n \n const _position$1 = /*@__PURE__*/ new Vector3();\n const _quaternion$1 = /*@__PURE__*/ new Quaternion();\n const _scale$1 = /*@__PURE__*/ new Vector3();\n const _orientation$1 = /*@__PURE__*/ new Vector3();\n \n class AudioListener extends Object3D {\n \n   constructor() {\n \n     super();\n \n     this.type = 'AudioListener';\n \n     this.context = AudioContext.getContext();\n \n     this.gain = this.context.createGain();\n     this.gain.connect( this.context.destination );\n \n     this.filter = null;\n \n     this.timeDelta = 0;\n \n     // private\n \n     this._clock = new Clock();\n \n   }\n \n   getInput() {\n \n     return this.gain;\n \n   }\n \n   removeFilter() {\n \n     if ( this.filter !== null ) {\n \n       this.gain.disconnect( this.filter );\n       this.filter.disconnect( this.context.destination );\n       this.gain.connect( this.context.destination );\n       this.filter = null;\n \n     }\n \n     return this;\n \n   }\n \n   getFilter() {\n \n     return this.filter;\n \n   }\n \n   setFilter( value ) {\n \n     if ( this.filter !== null ) {\n \n       this.gain.disconnect( this.filter );\n       this.filter.disconnect( this.context.destination );\n \n     } else {\n \n       this.gain.disconnect( this.context.destination );\n \n     }\n \n     this.filter = value;\n     this.gain.connect( this.filter );\n     this.filter.connect( this.context.destination );\n \n     return this;\n \n   }\n \n   getMasterVolume() {\n \n     return this.gain.gain.value;\n \n   }\n \n   setMasterVolume( value ) {\n \n     this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n \n     return this;\n \n   }\n \n   updateMatrixWorld( force ) {\n \n     super.updateMatrixWorld( force );\n \n     const listener = this.context.listener;\n     const up = this.up;\n \n     this.timeDelta = this._clock.getDelta();\n \n     this.matrixWorld.decompose( _position$1, _quaternion$1, _scale$1 );\n \n     _orientation$1.set( 0, 0, - 1 ).applyQuaternion( _quaternion$1 );\n \n     if ( listener.positionX ) {\n \n       // code path for Chrome (see #14393)\n \n       const endTime = this.context.currentTime + this.timeDelta;\n \n       listener.positionX.linearRampToValueAtTime( _position$1.x, endTime );\n       listener.positionY.linearRampToValueAtTime( _position$1.y, endTime );\n       listener.positionZ.linearRampToValueAtTime( _position$1.z, endTime );\n       listener.forwardX.linearRampToValueAtTime( _orientation$1.x, endTime );\n       listener.forwardY.linearRampToValueAtTime( _orientation$1.y, endTime );\n       listener.forwardZ.linearRampToValueAtTime( _orientation$1.z, endTime );\n       listener.upX.linearRampToValueAtTime( up.x, endTime );\n       listener.upY.linearRampToValueAtTime( up.y, endTime );\n       listener.upZ.linearRampToValueAtTime( up.z, endTime );\n \n     } else {\n \n       listener.setPosition( _position$1.x, _position$1.y, _position$1.z );\n       listener.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z );\n \n     }\n \n   }\n \n }\n \n class Audio extends Object3D {\n \n   constructor( listener ) {\n \n     super();\n \n     this.type = 'Audio';\n \n     this.listener = listener;\n     this.context = listener.context;\n \n     this.gain = this.context.createGain();\n     this.gain.connect( listener.getInput() );\n \n     this.autoplay = false;\n \n     this.buffer = null;\n     this.detune = 0;\n     this.loop = false;\n     this.loopStart = 0;\n     this.loopEnd = 0;\n     this.offset = 0;\n     this.duration = undefined;\n     this.playbackRate = 1;\n     this.isPlaying = false;\n     this.hasPlaybackControl = true;\n     this.source = null;\n     this.sourceType = 'empty';\n \n     this._startedAt = 0;\n     this._progress = 0;\n     this._connected = false;\n \n     this.filters = [];\n \n   }\n \n   getOutput() {\n \n     return this.gain;\n \n   }\n \n   setNodeSource( audioNode ) {\n \n     this.hasPlaybackControl = false;\n     this.sourceType = 'audioNode';\n     this.source = audioNode;\n     this.connect();\n \n     return this;\n \n   }\n \n   setMediaElementSource( mediaElement ) {\n \n     this.hasPlaybackControl = false;\n     this.sourceType = 'mediaNode';\n     this.source = this.context.createMediaElementSource( mediaElement );\n     this.connect();\n \n     return this;\n \n   }\n \n   setMediaStreamSource( mediaStream ) {\n \n     this.hasPlaybackControl = false;\n     this.sourceType = 'mediaStreamNode';\n     this.source = this.context.createMediaStreamSource( mediaStream );\n     this.connect();\n \n     return this;\n \n   }\n \n   setBuffer( audioBuffer ) {\n \n     this.buffer = audioBuffer;\n     this.sourceType = 'buffer';\n \n     if ( this.autoplay ) this.play();\n \n     return this;\n \n   }\n \n   play( delay = 0 ) {\n \n     if ( this.isPlaying === true ) {\n \n       console.warn( 'THREE.Audio: Audio is already playing.' );\n       return;\n \n     }\n \n     if ( this.hasPlaybackControl === false ) {\n \n       console.warn( 'THREE.Audio: this Audio has no playback control.' );\n       return;\n \n     }\n \n     this._startedAt = this.context.currentTime + delay;\n \n     const source = this.context.createBufferSource();\n     source.buffer = this.buffer;\n     source.loop = this.loop;\n     source.loopStart = this.loopStart;\n     source.loopEnd = this.loopEnd;\n     source.onended = this.onEnded.bind( this );\n     source.start( this._startedAt, this._progress + this.offset, this.duration );\n \n     this.isPlaying = true;\n \n     this.source = source;\n \n     this.setDetune( this.detune );\n     this.setPlaybackRate( this.playbackRate );\n \n     return this.connect();\n \n   }\n \n   pause() {\n \n     if ( this.hasPlaybackControl === false ) {\n \n       console.warn( 'THREE.Audio: this Audio has no playback control.' );\n       return;\n \n     }\n \n     if ( this.isPlaying === true ) {\n \n       // update current progress\n \n       this._progress += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;\n \n       if ( this.loop === true ) {\n \n         // ensure _progress does not exceed duration with looped audios\n \n         this._progress = this._progress % ( this.duration || this.buffer.duration );\n \n       }\n \n       this.source.stop();\n       this.source.onended = null;\n \n       this.isPlaying = false;\n \n     }\n \n     return this;\n \n   }\n \n   stop() {\n \n     if ( this.hasPlaybackControl === false ) {\n \n       console.warn( 'THREE.Audio: this Audio has no playback control.' );\n       return;\n \n     }\n \n     this._progress = 0;\n \n     this.source.stop();\n     this.source.onended = null;\n     this.isPlaying = false;\n \n     return this;\n \n   }\n \n   connect() {\n \n     if ( this.filters.length > 0 ) {\n \n       this.source.connect( this.filters[ 0 ] );\n \n       for ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n \n         this.filters[ i - 1 ].connect( this.filters[ i ] );\n \n       }\n \n       this.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n \n     } else {\n \n       this.source.connect( this.getOutput() );\n \n     }\n \n     this._connected = true;\n \n     return this;\n \n   }\n \n   disconnect() {\n \n     if ( this.filters.length > 0 ) {\n \n       this.source.disconnect( this.filters[ 0 ] );\n \n       for ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n \n         this.filters[ i - 1 ].disconnect( this.filters[ i ] );\n \n       }\n \n       this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n \n     } else {\n \n       this.source.disconnect( this.getOutput() );\n \n     }\n \n     this._connected = false;\n \n     return this;\n \n   }\n \n   getFilters() {\n \n     return this.filters;\n \n   }\n \n   setFilters( value ) {\n \n     if ( ! value ) value = [];\n \n     if ( this._connected === true ) {\n \n       this.disconnect();\n       this.filters = value.slice();\n       this.connect();\n \n     } else {\n \n       this.filters = value.slice();\n \n     }\n \n     return this;\n \n   }\n \n   setDetune( value ) {\n \n     this.detune = value;\n \n     if ( this.source.detune === undefined ) return; // only set detune when available\n \n     if ( this.isPlaying === true ) {\n \n       this.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n \n     }\n \n     return this;\n \n   }\n \n   getDetune() {\n \n     return this.detune;\n \n   }\n \n   getFilter() {\n \n     return this.getFilters()[ 0 ];\n \n   }\n \n   setFilter( filter ) {\n \n     return this.setFilters( filter ? [ filter ] : [] );\n \n   }\n \n   setPlaybackRate( value ) {\n \n     if ( this.hasPlaybackControl === false ) {\n \n       console.warn( 'THREE.Audio: this Audio has no playback control.' );\n       return;\n \n     }\n \n     this.playbackRate = value;\n \n     if ( this.isPlaying === true ) {\n \n       this.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n \n     }\n \n     return this;\n \n   }\n \n   getPlaybackRate() {\n \n     return this.playbackRate;\n \n   }\n \n   onEnded() {\n \n     this.isPlaying = false;\n \n   }\n \n   getLoop() {\n \n     if ( this.hasPlaybackControl === false ) {\n \n       console.warn( 'THREE.Audio: this Audio has no playback control.' );\n       return false;\n \n     }\n \n     return this.loop;\n \n   }\n \n   setLoop( value ) {\n \n     if ( this.hasPlaybackControl === false ) {\n \n       console.warn( 'THREE.Audio: this Audio has no playback control.' );\n       return;\n \n     }\n \n     this.loop = value;\n \n     if ( this.isPlaying === true ) {\n \n       this.source.loop = this.loop;\n \n     }\n \n     return this;\n \n   }\n \n   setLoopStart( value ) {\n \n     this.loopStart = value;\n \n     return this;\n \n   }\n \n   setLoopEnd( value ) {\n \n     this.loopEnd = value;\n \n     return this;\n \n   }\n \n   getVolume() {\n \n     return this.gain.gain.value;\n \n   }\n \n   setVolume( value ) {\n \n     this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n \n     return this;\n \n   }\n \n }\n \n const _position = /*@__PURE__*/ new Vector3();\n const _quaternion = /*@__PURE__*/ new Quaternion();\n const _scale = /*@__PURE__*/ new Vector3();\n const _orientation = /*@__PURE__*/ new Vector3();\n \n class PositionalAudio extends Audio {\n \n   constructor( listener ) {\n \n     super( listener );\n \n     this.panner = this.context.createPanner();\n     this.panner.panningModel = 'HRTF';\n     this.panner.connect( this.gain );\n \n   }\n \n   getOutput() {\n \n     return this.panner;\n \n   }\n \n   getRefDistance() {\n \n     return this.panner.refDistance;\n \n   }\n \n   setRefDistance( value ) {\n \n     this.panner.refDistance = value;\n \n     return this;\n \n   }\n \n   getRolloffFactor() {\n \n     return this.panner.rolloffFactor;\n \n   }\n \n   setRolloffFactor( value ) {\n \n     this.panner.rolloffFactor = value;\n \n     return this;\n \n   }\n \n   getDistanceModel() {\n \n     return this.panner.distanceModel;\n \n   }\n \n   setDistanceModel( value ) {\n \n     this.panner.distanceModel = value;\n \n     return this;\n \n   }\n \n   getMaxDistance() {\n \n     return this.panner.maxDistance;\n \n   }\n \n   setMaxDistance( value ) {\n \n     this.panner.maxDistance = value;\n \n     return this;\n \n   }\n \n   setDirectionalCone( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n \n     this.panner.coneInnerAngle = coneInnerAngle;\n     this.panner.coneOuterAngle = coneOuterAngle;\n     this.panner.coneOuterGain = coneOuterGain;\n \n     return this;\n \n   }\n \n   updateMatrixWorld( force ) {\n \n     super.updateMatrixWorld( force );\n \n     if ( this.hasPlaybackControl === true && this.isPlaying === false ) return;\n \n     this.matrixWorld.decompose( _position, _quaternion, _scale );\n \n     _orientation.set( 0, 0, 1 ).applyQuaternion( _quaternion );\n \n     const panner = this.panner;\n \n     if ( panner.positionX ) {\n \n       // code path for Chrome and Firefox (see #14393)\n \n       const endTime = this.context.currentTime + this.listener.timeDelta;\n \n       panner.positionX.linearRampToValueAtTime( _position.x, endTime );\n       panner.positionY.linearRampToValueAtTime( _position.y, endTime );\n       panner.positionZ.linearRampToValueAtTime( _position.z, endTime );\n       panner.orientationX.linearRampToValueAtTime( _orientation.x, endTime );\n       panner.orientationY.linearRampToValueAtTime( _orientation.y, endTime );\n       panner.orientationZ.linearRampToValueAtTime( _orientation.z, endTime );\n \n     } else {\n \n       panner.setPosition( _position.x, _position.y, _position.z );\n       panner.setOrientation( _orientation.x, _orientation.y, _orientation.z );\n \n     }\n \n   }\n \n }\n \n class AudioAnalyser {\n \n   constructor( audio, fftSize = 2048 ) {\n \n     this.analyser = audio.context.createAnalyser();\n     this.analyser.fftSize = fftSize;\n \n     this.data = new Uint8Array( this.analyser.frequencyBinCount );\n \n     audio.getOutput().connect( this.analyser );\n \n   }\n \n \n   getFrequencyData() {\n \n     this.analyser.getByteFrequencyData( this.data );\n \n     return this.data;\n \n   }\n \n   getAverageFrequency() {\n \n     let value = 0;\n     const data = this.getFrequencyData();\n \n     for ( let i = 0; i < data.length; i ++ ) {\n \n       value += data[ i ];\n \n     }\n \n     return value / data.length;\n \n   }\n \n }\n \n class PropertyMixer {\n \n   constructor( binding, typeName, valueSize ) {\n \n     this.binding = binding;\n     this.valueSize = valueSize;\n \n     let mixFunction,\n       mixFunctionAdditive,\n       setIdentity;\n \n     // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n     //\n     // interpolators can use .buffer as their .result\n     // the data then goes to 'incoming'\n     //\n     // 'accu0' and 'accu1' are used frame-interleaved for\n     // the cumulative result and are compared to detect\n     // changes\n     //\n     // 'orig' stores the original state of the property\n     //\n     // 'add' is used for additive cumulative results\n     //\n     // 'work' is optional and is only present for quaternion types. It is used\n     // to store intermediate quaternion multiplication results\n \n     switch ( typeName ) {\n \n       case 'quaternion':\n         mixFunction = this._slerp;\n         mixFunctionAdditive = this._slerpAdditive;\n         setIdentity = this._setAdditiveIdentityQuaternion;\n \n         this.buffer = new Float64Array( valueSize * 6 );\n         this._workIndex = 5;\n         break;\n \n       case 'string':\n       case 'bool':\n         mixFunction = this._select;\n \n         // Use the regular mix function and for additive on these types,\n         // additive is not relevant for non-numeric types\n         mixFunctionAdditive = this._select;\n \n         setIdentity = this._setAdditiveIdentityOther;\n \n         this.buffer = new Array( valueSize * 5 );\n         break;\n \n       default:\n         mixFunction = this._lerp;\n         mixFunctionAdditive = this._lerpAdditive;\n         setIdentity = this._setAdditiveIdentityNumeric;\n \n         this.buffer = new Float64Array( valueSize * 5 );\n \n     }\n \n     this._mixBufferRegion = mixFunction;\n     this._mixBufferRegionAdditive = mixFunctionAdditive;\n     this._setIdentity = setIdentity;\n     this._origIndex = 3;\n     this._addIndex = 4;\n \n     this.cumulativeWeight = 0;\n     this.cumulativeWeightAdditive = 0;\n \n     this.useCount = 0;\n     this.referenceCount = 0;\n \n   }\n \n   // accumulate data in the 'incoming' region into 'accu<i>'\n   accumulate( accuIndex, weight ) {\n \n     // note: happily accumulating nothing when weight = 0, the caller knows\n     // the weight and shouldn't have made the call in the first place\n \n     const buffer = this.buffer,\n       stride = this.valueSize,\n       offset = accuIndex * stride + stride;\n \n     let currentWeight = this.cumulativeWeight;\n \n     if ( currentWeight === 0 ) {\n \n       // accuN := incoming * weight\n \n       for ( let i = 0; i !== stride; ++ i ) {\n \n         buffer[ offset + i ] = buffer[ i ];\n \n       }\n \n       currentWeight = weight;\n \n     } else {\n \n       // accuN := accuN + incoming * weight\n \n       currentWeight += weight;\n       const mix = weight / currentWeight;\n       this._mixBufferRegion( buffer, offset, 0, mix, stride );\n \n     }\n \n     this.cumulativeWeight = currentWeight;\n \n   }\n \n   // accumulate data in the 'incoming' region into 'add'\n   accumulateAdditive( weight ) {\n \n     const buffer = this.buffer,\n       stride = this.valueSize,\n       offset = stride * this._addIndex;\n \n     if ( this.cumulativeWeightAdditive === 0 ) {\n \n       // add = identity\n \n       this._setIdentity();\n \n     }\n \n     // add := add + incoming * weight\n \n     this._mixBufferRegionAdditive( buffer, offset, 0, weight, stride );\n     this.cumulativeWeightAdditive += weight;\n \n   }\n \n   // apply the state of 'accu<i>' to the binding when accus differ\n   apply( accuIndex ) {\n \n     const stride = this.valueSize,\n       buffer = this.buffer,\n       offset = accuIndex * stride + stride,\n \n       weight = this.cumulativeWeight,\n       weightAdditive = this.cumulativeWeightAdditive,\n \n       binding = this.binding;\n \n     this.cumulativeWeight = 0;\n     this.cumulativeWeightAdditive = 0;\n \n     if ( weight < 1 ) {\n \n       // accuN := accuN + original * ( 1 - cumulativeWeight )\n \n       const originalValueOffset = stride * this._origIndex;\n \n       this._mixBufferRegion(\n         buffer, offset, originalValueOffset, 1 - weight, stride );\n \n     }\n \n     if ( weightAdditive > 0 ) {\n \n       // accuN := accuN + additive accuN\n \n       this._mixBufferRegionAdditive( buffer, offset, this._addIndex * stride, 1, stride );\n \n     }\n \n     for ( let i = stride, e = stride + stride; i !== e; ++ i ) {\n \n       if ( buffer[ i ] !== buffer[ i + stride ] ) {\n \n         // value has changed -> update scene graph\n \n         binding.setValue( buffer, offset );\n         break;\n \n       }\n \n     }\n \n   }\n \n   // remember the state of the bound property and copy it to both accus\n   saveOriginalState() {\n \n     const binding = this.binding;\n \n     const buffer = this.buffer,\n       stride = this.valueSize,\n \n       originalValueOffset = stride * this._origIndex;\n \n     binding.getValue( buffer, originalValueOffset );\n \n     // accu[0..1] := orig -- initially detect changes against the original\n     for ( let i = stride, e = originalValueOffset; i !== e; ++ i ) {\n \n       buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n \n     }\n \n     // Add to identity for additive\n     this._setIdentity();\n \n     this.cumulativeWeight = 0;\n     this.cumulativeWeightAdditive = 0;\n \n   }\n \n   // apply the state previously taken via 'saveOriginalState' to the binding\n   restoreOriginalState() {\n \n     const originalValueOffset = this.valueSize * 3;\n     this.binding.setValue( this.buffer, originalValueOffset );\n \n   }\n \n   _setAdditiveIdentityNumeric() {\n \n     const startIndex = this._addIndex * this.valueSize;\n     const endIndex = startIndex + this.valueSize;\n \n     for ( let i = startIndex; i < endIndex; i ++ ) {\n \n       this.buffer[ i ] = 0;\n \n     }\n \n   }\n \n   _setAdditiveIdentityQuaternion() {\n \n     this._setAdditiveIdentityNumeric();\n     this.buffer[ this._addIndex * this.valueSize + 3 ] = 1;\n \n   }\n \n   _setAdditiveIdentityOther() {\n \n     const startIndex = this._origIndex * this.valueSize;\n     const targetIndex = this._addIndex * this.valueSize;\n \n     for ( let i = 0; i < this.valueSize; i ++ ) {\n \n       this.buffer[ targetIndex + i ] = this.buffer[ startIndex + i ];\n \n     }\n \n   }\n \n \n   // mix functions\n \n   _select( buffer, dstOffset, srcOffset, t, stride ) {\n \n     if ( t >= 0.5 ) {\n \n       for ( let i = 0; i !== stride; ++ i ) {\n \n         buffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n \n       }\n \n     }\n \n   }\n \n   _slerp( buffer, dstOffset, srcOffset, t ) {\n \n     Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n \n   }\n \n   _slerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\n \n     const workOffset = this._workIndex * stride;\n \n     // Store result in intermediate buffer offset\n     Quaternion.multiplyQuaternionsFlat( buffer, workOffset, buffer, dstOffset, buffer, srcOffset );\n \n     // Slerp to the intermediate result\n     Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t );\n \n   }\n \n   _lerp( buffer, dstOffset, srcOffset, t, stride ) {\n \n     const s = 1 - t;\n \n     for ( let i = 0; i !== stride; ++ i ) {\n \n       const j = dstOffset + i;\n \n       buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n \n     }\n \n   }\n \n   _lerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\n \n     for ( let i = 0; i !== stride; ++ i ) {\n \n       const j = dstOffset + i;\n \n       buffer[ j ] = buffer[ j ] + buffer[ srcOffset + i ] * t;\n \n     }\n \n   }\n \n }\n \n // Characters [].:/ are reserved for track binding syntax.\n const _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n const _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\n \n // Attempts to allow node names from any language. ES5's `\\w` regexp matches\n // only latin characters, and the unicode \\p{L} is not yet supported. So\n // instead, we exclude reserved characters and match everything else.\n const _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n const _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n \n // Parent directories, delimited by '/' or ':'. Currently unused, but must\n // be matched to parse the rest of the track name.\n const _directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n \n // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n const _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n \n // Object on target node, and accessor. May not contain reserved\n // characters. Accessor may contain any character except closing bracket.\n const _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n \n // Property and accessor. May not contain reserved characters. Accessor may\n // contain any non-bracket characters.\n const _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n \n const _trackRe = new RegExp( ''\n   + '^'\n   + _directoryRe\n   + _nodeRe\n   + _objectRe\n   + _propertyRe\n   + '$'\n );\n \n const _supportedObjectNames = [ 'material', 'materials', 'bones' ];\n \n class Composite {\n \n   constructor( targetGroup, path, optionalParsedPath ) {\n \n     const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n \n     this._targetGroup = targetGroup;\n     this._bindings = targetGroup.subscribe_( path, parsedPath );\n \n   }\n \n   getValue( array, offset ) {\n \n     this.bind(); // bind all binding\n \n     const firstValidIndex = this._targetGroup.nCachedObjects_,\n       binding = this._bindings[ firstValidIndex ];\n \n     // and only call .getValue on the first\n     if ( binding !== undefined ) binding.getValue( array, offset );\n \n   }\n \n   setValue( array, offset ) {\n \n     const bindings = this._bindings;\n \n     for ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n \n       bindings[ i ].setValue( array, offset );\n \n     }\n \n   }\n \n   bind() {\n \n     const bindings = this._bindings;\n \n     for ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n \n       bindings[ i ].bind();\n \n     }\n \n   }\n \n   unbind() {\n \n     const bindings = this._bindings;\n \n     for ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n \n       bindings[ i ].unbind();\n \n     }\n \n   }\n \n }\n \n // Note: This class uses a State pattern on a per-method basis:\n // 'bind' sets 'this.getValue' / 'setValue' and shadows the\n // prototype version of these methods with one that represents\n // the bound state. When the property is not found, the methods\n // become no-ops.\n class PropertyBinding {\n \n   constructor( rootNode, path, parsedPath ) {\n \n     this.path = path;\n     this.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n \n     this.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n \n     this.rootNode = rootNode;\n \n     // initial state of these methods that calls 'bind'\n     this.getValue = this._getValue_unbound;\n     this.setValue = this._setValue_unbound;\n \n   }\n \n \n   static create( root, path, parsedPath ) {\n \n     if ( ! ( root && root.isAnimationObjectGroup ) ) {\n \n       return new PropertyBinding( root, path, parsedPath );\n \n     } else {\n \n       return new PropertyBinding.Composite( root, path, parsedPath );\n \n     }\n \n   }\n \n   /**\n    * Replaces spaces with underscores and removes unsupported characters from\n    * node names, to ensure compatibility with parseTrackName().\n    *\n    * @param {string} name Node name to be sanitized.\n    * @return {string}\n    */\n   static sanitizeNodeName( name ) {\n \n     return name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\n \n   }\n \n   static parseTrackName( trackName ) {\n \n     const matches = _trackRe.exec( trackName );\n \n     if ( ! matches ) {\n \n       throw new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n \n     }\n \n     const results = {\n       // directoryName: matches[ 1 ], // (tschw) currently unused\n       nodeName: matches[ 2 ],\n       objectName: matches[ 3 ],\n       objectIndex: matches[ 4 ],\n       propertyName: matches[ 5 ], // required\n       propertyIndex: matches[ 6 ]\n     };\n \n     const lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n \n     if ( lastDot !== undefined && lastDot !== - 1 ) {\n \n       const objectName = results.nodeName.substring( lastDot + 1 );\n \n       // Object names must be checked against an allowlist. Otherwise, there\n       // is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n       // 'bar' could be the objectName, or part of a nodeName (which can\n       // include '.' characters).\n       if ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n \n         results.nodeName = results.nodeName.substring( 0, lastDot );\n         results.objectName = objectName;\n \n       }\n \n     }\n \n     if ( results.propertyName === null || results.propertyName.length === 0 ) {\n \n       throw new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n \n     }\n \n     return results;\n \n   }\n \n   static findNode( root, nodeName ) {\n \n     if ( ! nodeName || nodeName === '' || nodeName === '.' || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n \n       return root;\n \n     }\n \n     // search into skeleton bones.\n     if ( root.skeleton ) {\n \n       const bone = root.skeleton.getBoneByName( nodeName );\n \n       if ( bone !== undefined ) {\n \n         return bone;\n \n       }\n \n     }\n \n     // search into node subtree.\n     if ( root.children ) {\n \n       const searchNodeSubtree = function ( children ) {\n \n         for ( let i = 0; i < children.length; i ++ ) {\n \n           const childNode = children[ i ];\n \n           if ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n \n             return childNode;\n \n           }\n \n           const result = searchNodeSubtree( childNode.children );\n \n           if ( result ) return result;\n \n         }\n \n         return null;\n \n       };\n \n       const subTreeNode = searchNodeSubtree( root.children );\n \n       if ( subTreeNode ) {\n \n         return subTreeNode;\n \n       }\n \n     }\n \n     return null;\n \n   }\n \n   // these are used to \"bind\" a nonexistent property\n   _getValue_unavailable() {}\n   _setValue_unavailable() {}\n \n   // Getters\n \n   _getValue_direct( buffer, offset ) {\n \n     buffer[ offset ] = this.targetObject[ this.propertyName ];\n \n   }\n \n   _getValue_array( buffer, offset ) {\n \n     const source = this.resolvedProperty;\n \n     for ( let i = 0, n = source.length; i !== n; ++ i ) {\n \n       buffer[ offset ++ ] = source[ i ];\n \n     }\n \n   }\n \n   _getValue_arrayElement( buffer, offset ) {\n \n     buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n \n   }\n \n   _getValue_toArray( buffer, offset ) {\n \n     this.resolvedProperty.toArray( buffer, offset );\n \n   }\n \n   // Direct\n \n   _setValue_direct( buffer, offset ) {\n \n     this.targetObject[ this.propertyName ] = buffer[ offset ];\n \n   }\n \n   _setValue_direct_setNeedsUpdate( buffer, offset ) {\n \n     this.targetObject[ this.propertyName ] = buffer[ offset ];\n     this.targetObject.needsUpdate = true;\n \n   }\n \n   _setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n \n     this.targetObject[ this.propertyName ] = buffer[ offset ];\n     this.targetObject.matrixWorldNeedsUpdate = true;\n \n   }\n \n   // EntireArray\n \n   _setValue_array( buffer, offset ) {\n \n     const dest = this.resolvedProperty;\n \n     for ( let i = 0, n = dest.length; i !== n; ++ i ) {\n \n       dest[ i ] = buffer[ offset ++ ];\n \n     }\n \n   }\n \n   _setValue_array_setNeedsUpdate( buffer, offset ) {\n \n     const dest = this.resolvedProperty;\n \n     for ( let i = 0, n = dest.length; i !== n; ++ i ) {\n \n       dest[ i ] = buffer[ offset ++ ];\n \n     }\n \n     this.targetObject.needsUpdate = true;\n \n   }\n \n   _setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n \n     const dest = this.resolvedProperty;\n \n     for ( let i = 0, n = dest.length; i !== n; ++ i ) {\n \n       dest[ i ] = buffer[ offset ++ ];\n \n     }\n \n     this.targetObject.matrixWorldNeedsUpdate = true;\n \n   }\n \n   // ArrayElement\n \n   _setValue_arrayElement( buffer, offset ) {\n \n     this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n \n   }\n \n   _setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n \n     this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n     this.targetObject.needsUpdate = true;\n \n   }\n \n   _setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n \n     this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n     this.targetObject.matrixWorldNeedsUpdate = true;\n \n   }\n \n   // HasToFromArray\n \n   _setValue_fromArray( buffer, offset ) {\n \n     this.resolvedProperty.fromArray( buffer, offset );\n \n   }\n \n   _setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n \n     this.resolvedProperty.fromArray( buffer, offset );\n     this.targetObject.needsUpdate = true;\n \n   }\n \n   _setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n \n     this.resolvedProperty.fromArray( buffer, offset );\n     this.targetObject.matrixWorldNeedsUpdate = true;\n \n   }\n \n   _getValue_unbound( targetArray, offset ) {\n \n     this.bind();\n     this.getValue( targetArray, offset );\n \n   }\n \n   _setValue_unbound( sourceArray, offset ) {\n \n     this.bind();\n     this.setValue( sourceArray, offset );\n \n   }\n \n   // create getter / setter pair for a property in the scene graph\n   bind() {\n \n     let targetObject = this.node;\n     const parsedPath = this.parsedPath;\n \n     const objectName = parsedPath.objectName;\n     const propertyName = parsedPath.propertyName;\n     let propertyIndex = parsedPath.propertyIndex;\n \n     if ( ! targetObject ) {\n \n       targetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\n \n       this.node = targetObject;\n \n     }\n \n     // set fail state so we can just 'return' on error\n     this.getValue = this._getValue_unavailable;\n     this.setValue = this._setValue_unavailable;\n \n     // ensure there is a value node\n     if ( ! targetObject ) {\n \n       console.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n       return;\n \n     }\n \n     if ( objectName ) {\n \n       let objectIndex = parsedPath.objectIndex;\n \n       // special cases were we need to reach deeper into the hierarchy to get the face materials....\n       switch ( objectName ) {\n \n         case 'materials':\n \n           if ( ! targetObject.material ) {\n \n             console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n             return;\n \n           }\n \n           if ( ! targetObject.material.materials ) {\n \n             console.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n             return;\n \n           }\n \n           targetObject = targetObject.material.materials;\n \n           break;\n \n         case 'bones':\n \n           if ( ! targetObject.skeleton ) {\n \n             console.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n             return;\n \n           }\n \n           // potential future optimization: skip this if propertyIndex is already an integer\n           // and convert the integer string to a true integer.\n \n           targetObject = targetObject.skeleton.bones;\n \n           // support resolving morphTarget names into indices.\n           for ( let i = 0; i < targetObject.length; i ++ ) {\n \n             if ( targetObject[ i ].name === objectIndex ) {\n \n               objectIndex = i;\n               break;\n \n             }\n \n           }\n \n           break;\n \n         default:\n \n           if ( targetObject[ objectName ] === undefined ) {\n \n             console.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n             return;\n \n           }\n \n           targetObject = targetObject[ objectName ];\n \n       }\n \n \n       if ( objectIndex !== undefined ) {\n \n         if ( targetObject[ objectIndex ] === undefined ) {\n \n           console.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n           return;\n \n         }\n \n         targetObject = targetObject[ objectIndex ];\n \n       }\n \n     }\n \n     // resolve property\n     const nodeProperty = targetObject[ propertyName ];\n \n     if ( nodeProperty === undefined ) {\n \n       const nodeName = parsedPath.nodeName;\n \n       console.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n         '.' + propertyName + ' but it wasn\\'t found.', targetObject );\n       return;\n \n     }\n \n     // determine versioning scheme\n     let versioning = this.Versioning.None;\n \n     this.targetObject = targetObject;\n \n     if ( targetObject.needsUpdate !== undefined ) { // material\n \n       versioning = this.Versioning.NeedsUpdate;\n \n     } else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n \n       versioning = this.Versioning.MatrixWorldNeedsUpdate;\n \n     }\n \n     // determine how the property gets bound\n     let bindingType = this.BindingType.Direct;\n \n     if ( propertyIndex !== undefined ) {\n \n       // access a sub element of the property array (only primitives are supported right now)\n \n       if ( propertyName === 'morphTargetInfluences' ) {\n \n         // potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n \n         // support resolving morphTarget names into indices.\n         if ( ! targetObject.geometry ) {\n \n           console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n           return;\n \n         }\n \n         if ( targetObject.geometry.isBufferGeometry ) {\n \n           if ( ! targetObject.geometry.morphAttributes ) {\n \n             console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n             return;\n \n           }\n \n           if ( targetObject.morphTargetDictionary[ propertyIndex ] !== undefined ) {\n \n             propertyIndex = targetObject.morphTargetDictionary[ propertyIndex ];\n \n           }\n \n \n         } else {\n \n           console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this );\n           return;\n \n         }\n \n       }\n \n       bindingType = this.BindingType.ArrayElement;\n \n       this.resolvedProperty = nodeProperty;\n       this.propertyIndex = propertyIndex;\n \n     } else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n \n       // must use copy for Object3D.Euler/Quaternion\n \n       bindingType = this.BindingType.HasFromToArray;\n \n       this.resolvedProperty = nodeProperty;\n \n     } else if ( Array.isArray( nodeProperty ) ) {\n \n       bindingType = this.BindingType.EntireArray;\n \n       this.resolvedProperty = nodeProperty;\n \n     } else {\n \n       this.propertyName = propertyName;\n \n     }\n \n     // select getter / setter\n     this.getValue = this.GetterByBindingType[ bindingType ];\n     this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n \n   }\n \n   unbind() {\n \n     this.node = null;\n \n     // back to the prototype version of getValue / setValue\n     // note: avoiding to mutate the shape of 'this' via 'delete'\n     this.getValue = this._getValue_unbound;\n     this.setValue = this._setValue_unbound;\n \n   }\n \n }\n \n PropertyBinding.Composite = Composite;\n \n PropertyBinding.prototype.BindingType = {\n   Direct: 0,\n   EntireArray: 1,\n   ArrayElement: 2,\n   HasFromToArray: 3\n };\n \n PropertyBinding.prototype.Versioning = {\n   None: 0,\n   NeedsUpdate: 1,\n   MatrixWorldNeedsUpdate: 2\n };\n \n PropertyBinding.prototype.GetterByBindingType = [\n \n   PropertyBinding.prototype._getValue_direct,\n   PropertyBinding.prototype._getValue_array,\n   PropertyBinding.prototype._getValue_arrayElement,\n   PropertyBinding.prototype._getValue_toArray,\n \n ];\n \n PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [\n \n   [\n     // Direct\n     PropertyBinding.prototype._setValue_direct,\n     PropertyBinding.prototype._setValue_direct_setNeedsUpdate,\n     PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate,\n \n   ], [\n \n     // EntireArray\n \n     PropertyBinding.prototype._setValue_array,\n     PropertyBinding.prototype._setValue_array_setNeedsUpdate,\n     PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate,\n \n   ], [\n \n     // ArrayElement\n     PropertyBinding.prototype._setValue_arrayElement,\n     PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,\n     PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate,\n \n   ], [\n \n     // HasToFromArray\n     PropertyBinding.prototype._setValue_fromArray,\n     PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,\n     PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate,\n \n   ]\n \n ];\n \n /**\n  *\n  * A group of objects that receives a shared animation state.\n  *\n  * Usage:\n  *\n  *  - Add objects you would otherwise pass as 'root' to the\n  *    constructor or the .clipAction method of AnimationMixer.\n  *\n  *  - Instead pass this object as 'root'.\n  *\n  *  - You can also add and remove objects later when the mixer\n  *    is running.\n  *\n  * Note:\n  *\n  *    Objects of this class appear as one object to the mixer,\n  *    so cache control of the individual objects must be done\n  *    on the group.\n  *\n  * Limitation:\n  *\n  *  - The animated properties must be compatible among the\n  *    all objects in the group.\n  *\n  *  - A single property can either be controlled through a\n  *    target group or directly, but not both.\n  */\n \n class AnimationObjectGroup {\n \n   constructor() {\n \n     this.uuid = generateUUID();\n \n     // cached objects followed by the active ones\n     this._objects = Array.prototype.slice.call( arguments );\n \n     this.nCachedObjects_ = 0; // threshold\n     // note: read by PropertyBinding.Composite\n \n     const indices = {};\n     this._indicesByUUID = indices; // for bookkeeping\n \n     for ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n \n       indices[ arguments[ i ].uuid ] = i;\n \n     }\n \n     this._paths = []; // inside: string\n     this._parsedPaths = []; // inside: { we don't care, here }\n     this._bindings = []; // inside: Array< PropertyBinding >\n     this._bindingsIndicesByPath = {}; // inside: indices in these arrays\n \n     const scope = this;\n \n     this.stats = {\n \n       objects: {\n         get total() {\n \n           return scope._objects.length;\n \n         },\n         get inUse() {\n \n           return this.total - scope.nCachedObjects_;\n \n         }\n       },\n       get bindingsPerObject() {\n \n         return scope._bindings.length;\n \n       }\n \n     };\n \n   }\n \n   add() {\n \n     const objects = this._objects,\n       indicesByUUID = this._indicesByUUID,\n       paths = this._paths,\n       parsedPaths = this._parsedPaths,\n       bindings = this._bindings,\n       nBindings = bindings.length;\n \n     let knownObject = undefined,\n       nObjects = objects.length,\n       nCachedObjects = this.nCachedObjects_;\n \n     for ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n \n       const object = arguments[ i ],\n         uuid = object.uuid;\n       let index = indicesByUUID[ uuid ];\n \n       if ( index === undefined ) {\n \n         // unknown object -> add it to the ACTIVE region\n \n         index = nObjects ++;\n         indicesByUUID[ uuid ] = index;\n         objects.push( object );\n \n         // accounting is done, now do the same for all bindings\n \n         for ( let j = 0, m = nBindings; j !== m; ++ j ) {\n \n           bindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n \n         }\n \n       } else if ( index < nCachedObjects ) {\n \n         knownObject = objects[ index ];\n \n         // move existing object to the ACTIVE region\n \n         const firstActiveIndex = -- nCachedObjects,\n           lastCachedObject = objects[ firstActiveIndex ];\n \n         indicesByUUID[ lastCachedObject.uuid ] = index;\n         objects[ index ] = lastCachedObject;\n \n         indicesByUUID[ uuid ] = firstActiveIndex;\n         objects[ firstActiveIndex ] = object;\n \n         // accounting is done, now do the same for all bindings\n \n         for ( let j = 0, m = nBindings; j !== m; ++ j ) {\n \n           const bindingsForPath = bindings[ j ],\n             lastCached = bindingsForPath[ firstActiveIndex ];\n \n           let binding = bindingsForPath[ index ];\n \n           bindingsForPath[ index ] = lastCached;\n \n           if ( binding === undefined ) {\n \n             // since we do not bother to create new bindings\n             // for objects that are cached, the binding may\n             // or may not exist\n \n             binding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n \n           }\n \n           bindingsForPath[ firstActiveIndex ] = binding;\n \n         }\n \n       } else if ( objects[ index ] !== knownObject ) {\n \n         console.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n           'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n \n       } // else the object is already where we want it to be\n \n     } // for arguments\n \n     this.nCachedObjects_ = nCachedObjects;\n \n   }\n \n   remove() {\n \n     const objects = this._objects,\n       indicesByUUID = this._indicesByUUID,\n       bindings = this._bindings,\n       nBindings = bindings.length;\n \n     let nCachedObjects = this.nCachedObjects_;\n \n     for ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n \n       const object = arguments[ i ],\n         uuid = object.uuid,\n         index = indicesByUUID[ uuid ];\n \n       if ( index !== undefined && index >= nCachedObjects ) {\n \n         // move existing object into the CACHED region\n \n         const lastCachedIndex = nCachedObjects ++,\n           firstActiveObject = objects[ lastCachedIndex ];\n \n         indicesByUUID[ firstActiveObject.uuid ] = index;\n         objects[ index ] = firstActiveObject;\n \n         indicesByUUID[ uuid ] = lastCachedIndex;\n         objects[ lastCachedIndex ] = object;\n \n         // accounting is done, now do the same for all bindings\n \n         for ( let j = 0, m = nBindings; j !== m; ++ j ) {\n \n           const bindingsForPath = bindings[ j ],\n             firstActive = bindingsForPath[ lastCachedIndex ],\n             binding = bindingsForPath[ index ];\n \n           bindingsForPath[ index ] = firstActive;\n           bindingsForPath[ lastCachedIndex ] = binding;\n \n         }\n \n       }\n \n     } // for arguments\n \n     this.nCachedObjects_ = nCachedObjects;\n \n   }\n \n   // remove & forget\n   uncache() {\n \n     const objects = this._objects,\n       indicesByUUID = this._indicesByUUID,\n       bindings = this._bindings,\n       nBindings = bindings.length;\n \n     let nCachedObjects = this.nCachedObjects_,\n       nObjects = objects.length;\n \n     for ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n \n       const object = arguments[ i ],\n         uuid = object.uuid,\n         index = indicesByUUID[ uuid ];\n \n       if ( index !== undefined ) {\n \n         delete indicesByUUID[ uuid ];\n \n         if ( index < nCachedObjects ) {\n \n           // object is cached, shrink the CACHED region\n \n           const firstActiveIndex = -- nCachedObjects,\n             lastCachedObject = objects[ firstActiveIndex ],\n             lastIndex = -- nObjects,\n             lastObject = objects[ lastIndex ];\n \n           // last cached object takes this object's place\n           indicesByUUID[ lastCachedObject.uuid ] = index;\n           objects[ index ] = lastCachedObject;\n \n           // last object goes to the activated slot and pop\n           indicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n           objects[ firstActiveIndex ] = lastObject;\n           objects.pop();\n \n           // accounting is done, now do the same for all bindings\n \n           for ( let j = 0, m = nBindings; j !== m; ++ j ) {\n \n             const bindingsForPath = bindings[ j ],\n               lastCached = bindingsForPath[ firstActiveIndex ],\n               last = bindingsForPath[ lastIndex ];\n \n             bindingsForPath[ index ] = lastCached;\n             bindingsForPath[ firstActiveIndex ] = last;\n             bindingsForPath.pop();\n \n           }\n \n         } else {\n \n           // object is active, just swap with the last and pop\n \n           const lastIndex = -- nObjects,\n             lastObject = objects[ lastIndex ];\n \n           if ( lastIndex > 0 ) {\n \n             indicesByUUID[ lastObject.uuid ] = index;\n \n           }\n \n           objects[ index ] = lastObject;\n           objects.pop();\n \n           // accounting is done, now do the same for all bindings\n \n           for ( let j = 0, m = nBindings; j !== m; ++ j ) {\n \n             const bindingsForPath = bindings[ j ];\n \n             bindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n             bindingsForPath.pop();\n \n           }\n \n         } // cached or active\n \n       } // if object is known\n \n     } // for arguments\n \n     this.nCachedObjects_ = nCachedObjects;\n \n   }\n \n   // Internal interface used by befriended PropertyBinding.Composite:\n \n   subscribe_( path, parsedPath ) {\n \n     // returns an array of bindings for the given path that is changed\n     // according to the contained objects in the group\n \n     const indicesByPath = this._bindingsIndicesByPath;\n     let index = indicesByPath[ path ];\n     const bindings = this._bindings;\n \n     if ( index !== undefined ) return bindings[ index ];\n \n     const paths = this._paths,\n       parsedPaths = this._parsedPaths,\n       objects = this._objects,\n       nObjects = objects.length,\n       nCachedObjects = this.nCachedObjects_,\n       bindingsForPath = new Array( nObjects );\n \n     index = bindings.length;\n \n     indicesByPath[ path ] = index;\n \n     paths.push( path );\n     parsedPaths.push( parsedPath );\n     bindings.push( bindingsForPath );\n \n     for ( let i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n \n       const object = objects[ i ];\n       bindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n \n     }\n \n     return bindingsForPath;\n \n   }\n \n   unsubscribe_( path ) {\n \n     // tells the group to forget about a property path and no longer\n     // update the array previously obtained with 'subscribe_'\n \n     const indicesByPath = this._bindingsIndicesByPath,\n       index = indicesByPath[ path ];\n \n     if ( index !== undefined ) {\n \n       const paths = this._paths,\n         parsedPaths = this._parsedPaths,\n         bindings = this._bindings,\n         lastBindingsIndex = bindings.length - 1,\n         lastBindings = bindings[ lastBindingsIndex ],\n         lastBindingsPath = path[ lastBindingsIndex ];\n \n       indicesByPath[ lastBindingsPath ] = index;\n \n       bindings[ index ] = lastBindings;\n       bindings.pop();\n \n       parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n       parsedPaths.pop();\n \n       paths[ index ] = paths[ lastBindingsIndex ];\n       paths.pop();\n \n     }\n \n   }\n \n }\n \n AnimationObjectGroup.prototype.isAnimationObjectGroup = true;\n \n class AnimationAction {\n \n   constructor( mixer, clip, localRoot = null, blendMode = clip.blendMode ) {\n \n     this._mixer = mixer;\n     this._clip = clip;\n     this._localRoot = localRoot;\n     this.blendMode = blendMode;\n \n     const tracks = clip.tracks,\n       nTracks = tracks.length,\n       interpolants = new Array( nTracks );\n \n     const interpolantSettings = {\n       endingStart: ZeroCurvatureEnding,\n       endingEnd: ZeroCurvatureEnding\n     };\n \n     for ( let i = 0; i !== nTracks; ++ i ) {\n \n       const interpolant = tracks[ i ].createInterpolant( null );\n       interpolants[ i ] = interpolant;\n       interpolant.settings = interpolantSettings;\n \n     }\n \n     this._interpolantSettings = interpolantSettings;\n \n     this._interpolants = interpolants; // bound by the mixer\n \n     // inside: PropertyMixer (managed by the mixer)\n     this._propertyBindings = new Array( nTracks );\n \n     this._cacheIndex = null; // for the memory manager\n     this._byClipCacheIndex = null; // for the memory manager\n \n     this._timeScaleInterpolant = null;\n     this._weightInterpolant = null;\n \n     this.loop = LoopRepeat;\n     this._loopCount = - 1;\n \n     // global mixer time when the action is to be started\n     // it's set back to 'null' upon start of the action\n     this._startTime = null;\n \n     // scaled local time of the action\n     // gets clamped or wrapped to 0..clip.duration according to loop\n     this.time = 0;\n \n     this.timeScale = 1;\n     this._effectiveTimeScale = 1;\n \n     this.weight = 1;\n     this._effectiveWeight = 1;\n \n     this.repetitions = Infinity; // no. of repetitions when looping\n \n     this.paused = false; // true -> zero effective time scale\n     this.enabled = true; // false -> zero effective weight\n \n     this.clampWhenFinished = false;// keep feeding the last frame?\n \n     this.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\n     this.zeroSlopeAtEnd = true;// clips for start, loop and end\n \n   }\n \n   // State & Scheduling\n \n   play() {\n \n     this._mixer._activateAction( this );\n \n     return this;\n \n   }\n \n   stop() {\n \n     this._mixer._deactivateAction( this );\n \n     return this.reset();\n \n   }\n \n   reset() {\n \n     this.paused = false;\n     this.enabled = true;\n \n     this.time = 0; // restart clip\n     this._loopCount = - 1;// forget previous loops\n     this._startTime = null;// forget scheduling\n \n     return this.stopFading().stopWarping();\n \n   }\n \n   isRunning() {\n \n     return this.enabled && ! this.paused && this.timeScale !== 0 &&\n       this._startTime === null && this._mixer._isActiveAction( this );\n \n   }\n \n   // return true when play has been called\n   isScheduled() {\n \n     return this._mixer._isActiveAction( this );\n \n   }\n \n   startAt( time ) {\n \n     this._startTime = time;\n \n     return this;\n \n   }\n \n   setLoop( mode, repetitions ) {\n \n     this.loop = mode;\n     this.repetitions = repetitions;\n \n     return this;\n \n   }\n \n   // Weight\n \n   // set the weight stopping any scheduled fading\n   // although .enabled = false yields an effective weight of zero, this\n   // method does *not* change .enabled, because it would be confusing\n   setEffectiveWeight( weight ) {\n \n     this.weight = weight;\n \n     // note: same logic as when updated at runtime\n     this._effectiveWeight = this.enabled ? weight : 0;\n \n     return this.stopFading();\n \n   }\n \n   // return the weight considering fading and .enabled\n   getEffectiveWeight() {\n \n     return this._effectiveWeight;\n \n   }\n \n   fadeIn( duration ) {\n \n     return this._scheduleFading( duration, 0, 1 );\n \n   }\n \n   fadeOut( duration ) {\n \n     return this._scheduleFading( duration, 1, 0 );\n \n   }\n \n   crossFadeFrom( fadeOutAction, duration, warp ) {\n \n     fadeOutAction.fadeOut( duration );\n     this.fadeIn( duration );\n \n     if ( warp ) {\n \n       const fadeInDuration = this._clip.duration,\n         fadeOutDuration = fadeOutAction._clip.duration,\n \n         startEndRatio = fadeOutDuration / fadeInDuration,\n         endStartRatio = fadeInDuration / fadeOutDuration;\n \n       fadeOutAction.warp( 1.0, startEndRatio, duration );\n       this.warp( endStartRatio, 1.0, duration );\n \n     }\n \n     return this;\n \n   }\n \n   crossFadeTo( fadeInAction, duration, warp ) {\n \n     return fadeInAction.crossFadeFrom( this, duration, warp );\n \n   }\n \n   stopFading() {\n \n     const weightInterpolant = this._weightInterpolant;\n \n     if ( weightInterpolant !== null ) {\n \n       this._weightInterpolant = null;\n       this._mixer._takeBackControlInterpolant( weightInterpolant );\n \n     }\n \n     return this;\n \n   }\n \n   // Time Scale Control\n \n   // set the time scale stopping any scheduled warping\n   // although .paused = true yields an effective time scale of zero, this\n   // method does *not* change .paused, because it would be confusing\n   setEffectiveTimeScale( timeScale ) {\n \n     this.timeScale = timeScale;\n     this._effectiveTimeScale = this.paused ? 0 : timeScale;\n \n     return this.stopWarping();\n \n   }\n \n   // return the time scale considering warping and .paused\n   getEffectiveTimeScale() {\n \n     return this._effectiveTimeScale;\n \n   }\n \n   setDuration( duration ) {\n \n     this.timeScale = this._clip.duration / duration;\n \n     return this.stopWarping();\n \n   }\n \n   syncWith( action ) {\n \n     this.time = action.time;\n     this.timeScale = action.timeScale;\n \n     return this.stopWarping();\n \n   }\n \n   halt( duration ) {\n \n     return this.warp( this._effectiveTimeScale, 0, duration );\n \n   }\n \n   warp( startTimeScale, endTimeScale, duration ) {\n \n     const mixer = this._mixer,\n       now = mixer.time,\n       timeScale = this.timeScale;\n \n     let interpolant = this._timeScaleInterpolant;\n \n     if ( interpolant === null ) {\n \n       interpolant = mixer._lendControlInterpolant();\n       this._timeScaleInterpolant = interpolant;\n \n     }\n \n     const times = interpolant.parameterPositions,\n       values = interpolant.sampleValues;\n \n     times[ 0 ] = now;\n     times[ 1 ] = now + duration;\n \n     values[ 0 ] = startTimeScale / timeScale;\n     values[ 1 ] = endTimeScale / timeScale;\n \n     return this;\n \n   }\n \n   stopWarping() {\n \n     const timeScaleInterpolant = this._timeScaleInterpolant;\n \n     if ( timeScaleInterpolant !== null ) {\n \n       this._timeScaleInterpolant = null;\n       this._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n \n     }\n \n     return this;\n \n   }\n \n   // Object Accessors\n \n   getMixer() {\n \n     return this._mixer;\n \n   }\n \n   getClip() {\n \n     return this._clip;\n \n   }\n \n   getRoot() {\n \n     return this._localRoot || this._mixer._root;\n \n   }\n \n   // Interna\n \n   _update( time, deltaTime, timeDirection, accuIndex ) {\n \n     // called by the mixer\n \n     if ( ! this.enabled ) {\n \n       // call ._updateWeight() to update ._effectiveWeight\n \n       this._updateWeight( time );\n       return;\n \n     }\n \n     const startTime = this._startTime;\n \n     if ( startTime !== null ) {\n \n       // check for scheduled start of action\n \n       const timeRunning = ( time - startTime ) * timeDirection;\n       if ( timeRunning < 0 || timeDirection === 0 ) {\n \n         return; // yet to come / don't decide when delta = 0\n \n       }\n \n       // start\n \n       this._startTime = null; // unschedule\n       deltaTime = timeDirection * timeRunning;\n \n     }\n \n     // apply time scale and advance time\n \n     deltaTime *= this._updateTimeScale( time );\n     const clipTime = this._updateTime( deltaTime );\n \n     // note: _updateTime may disable the action resulting in\n     // an effective weight of 0\n \n     const weight = this._updateWeight( time );\n \n     if ( weight > 0 ) {\n \n       const interpolants = this._interpolants;\n       const propertyMixers = this._propertyBindings;\n \n       switch ( this.blendMode ) {\n \n         case AdditiveAnimationBlendMode:\n \n           for ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n \n             interpolants[ j ].evaluate( clipTime );\n             propertyMixers[ j ].accumulateAdditive( weight );\n \n           }\n \n           break;\n \n         case NormalAnimationBlendMode:\n         default:\n \n           for ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n \n             interpolants[ j ].evaluate( clipTime );\n             propertyMixers[ j ].accumulate( accuIndex, weight );\n \n           }\n \n       }\n \n     }\n \n   }\n \n   _updateWeight( time ) {\n \n     let weight = 0;\n \n     if ( this.enabled ) {\n \n       weight = this.weight;\n       const interpolant = this._weightInterpolant;\n \n       if ( interpolant !== null ) {\n \n         const interpolantValue = interpolant.evaluate( time )[ 0 ];\n \n         weight *= interpolantValue;\n \n         if ( time > interpolant.parameterPositions[ 1 ] ) {\n \n           this.stopFading();\n \n           if ( interpolantValue === 0 ) {\n \n             // faded out, disable\n             this.enabled = false;\n \n           }\n \n         }\n \n       }\n \n     }\n \n     this._effectiveWeight = weight;\n     return weight;\n \n   }\n \n   _updateTimeScale( time ) {\n \n     let timeScale = 0;\n \n     if ( ! this.paused ) {\n \n       timeScale = this.timeScale;\n \n       const interpolant = this._timeScaleInterpolant;\n \n       if ( interpolant !== null ) {\n \n         const interpolantValue = interpolant.evaluate( time )[ 0 ];\n \n         timeScale *= interpolantValue;\n \n         if ( time > interpolant.parameterPositions[ 1 ] ) {\n \n           this.stopWarping();\n \n           if ( timeScale === 0 ) {\n \n             // motion has halted, pause\n             this.paused = true;\n \n           } else {\n \n             // warp done - apply final time scale\n             this.timeScale = timeScale;\n \n           }\n \n         }\n \n       }\n \n     }\n \n     this._effectiveTimeScale = timeScale;\n     return timeScale;\n \n   }\n \n   _updateTime( deltaTime ) {\n \n     const duration = this._clip.duration;\n     const loop = this.loop;\n \n     let time = this.time + deltaTime;\n     let loopCount = this._loopCount;\n \n     const pingPong = ( loop === LoopPingPong );\n \n     if ( deltaTime === 0 ) {\n \n       if ( loopCount === - 1 ) return time;\n \n       return ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n \n     }\n \n     if ( loop === LoopOnce ) {\n \n       if ( loopCount === - 1 ) {\n \n         // just started\n \n         this._loopCount = 0;\n         this._setEndings( true, true, false );\n \n       }\n \n       handle_stop: {\n \n         if ( time >= duration ) {\n \n           time = duration;\n \n         } else if ( time < 0 ) {\n \n           time = 0;\n \n         } else {\n \n           this.time = time;\n \n           break handle_stop;\n \n         }\n \n         if ( this.clampWhenFinished ) this.paused = true;\n         else this.enabled = false;\n \n         this.time = time;\n \n         this._mixer.dispatchEvent( {\n           type: 'finished', action: this,\n           direction: deltaTime < 0 ? - 1 : 1\n         } );\n \n       }\n \n     } else { // repetitive Repeat or PingPong\n \n       if ( loopCount === - 1 ) {\n \n         // just started\n \n         if ( deltaTime >= 0 ) {\n \n           loopCount = 0;\n \n           this._setEndings( true, this.repetitions === 0, pingPong );\n \n         } else {\n \n           // when looping in reverse direction, the initial\n           // transition through zero counts as a repetition,\n           // so leave loopCount at -1\n \n           this._setEndings( this.repetitions === 0, true, pingPong );\n \n         }\n \n       }\n \n       if ( time >= duration || time < 0 ) {\n \n         // wrap around\n \n         const loopDelta = Math.floor( time / duration ); // signed\n         time -= duration * loopDelta;\n \n         loopCount += Math.abs( loopDelta );\n \n         const pending = this.repetitions - loopCount;\n \n         if ( pending <= 0 ) {\n \n           // have to stop (switch state, clamp time, fire event)\n \n           if ( this.clampWhenFinished ) this.paused = true;\n           else this.enabled = false;\n \n           time = deltaTime > 0 ? duration : 0;\n \n           this.time = time;\n \n           this._mixer.dispatchEvent( {\n             type: 'finished', action: this,\n             direction: deltaTime > 0 ? 1 : - 1\n           } );\n \n         } else {\n \n           // keep running\n \n           if ( pending === 1 ) {\n \n             // entering the last round\n \n             const atStart = deltaTime < 0;\n             this._setEndings( atStart, ! atStart, pingPong );\n \n           } else {\n \n             this._setEndings( false, false, pingPong );\n \n           }\n \n           this._loopCount = loopCount;\n \n           this.time = time;\n \n           this._mixer.dispatchEvent( {\n             type: 'loop', action: this, loopDelta: loopDelta\n           } );\n \n         }\n \n       } else {\n \n         this.time = time;\n \n       }\n \n       if ( pingPong && ( loopCount & 1 ) === 1 ) {\n \n         // invert time for the \"pong round\"\n \n         return duration - time;\n \n       }\n \n     }\n \n     return time;\n \n   }\n \n   _setEndings( atStart, atEnd, pingPong ) {\n \n     const settings = this._interpolantSettings;\n \n     if ( pingPong ) {\n \n       settings.endingStart = ZeroSlopeEnding;\n       settings.endingEnd = ZeroSlopeEnding;\n \n     } else {\n \n       // assuming for LoopOnce atStart == atEnd == true\n \n       if ( atStart ) {\n \n         settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n \n       } else {\n \n         settings.endingStart = WrapAroundEnding;\n \n       }\n \n       if ( atEnd ) {\n \n         settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n \n       } else {\n \n         settings.endingEnd \t = WrapAroundEnding;\n \n       }\n \n     }\n \n   }\n \n   _scheduleFading( duration, weightNow, weightThen ) {\n \n     const mixer = this._mixer, now = mixer.time;\n     let interpolant = this._weightInterpolant;\n \n     if ( interpolant === null ) {\n \n       interpolant = mixer._lendControlInterpolant();\n       this._weightInterpolant = interpolant;\n \n     }\n \n     const times = interpolant.parameterPositions,\n       values = interpolant.sampleValues;\n \n     times[ 0 ] = now;\n     values[ 0 ] = weightNow;\n     times[ 1 ] = now + duration;\n     values[ 1 ] = weightThen;\n \n     return this;\n \n   }\n \n }\n \n class AnimationMixer extends EventDispatcher {\n \n   constructor( root ) {\n \n     super();\n \n     this._root = root;\n     this._initMemoryManager();\n     this._accuIndex = 0;\n     this.time = 0;\n     this.timeScale = 1.0;\n \n   }\n \n   _bindAction( action, prototypeAction ) {\n \n     const root = action._localRoot || this._root,\n       tracks = action._clip.tracks,\n       nTracks = tracks.length,\n       bindings = action._propertyBindings,\n       interpolants = action._interpolants,\n       rootUuid = root.uuid,\n       bindingsByRoot = this._bindingsByRootAndName;\n \n     let bindingsByName = bindingsByRoot[ rootUuid ];\n \n     if ( bindingsByName === undefined ) {\n \n       bindingsByName = {};\n       bindingsByRoot[ rootUuid ] = bindingsByName;\n \n     }\n \n     for ( let i = 0; i !== nTracks; ++ i ) {\n \n       const track = tracks[ i ],\n         trackName = track.name;\n \n       let binding = bindingsByName[ trackName ];\n \n       if ( binding !== undefined ) {\n \n         bindings[ i ] = binding;\n \n       } else {\n \n         binding = bindings[ i ];\n \n         if ( binding !== undefined ) {\n \n           // existing binding, make sure the cache knows\n \n           if ( binding._cacheIndex === null ) {\n \n             ++ binding.referenceCount;\n             this._addInactiveBinding( binding, rootUuid, trackName );\n \n           }\n \n           continue;\n \n         }\n \n         const path = prototypeAction && prototypeAction.\n           _propertyBindings[ i ].binding.parsedPath;\n \n         binding = new PropertyMixer(\n           PropertyBinding.create( root, trackName, path ),\n           track.ValueTypeName, track.getValueSize() );\n \n         ++ binding.referenceCount;\n         this._addInactiveBinding( binding, rootUuid, trackName );\n \n         bindings[ i ] = binding;\n \n       }\n \n       interpolants[ i ].resultBuffer = binding.buffer;\n \n     }\n \n   }\n \n   _activateAction( action ) {\n \n     if ( ! this._isActiveAction( action ) ) {\n \n       if ( action._cacheIndex === null ) {\n \n         // this action has been forgotten by the cache, but the user\n         // appears to be still using it -> rebind\n \n         const rootUuid = ( action._localRoot || this._root ).uuid,\n           clipUuid = action._clip.uuid,\n           actionsForClip = this._actionsByClip[ clipUuid ];\n \n         this._bindAction( action,\n           actionsForClip && actionsForClip.knownActions[ 0 ] );\n \n         this._addInactiveAction( action, clipUuid, rootUuid );\n \n       }\n \n       const bindings = action._propertyBindings;\n \n       // increment reference counts / sort out state\n       for ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n \n         const binding = bindings[ i ];\n \n         if ( binding.useCount ++ === 0 ) {\n \n           this._lendBinding( binding );\n           binding.saveOriginalState();\n \n         }\n \n       }\n \n       this._lendAction( action );\n \n     }\n \n   }\n \n   _deactivateAction( action ) {\n \n     if ( this._isActiveAction( action ) ) {\n \n       const bindings = action._propertyBindings;\n \n       // decrement reference counts / sort out state\n       for ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n \n         const binding = bindings[ i ];\n \n         if ( -- binding.useCount === 0 ) {\n \n           binding.restoreOriginalState();\n           this._takeBackBinding( binding );\n \n         }\n \n       }\n \n       this._takeBackAction( action );\n \n     }\n \n   }\n \n   // Memory manager\n \n   _initMemoryManager() {\n \n     this._actions = []; // 'nActiveActions' followed by inactive ones\n     this._nActiveActions = 0;\n \n     this._actionsByClip = {};\n     // inside:\n     // {\n     // \tknownActions: Array< AnimationAction > - used as prototypes\n     // \tactionByRoot: AnimationAction - lookup\n     // }\n \n \n     this._bindings = []; // 'nActiveBindings' followed by inactive ones\n     this._nActiveBindings = 0;\n \n     this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n \n \n     this._controlInterpolants = []; // same game as above\n     this._nActiveControlInterpolants = 0;\n \n     const scope = this;\n \n     this.stats = {\n \n       actions: {\n         get total() {\n \n           return scope._actions.length;\n \n         },\n         get inUse() {\n \n           return scope._nActiveActions;\n \n         }\n       },\n       bindings: {\n         get total() {\n \n           return scope._bindings.length;\n \n         },\n         get inUse() {\n \n           return scope._nActiveBindings;\n \n         }\n       },\n       controlInterpolants: {\n         get total() {\n \n           return scope._controlInterpolants.length;\n \n         },\n         get inUse() {\n \n           return scope._nActiveControlInterpolants;\n \n         }\n       }\n \n     };\n \n   }\n \n   // Memory management for AnimationAction objects\n \n   _isActiveAction( action ) {\n \n     const index = action._cacheIndex;\n     return index !== null && index < this._nActiveActions;\n \n   }\n \n   _addInactiveAction( action, clipUuid, rootUuid ) {\n \n     const actions = this._actions,\n       actionsByClip = this._actionsByClip;\n \n     let actionsForClip = actionsByClip[ clipUuid ];\n \n     if ( actionsForClip === undefined ) {\n \n       actionsForClip = {\n \n         knownActions: [ action ],\n         actionByRoot: {}\n \n       };\n \n       action._byClipCacheIndex = 0;\n \n       actionsByClip[ clipUuid ] = actionsForClip;\n \n     } else {\n \n       const knownActions = actionsForClip.knownActions;\n \n       action._byClipCacheIndex = knownActions.length;\n       knownActions.push( action );\n \n     }\n \n     action._cacheIndex = actions.length;\n     actions.push( action );\n \n     actionsForClip.actionByRoot[ rootUuid ] = action;\n \n   }\n \n   _removeInactiveAction( action ) {\n \n     const actions = this._actions,\n       lastInactiveAction = actions[ actions.length - 1 ],\n       cacheIndex = action._cacheIndex;\n \n     lastInactiveAction._cacheIndex = cacheIndex;\n     actions[ cacheIndex ] = lastInactiveAction;\n     actions.pop();\n \n     action._cacheIndex = null;\n \n \n     const clipUuid = action._clip.uuid,\n       actionsByClip = this._actionsByClip,\n       actionsForClip = actionsByClip[ clipUuid ],\n       knownActionsForClip = actionsForClip.knownActions,\n \n       lastKnownAction =\n         knownActionsForClip[ knownActionsForClip.length - 1 ],\n \n       byClipCacheIndex = action._byClipCacheIndex;\n \n     lastKnownAction._byClipCacheIndex = byClipCacheIndex;\n     knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n     knownActionsForClip.pop();\n \n     action._byClipCacheIndex = null;\n \n \n     const actionByRoot = actionsForClip.actionByRoot,\n       rootUuid = ( action._localRoot || this._root ).uuid;\n \n     delete actionByRoot[ rootUuid ];\n \n     if ( knownActionsForClip.length === 0 ) {\n \n       delete actionsByClip[ clipUuid ];\n \n     }\n \n     this._removeInactiveBindingsForAction( action );\n \n   }\n \n   _removeInactiveBindingsForAction( action ) {\n \n     const bindings = action._propertyBindings;\n \n     for ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n \n       const binding = bindings[ i ];\n \n       if ( -- binding.referenceCount === 0 ) {\n \n         this._removeInactiveBinding( binding );\n \n       }\n \n     }\n \n   }\n \n   _lendAction( action ) {\n \n     // [ active actions |  inactive actions  ]\n     // [  active actions >| inactive actions ]\n     //                 s        a\n     //                  <-swap->\n     //                 a        s\n \n     const actions = this._actions,\n       prevIndex = action._cacheIndex,\n \n       lastActiveIndex = this._nActiveActions ++,\n \n       firstInactiveAction = actions[ lastActiveIndex ];\n \n     action._cacheIndex = lastActiveIndex;\n     actions[ lastActiveIndex ] = action;\n \n     firstInactiveAction._cacheIndex = prevIndex;\n     actions[ prevIndex ] = firstInactiveAction;\n \n   }\n \n   _takeBackAction( action ) {\n \n     // [  active actions  | inactive actions ]\n     // [ active actions |< inactive actions  ]\n     //        a        s\n     //         <-swap->\n     //        s        a\n \n     const actions = this._actions,\n       prevIndex = action._cacheIndex,\n \n       firstInactiveIndex = -- this._nActiveActions,\n \n       lastActiveAction = actions[ firstInactiveIndex ];\n \n     action._cacheIndex = firstInactiveIndex;\n     actions[ firstInactiveIndex ] = action;\n \n     lastActiveAction._cacheIndex = prevIndex;\n     actions[ prevIndex ] = lastActiveAction;\n \n   }\n \n   // Memory management for PropertyMixer objects\n \n   _addInactiveBinding( binding, rootUuid, trackName ) {\n \n     const bindingsByRoot = this._bindingsByRootAndName,\n       bindings = this._bindings;\n \n     let bindingByName = bindingsByRoot[ rootUuid ];\n \n     if ( bindingByName === undefined ) {\n \n       bindingByName = {};\n       bindingsByRoot[ rootUuid ] = bindingByName;\n \n     }\n \n     bindingByName[ trackName ] = binding;\n \n     binding._cacheIndex = bindings.length;\n     bindings.push( binding );\n \n   }\n \n   _removeInactiveBinding( binding ) {\n \n     const bindings = this._bindings,\n       propBinding = binding.binding,\n       rootUuid = propBinding.rootNode.uuid,\n       trackName = propBinding.path,\n       bindingsByRoot = this._bindingsByRootAndName,\n       bindingByName = bindingsByRoot[ rootUuid ],\n \n       lastInactiveBinding = bindings[ bindings.length - 1 ],\n       cacheIndex = binding._cacheIndex;\n \n     lastInactiveBinding._cacheIndex = cacheIndex;\n     bindings[ cacheIndex ] = lastInactiveBinding;\n     bindings.pop();\n \n     delete bindingByName[ trackName ];\n \n     if ( Object.keys( bindingByName ).length === 0 ) {\n \n       delete bindingsByRoot[ rootUuid ];\n \n     }\n \n   }\n \n   _lendBinding( binding ) {\n \n     const bindings = this._bindings,\n       prevIndex = binding._cacheIndex,\n \n       lastActiveIndex = this._nActiveBindings ++,\n \n       firstInactiveBinding = bindings[ lastActiveIndex ];\n \n     binding._cacheIndex = lastActiveIndex;\n     bindings[ lastActiveIndex ] = binding;\n \n     firstInactiveBinding._cacheIndex = prevIndex;\n     bindings[ prevIndex ] = firstInactiveBinding;\n \n   }\n \n   _takeBackBinding( binding ) {\n \n     const bindings = this._bindings,\n       prevIndex = binding._cacheIndex,\n \n       firstInactiveIndex = -- this._nActiveBindings,\n \n       lastActiveBinding = bindings[ firstInactiveIndex ];\n \n     binding._cacheIndex = firstInactiveIndex;\n     bindings[ firstInactiveIndex ] = binding;\n \n     lastActiveBinding._cacheIndex = prevIndex;\n     bindings[ prevIndex ] = lastActiveBinding;\n \n   }\n \n \n   // Memory management of Interpolants for weight and time scale\n \n   _lendControlInterpolant() {\n \n     const interpolants = this._controlInterpolants,\n       lastActiveIndex = this._nActiveControlInterpolants ++;\n \n     let interpolant = interpolants[ lastActiveIndex ];\n \n     if ( interpolant === undefined ) {\n \n       interpolant = new LinearInterpolant(\n         new Float32Array( 2 ), new Float32Array( 2 ),\n         1, this._controlInterpolantsResultBuffer );\n \n       interpolant.__cacheIndex = lastActiveIndex;\n       interpolants[ lastActiveIndex ] = interpolant;\n \n     }\n \n     return interpolant;\n \n   }\n \n   _takeBackControlInterpolant( interpolant ) {\n \n     const interpolants = this._controlInterpolants,\n       prevIndex = interpolant.__cacheIndex,\n \n       firstInactiveIndex = -- this._nActiveControlInterpolants,\n \n       lastActiveInterpolant = interpolants[ firstInactiveIndex ];\n \n     interpolant.__cacheIndex = firstInactiveIndex;\n     interpolants[ firstInactiveIndex ] = interpolant;\n \n     lastActiveInterpolant.__cacheIndex = prevIndex;\n     interpolants[ prevIndex ] = lastActiveInterpolant;\n \n   }\n \n   // return an action for a clip optionally using a custom root target\n   // object (this method allocates a lot of dynamic memory in case a\n   // previously unknown clip/root combination is specified)\n   clipAction( clip, optionalRoot, blendMode ) {\n \n     const root = optionalRoot || this._root,\n       rootUuid = root.uuid;\n \n     let clipObject = typeof clip === 'string' ? AnimationClip.findByName( root, clip ) : clip;\n \n     const clipUuid = clipObject !== null ? clipObject.uuid : clip;\n \n     const actionsForClip = this._actionsByClip[ clipUuid ];\n     let prototypeAction = null;\n \n     if ( blendMode === undefined ) {\n \n       if ( clipObject !== null ) {\n \n         blendMode = clipObject.blendMode;\n \n       } else {\n \n         blendMode = NormalAnimationBlendMode;\n \n       }\n \n     }\n \n     if ( actionsForClip !== undefined ) {\n \n       const existingAction = actionsForClip.actionByRoot[ rootUuid ];\n \n       if ( existingAction !== undefined && existingAction.blendMode === blendMode ) {\n \n         return existingAction;\n \n       }\n \n       // we know the clip, so we don't have to parse all\n       // the bindings again but can just copy\n       prototypeAction = actionsForClip.knownActions[ 0 ];\n \n       // also, take the clip from the prototype action\n       if ( clipObject === null )\n         clipObject = prototypeAction._clip;\n \n     }\n \n     // clip must be known when specified via string\n     if ( clipObject === null ) return null;\n \n     // allocate all resources required to run it\n     const newAction = new AnimationAction( this, clipObject, optionalRoot, blendMode );\n \n     this._bindAction( newAction, prototypeAction );\n \n     // and make the action known to the memory manager\n     this._addInactiveAction( newAction, clipUuid, rootUuid );\n \n     return newAction;\n \n   }\n \n   // get an existing action\n   existingAction( clip, optionalRoot ) {\n \n     const root = optionalRoot || this._root,\n       rootUuid = root.uuid,\n \n       clipObject = typeof clip === 'string' ?\n         AnimationClip.findByName( root, clip ) : clip,\n \n       clipUuid = clipObject ? clipObject.uuid : clip,\n \n       actionsForClip = this._actionsByClip[ clipUuid ];\n \n     if ( actionsForClip !== undefined ) {\n \n       return actionsForClip.actionByRoot[ rootUuid ] || null;\n \n     }\n \n     return null;\n \n   }\n \n   // deactivates all previously scheduled actions\n   stopAllAction() {\n \n     const actions = this._actions,\n       nActions = this._nActiveActions;\n \n     for ( let i = nActions - 1; i >= 0; -- i ) {\n \n       actions[ i ].stop();\n \n     }\n \n     return this;\n \n   }\n \n   // advance the time and update apply the animation\n   update( deltaTime ) {\n \n     deltaTime *= this.timeScale;\n \n     const actions = this._actions,\n       nActions = this._nActiveActions,\n \n       time = this.time += deltaTime,\n       timeDirection = Math.sign( deltaTime ),\n \n       accuIndex = this._accuIndex ^= 1;\n \n     // run active actions\n \n     for ( let i = 0; i !== nActions; ++ i ) {\n \n       const action = actions[ i ];\n \n       action._update( time, deltaTime, timeDirection, accuIndex );\n \n     }\n \n     // update scene graph\n \n     const bindings = this._bindings,\n       nBindings = this._nActiveBindings;\n \n     for ( let i = 0; i !== nBindings; ++ i ) {\n \n       bindings[ i ].apply( accuIndex );\n \n     }\n \n     return this;\n \n   }\n \n   // Allows you to seek to a specific time in an animation.\n   setTime( timeInSeconds ) {\n \n     this.time = 0; // Zero out time attribute for AnimationMixer object;\n     for ( let i = 0; i < this._actions.length; i ++ ) {\n \n       this._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n \n     }\n \n     return this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n \n   }\n \n   // return this mixer's root target object\n   getRoot() {\n \n     return this._root;\n \n   }\n \n   // free all resources specific to a particular clip\n   uncacheClip( clip ) {\n \n     const actions = this._actions,\n       clipUuid = clip.uuid,\n       actionsByClip = this._actionsByClip,\n       actionsForClip = actionsByClip[ clipUuid ];\n \n     if ( actionsForClip !== undefined ) {\n \n       // note: just calling _removeInactiveAction would mess up the\n       // iteration state and also require updating the state we can\n       // just throw away\n \n       const actionsToRemove = actionsForClip.knownActions;\n \n       for ( let i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n \n         const action = actionsToRemove[ i ];\n \n         this._deactivateAction( action );\n \n         const cacheIndex = action._cacheIndex,\n           lastInactiveAction = actions[ actions.length - 1 ];\n \n         action._cacheIndex = null;\n         action._byClipCacheIndex = null;\n \n         lastInactiveAction._cacheIndex = cacheIndex;\n         actions[ cacheIndex ] = lastInactiveAction;\n         actions.pop();\n \n         this._removeInactiveBindingsForAction( action );\n \n       }\n \n       delete actionsByClip[ clipUuid ];\n \n     }\n \n   }\n \n   // free all resources specific to a particular root target object\n   uncacheRoot( root ) {\n \n     const rootUuid = root.uuid,\n       actionsByClip = this._actionsByClip;\n \n     for ( const clipUuid in actionsByClip ) {\n \n       const actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n         action = actionByRoot[ rootUuid ];\n \n       if ( action !== undefined ) {\n \n         this._deactivateAction( action );\n         this._removeInactiveAction( action );\n \n       }\n \n     }\n \n     const bindingsByRoot = this._bindingsByRootAndName,\n       bindingByName = bindingsByRoot[ rootUuid ];\n \n     if ( bindingByName !== undefined ) {\n \n       for ( const trackName in bindingByName ) {\n \n         const binding = bindingByName[ trackName ];\n         binding.restoreOriginalState();\n         this._removeInactiveBinding( binding );\n \n       }\n \n     }\n \n   }\n \n   // remove a targeted clip from the cache\n   uncacheAction( clip, optionalRoot ) {\n \n     const action = this.existingAction( clip, optionalRoot );\n \n     if ( action !== null ) {\n \n       this._deactivateAction( action );\n       this._removeInactiveAction( action );\n \n     }\n \n   }\n \n }\n \n AnimationMixer.prototype._controlInterpolantsResultBuffer = new Float32Array( 1 );\n \n class Uniform {\n \n   constructor( value ) {\n \n     if ( typeof value === 'string' ) {\n \n       console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n       value = arguments[ 1 ];\n \n     }\n \n     this.value = value;\n \n   }\n \n   clone() {\n \n     return new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n \n   }\n \n }\n \n class InstancedInterleavedBuffer extends InterleavedBuffer {\n \n   constructor( array, stride, meshPerAttribute = 1 ) {\n \n     super( array, stride );\n \n     this.meshPerAttribute = meshPerAttribute;\n \n   }\n \n   copy( source ) {\n \n     super.copy( source );\n \n     this.meshPerAttribute = source.meshPerAttribute;\n \n     return this;\n \n   }\n \n   clone( data ) {\n \n     const ib = super.clone( data );\n \n     ib.meshPerAttribute = this.meshPerAttribute;\n \n     return ib;\n \n   }\n \n   toJSON( data ) {\n \n     const json = super.toJSON( data );\n \n     json.isInstancedInterleavedBuffer = true;\n     json.meshPerAttribute = this.meshPerAttribute;\n \n     return json;\n \n   }\n \n }\n \n InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\n \n class GLBufferAttribute {\n \n   constructor( buffer, type, itemSize, elementSize, count ) {\n \n     this.buffer = buffer;\n     this.type = type;\n     this.itemSize = itemSize;\n     this.elementSize = elementSize;\n     this.count = count;\n \n     this.version = 0;\n \n   }\n \n   set needsUpdate( value ) {\n \n     if ( value === true ) this.version ++;\n \n   }\n \n   setBuffer( buffer ) {\n \n     this.buffer = buffer;\n \n     return this;\n \n   }\n \n   setType( type, elementSize ) {\n \n     this.type = type;\n     this.elementSize = elementSize;\n \n     return this;\n \n   }\n \n   setItemSize( itemSize ) {\n \n     this.itemSize = itemSize;\n \n     return this;\n \n   }\n \n   setCount( count ) {\n \n     this.count = count;\n \n     return this;\n \n   }\n \n }\n \n GLBufferAttribute.prototype.isGLBufferAttribute = true;\n \n class Raycaster {\n \n   constructor( origin, direction, near = 0, far = Infinity ) {\n \n     this.ray = new Ray( origin, direction );\n     // direction is assumed to be normalized (for accurate distance calculations)\n \n     this.near = near;\n     this.far = far;\n     this.camera = null;\n     this.layers = new Layers();\n \n     this.params = {\n       Mesh: {},\n       Line: { threshold: 1 },\n       LOD: {},\n       Points: { threshold: 1 },\n       Sprite: {}\n     };\n \n   }\n \n   set( origin, direction ) {\n \n     // direction is assumed to be normalized (for accurate distance calculations)\n \n     this.ray.set( origin, direction );\n \n   }\n \n   setFromCamera( coords, camera ) {\n \n     if ( camera && camera.isPerspectiveCamera ) {\n \n       this.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n       this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n       this.camera = camera;\n \n     } else if ( camera && camera.isOrthographicCamera ) {\n \n       this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n       this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n       this.camera = camera;\n \n     } else {\n \n       console.error( 'THREE.Raycaster: Unsupported camera type: ' + camera.type );\n \n     }\n \n   }\n \n   intersectObject( object, recursive = true, intersects = [] ) {\n \n     intersectObject( object, this, intersects, recursive );\n \n     intersects.sort( ascSort );\n \n     return intersects;\n \n   }\n \n   intersectObjects( objects, recursive = true, intersects = [] ) {\n \n     for ( let i = 0, l = objects.length; i < l; i ++ ) {\n \n       intersectObject( objects[ i ], this, intersects, recursive );\n \n     }\n \n     intersects.sort( ascSort );\n \n     return intersects;\n \n   }\n \n }\n \n function ascSort( a, b ) {\n \n   return a.distance - b.distance;\n \n }\n \n function intersectObject( object, raycaster, intersects, recursive ) {\n \n   if ( object.layers.test( raycaster.layers ) ) {\n \n     object.raycast( raycaster, intersects );\n \n   }\n \n   if ( recursive === true ) {\n \n     const children = object.children;\n \n     for ( let i = 0, l = children.length; i < l; i ++ ) {\n \n       intersectObject( children[ i ], raycaster, intersects, true );\n \n     }\n \n   }\n \n }\n \n /**\n  * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n  *\n  * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n  * The azimuthal angle (theta) is measured from the positive z-axis.\n  */\n \n class Spherical {\n \n   constructor( radius = 1, phi = 0, theta = 0 ) {\n \n     this.radius = radius;\n     this.phi = phi; // polar angle\n     this.theta = theta; // azimuthal angle\n \n     return this;\n \n   }\n \n   set( radius, phi, theta ) {\n \n     this.radius = radius;\n     this.phi = phi;\n     this.theta = theta;\n \n     return this;\n \n   }\n \n   copy( other ) {\n \n     this.radius = other.radius;\n     this.phi = other.phi;\n     this.theta = other.theta;\n \n     return this;\n \n   }\n \n   // restrict phi to be betwee EPS and PI-EPS\n   makeSafe() {\n \n     const EPS = 0.000001;\n     this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n \n     return this;\n \n   }\n \n   setFromVector3( v ) {\n \n     return this.setFromCartesianCoords( v.x, v.y, v.z );\n \n   }\n \n   setFromCartesianCoords( x, y, z ) {\n \n     this.radius = Math.sqrt( x * x + y * y + z * z );\n \n     if ( this.radius === 0 ) {\n \n       this.theta = 0;\n       this.phi = 0;\n \n     } else {\n \n       this.theta = Math.atan2( x, z );\n       this.phi = Math.acos( clamp( y / this.radius, - 1, 1 ) );\n \n     }\n \n     return this;\n \n   }\n \n   clone() {\n \n     return new this.constructor().copy( this );\n \n   }\n \n }\n \n /**\n  * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n  */\n \n class Cylindrical {\n \n   constructor( radius = 1, theta = 0, y = 0 ) {\n \n     this.radius = radius; // distance from the origin to a point in the x-z plane\n     this.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n     this.y = y; // height above the x-z plane\n \n     return this;\n \n   }\n \n   set( radius, theta, y ) {\n \n     this.radius = radius;\n     this.theta = theta;\n     this.y = y;\n \n     return this;\n \n   }\n \n   copy( other ) {\n \n     this.radius = other.radius;\n     this.theta = other.theta;\n     this.y = other.y;\n \n     return this;\n \n   }\n \n   setFromVector3( v ) {\n \n     return this.setFromCartesianCoords( v.x, v.y, v.z );\n \n   }\n \n   setFromCartesianCoords( x, y, z ) {\n \n     this.radius = Math.sqrt( x * x + z * z );\n     this.theta = Math.atan2( x, z );\n     this.y = y;\n \n     return this;\n \n   }\n \n   clone() {\n \n     return new this.constructor().copy( this );\n \n   }\n \n }\n \n const _vector$4 = /*@__PURE__*/ new Vector2();\n \n class Box2 {\n \n   constructor( min = new Vector2( + Infinity, + Infinity ), max = new Vector2( - Infinity, - Infinity ) ) {\n \n     this.min = min;\n     this.max = max;\n \n   }\n \n   set( min, max ) {\n \n     this.min.copy( min );\n     this.max.copy( max );\n \n     return this;\n \n   }\n \n   setFromPoints( points ) {\n \n     this.makeEmpty();\n \n     for ( let i = 0, il = points.length; i < il; i ++ ) {\n \n       this.expandByPoint( points[ i ] );\n \n     }\n \n     return this;\n \n   }\n \n   setFromCenterAndSize( center, size ) {\n \n     const halfSize = _vector$4.copy( size ).multiplyScalar( 0.5 );\n     this.min.copy( center ).sub( halfSize );\n     this.max.copy( center ).add( halfSize );\n \n     return this;\n \n   }\n \n   clone() {\n \n     return new this.constructor().copy( this );\n \n   }\n \n   copy( box ) {\n \n     this.min.copy( box.min );\n     this.max.copy( box.max );\n \n     return this;\n \n   }\n \n   makeEmpty() {\n \n     this.min.x = this.min.y = + Infinity;\n     this.max.x = this.max.y = - Infinity;\n \n     return this;\n \n   }\n \n   isEmpty() {\n \n     // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n \n     return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n \n   }\n \n   getCenter( target ) {\n \n     return this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n \n   }\n \n   getSize( target ) {\n \n     return this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n \n   }\n \n   expandByPoint( point ) {\n \n     this.min.min( point );\n     this.max.max( point );\n \n     return this;\n \n   }\n \n   expandByVector( vector ) {\n \n     this.min.sub( vector );\n     this.max.add( vector );\n \n     return this;\n \n   }\n \n   expandByScalar( scalar ) {\n \n     this.min.addScalar( - scalar );\n     this.max.addScalar( scalar );\n \n     return this;\n \n   }\n \n   containsPoint( point ) {\n \n     return point.x < this.min.x || point.x > this.max.x ||\n       point.y < this.min.y || point.y > this.max.y ? false : true;\n \n   }\n \n   containsBox( box ) {\n \n     return this.min.x <= box.min.x && box.max.x <= this.max.x &&\n       this.min.y <= box.min.y && box.max.y <= this.max.y;\n \n   }\n \n   getParameter( point, target ) {\n \n     // This can potentially have a divide by zero if the box\n     // has a size dimension of 0.\n \n     return target.set(\n       ( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n       ( point.y - this.min.y ) / ( this.max.y - this.min.y )\n     );\n \n   }\n \n   intersectsBox( box ) {\n \n     // using 4 splitting planes to rule out intersections\n \n     return box.max.x < this.min.x || box.min.x > this.max.x ||\n       box.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n \n   }\n \n   clampPoint( point, target ) {\n \n     return target.copy( point ).clamp( this.min, this.max );\n \n   }\n \n   distanceToPoint( point ) {\n \n     const clampedPoint = _vector$4.copy( point ).clamp( this.min, this.max );\n     return clampedPoint.sub( point ).length();\n \n   }\n \n   intersect( box ) {\n \n     this.min.max( box.min );\n     this.max.min( box.max );\n \n     return this;\n \n   }\n \n   union( box ) {\n \n     this.min.min( box.min );\n     this.max.max( box.max );\n \n     return this;\n \n   }\n \n   translate( offset ) {\n \n     this.min.add( offset );\n     this.max.add( offset );\n \n     return this;\n \n   }\n \n   equals( box ) {\n \n     return box.min.equals( this.min ) && box.max.equals( this.max );\n \n   }\n \n }\n \n Box2.prototype.isBox2 = true;\n \n const _startP = /*@__PURE__*/ new Vector3();\n const _startEnd = /*@__PURE__*/ new Vector3();\n \n class Line3 {\n \n   constructor( start = new Vector3(), end = new Vector3() ) {\n \n     this.start = start;\n     this.end = end;\n \n   }\n \n   set( start, end ) {\n \n     this.start.copy( start );\n     this.end.copy( end );\n \n     return this;\n \n   }\n \n   copy( line ) {\n \n     this.start.copy( line.start );\n     this.end.copy( line.end );\n \n     return this;\n \n   }\n \n   getCenter( target ) {\n \n     return target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n \n   }\n \n   delta( target ) {\n \n     return target.subVectors( this.end, this.start );\n \n   }\n \n   distanceSq() {\n \n     return this.start.distanceToSquared( this.end );\n \n   }\n \n   distance() {\n \n     return this.start.distanceTo( this.end );\n \n   }\n \n   at( t, target ) {\n \n     return this.delta( target ).multiplyScalar( t ).add( this.start );\n \n   }\n \n   closestPointToPointParameter( point, clampToLine ) {\n \n     _startP.subVectors( point, this.start );\n     _startEnd.subVectors( this.end, this.start );\n \n     const startEnd2 = _startEnd.dot( _startEnd );\n     const startEnd_startP = _startEnd.dot( _startP );\n \n     let t = startEnd_startP / startEnd2;\n \n     if ( clampToLine ) {\n \n       t = clamp( t, 0, 1 );\n \n     }\n \n     return t;\n \n   }\n \n   closestPointToPoint( point, clampToLine, target ) {\n \n     const t = this.closestPointToPointParameter( point, clampToLine );\n \n     return this.delta( target ).multiplyScalar( t ).add( this.start );\n \n   }\n \n   applyMatrix4( matrix ) {\n \n     this.start.applyMatrix4( matrix );\n     this.end.applyMatrix4( matrix );\n \n     return this;\n \n   }\n \n   equals( line ) {\n \n     return line.start.equals( this.start ) && line.end.equals( this.end );\n \n   }\n \n   clone() {\n \n     return new this.constructor().copy( this );\n \n   }\n \n }\n \n const _vector$3 = /*@__PURE__*/ new Vector3();\n \n class SpotLightHelper extends Object3D {\n \n   constructor( light, color ) {\n \n     super();\n     this.light = light;\n     this.light.updateMatrixWorld();\n \n     this.matrix = light.matrixWorld;\n     this.matrixAutoUpdate = false;\n \n     this.color = color;\n \n     const geometry = new BufferGeometry();\n \n     const positions = [\n       0, 0, 0, \t0, 0, 1,\n       0, 0, 0, \t1, 0, 1,\n       0, 0, 0,\t- 1, 0, 1,\n       0, 0, 0, \t0, 1, 1,\n       0, 0, 0, \t0, - 1, 1\n     ];\n \n     for ( let i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n \n       const p1 = ( i / l ) * Math.PI * 2;\n       const p2 = ( j / l ) * Math.PI * 2;\n \n       positions.push(\n         Math.cos( p1 ), Math.sin( p1 ), 1,\n         Math.cos( p2 ), Math.sin( p2 ), 1\n       );\n \n     }\n \n     geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n \n     const material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n \n     this.cone = new LineSegments( geometry, material );\n     this.add( this.cone );\n \n     this.update();\n \n   }\n \n   dispose() {\n \n     this.cone.geometry.dispose();\n     this.cone.material.dispose();\n \n   }\n \n   update() {\n \n     this.light.updateMatrixWorld();\n \n     const coneLength = this.light.distance ? this.light.distance : 1000;\n     const coneWidth = coneLength * Math.tan( this.light.angle );\n \n     this.cone.scale.set( coneWidth, coneWidth, coneLength );\n \n     _vector$3.setFromMatrixPosition( this.light.target.matrixWorld );\n \n     this.cone.lookAt( _vector$3 );\n \n     if ( this.color !== undefined ) {\n \n       this.cone.material.color.set( this.color );\n \n     } else {\n \n       this.cone.material.color.copy( this.light.color );\n \n     }\n \n   }\n \n }\n \n const _vector$2 = /*@__PURE__*/ new Vector3();\n const _boneMatrix = /*@__PURE__*/ new Matrix4();\n const _matrixWorldInv = /*@__PURE__*/ new Matrix4();\n \n \n class SkeletonHelper extends LineSegments {\n \n   constructor( object ) {\n \n     const bones = getBoneList( object );\n \n     const geometry = new BufferGeometry();\n \n     const vertices = [];\n     const colors = [];\n \n     const color1 = new Color( 0, 0, 1 );\n     const color2 = new Color( 0, 1, 0 );\n \n     for ( let i = 0; i < bones.length; i ++ ) {\n \n       const bone = bones[ i ];\n \n       if ( bone.parent && bone.parent.isBone ) {\n \n         vertices.push( 0, 0, 0 );\n         vertices.push( 0, 0, 0 );\n         colors.push( color1.r, color1.g, color1.b );\n         colors.push( color2.r, color2.g, color2.b );\n \n       }\n \n     }\n \n     geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n     geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n \n     const material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );\n \n     super( geometry, material );\n \n     this.type = 'SkeletonHelper';\n     this.isSkeletonHelper = true;\n \n     this.root = object;\n     this.bones = bones;\n \n     this.matrix = object.matrixWorld;\n     this.matrixAutoUpdate = false;\n \n   }\n \n   updateMatrixWorld( force ) {\n \n     const bones = this.bones;\n \n     const geometry = this.geometry;\n     const position = geometry.getAttribute( 'position' );\n \n     _matrixWorldInv.copy( this.root.matrixWorld ).invert();\n \n     for ( let i = 0, j = 0; i < bones.length; i ++ ) {\n \n       const bone = bones[ i ];\n \n       if ( bone.parent && bone.parent.isBone ) {\n \n         _boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n         _vector$2.setFromMatrixPosition( _boneMatrix );\n         position.setXYZ( j, _vector$2.x, _vector$2.y, _vector$2.z );\n \n         _boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n         _vector$2.setFromMatrixPosition( _boneMatrix );\n         position.setXYZ( j + 1, _vector$2.x, _vector$2.y, _vector$2.z );\n \n         j += 2;\n \n       }\n \n     }\n \n     geometry.getAttribute( 'position' ).needsUpdate = true;\n \n     super.updateMatrixWorld( force );\n \n   }\n \n }\n \n \n function getBoneList( object ) {\n \n   const boneList = [];\n \n   if ( object && object.isBone ) {\n \n     boneList.push( object );\n \n   }\n \n   for ( let i = 0; i < object.children.length; i ++ ) {\n \n     boneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n \n   }\n \n   return boneList;\n \n }\n \n class PointLightHelper extends Mesh {\n \n   constructor( light, sphereSize, color ) {\n \n     const geometry = new SphereGeometry( sphereSize, 4, 2 );\n     const material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n \n     super( geometry, material );\n \n     this.light = light;\n     this.light.updateMatrixWorld();\n \n     this.color = color;\n \n     this.type = 'PointLightHelper';\n \n     this.matrix = this.light.matrixWorld;\n     this.matrixAutoUpdate = false;\n \n     this.update();\n \n \n     /*\n   // TODO: delete this comment?\n   const distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n   const distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n \n   this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n   this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n \n   const d = light.distance;\n \n   if ( d === 0.0 ) {\n \n     this.lightDistance.visible = false;\n \n   } else {\n \n     this.lightDistance.scale.set( d, d, d );\n \n   }\n \n   this.add( this.lightDistance );\n   */\n \n   }\n \n   dispose() {\n \n     this.geometry.dispose();\n     this.material.dispose();\n \n   }\n \n   update() {\n \n     if ( this.color !== undefined ) {\n \n       this.material.color.set( this.color );\n \n     } else {\n \n       this.material.color.copy( this.light.color );\n \n     }\n \n     /*\n     const d = this.light.distance;\n \n     if ( d === 0.0 ) {\n \n       this.lightDistance.visible = false;\n \n     } else {\n \n       this.lightDistance.visible = true;\n       this.lightDistance.scale.set( d, d, d );\n \n     }\n     */\n \n   }\n \n }\n \n const _vector$1 = /*@__PURE__*/ new Vector3();\n const _color1 = /*@__PURE__*/ new Color();\n const _color2 = /*@__PURE__*/ new Color();\n \n class HemisphereLightHelper extends Object3D {\n \n   constructor( light, size, color ) {\n \n     super();\n     this.light = light;\n     this.light.updateMatrixWorld();\n \n     this.matrix = light.matrixWorld;\n     this.matrixAutoUpdate = false;\n \n     this.color = color;\n \n     const geometry = new OctahedronGeometry( size );\n     geometry.rotateY( Math.PI * 0.5 );\n \n     this.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n     if ( this.color === undefined ) this.material.vertexColors = true;\n \n     const position = geometry.getAttribute( 'position' );\n     const colors = new Float32Array( position.count * 3 );\n \n     geometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n \n     this.add( new Mesh( geometry, this.material ) );\n \n     this.update();\n \n   }\n \n   dispose() {\n \n     this.children[ 0 ].geometry.dispose();\n     this.children[ 0 ].material.dispose();\n \n   }\n \n   update() {\n \n     const mesh = this.children[ 0 ];\n \n     if ( this.color !== undefined ) {\n \n       this.material.color.set( this.color );\n \n     } else {\n \n       const colors = mesh.geometry.getAttribute( 'color' );\n \n       _color1.copy( this.light.color );\n       _color2.copy( this.light.groundColor );\n \n       for ( let i = 0, l = colors.count; i < l; i ++ ) {\n \n         const color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n \n         colors.setXYZ( i, color.r, color.g, color.b );\n \n       }\n \n       colors.needsUpdate = true;\n \n     }\n \n     mesh.lookAt( _vector$1.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n \n   }\n \n }\n \n class GridHelper extends LineSegments {\n \n   constructor( size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888 ) {\n \n     color1 = new Color( color1 );\n     color2 = new Color( color2 );\n \n     const center = divisions / 2;\n     const step = size / divisions;\n     const halfSize = size / 2;\n \n     const vertices = [], colors = [];\n \n     for ( let i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n \n       vertices.push( - halfSize, 0, k, halfSize, 0, k );\n       vertices.push( k, 0, - halfSize, k, 0, halfSize );\n \n       const color = i === center ? color1 : color2;\n \n       color.toArray( colors, j ); j += 3;\n       color.toArray( colors, j ); j += 3;\n       color.toArray( colors, j ); j += 3;\n       color.toArray( colors, j ); j += 3;\n \n     }\n \n     const geometry = new BufferGeometry();\n     geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n     geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n \n     const material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n \n     super( geometry, material );\n \n     this.type = 'GridHelper';\n \n   }\n \n }\n \n class PolarGridHelper extends LineSegments {\n \n   constructor( radius = 10, radials = 16, circles = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888 ) {\n \n     color1 = new Color( color1 );\n     color2 = new Color( color2 );\n \n     const vertices = [];\n     const colors = [];\n \n     // create the radials\n \n     for ( let i = 0; i <= radials; i ++ ) {\n \n       const v = ( i / radials ) * ( Math.PI * 2 );\n \n       const x = Math.sin( v ) * radius;\n       const z = Math.cos( v ) * radius;\n \n       vertices.push( 0, 0, 0 );\n       vertices.push( x, 0, z );\n \n       const color = ( i & 1 ) ? color1 : color2;\n \n       colors.push( color.r, color.g, color.b );\n       colors.push( color.r, color.g, color.b );\n \n     }\n \n     // create the circles\n \n     for ( let i = 0; i <= circles; i ++ ) {\n \n       const color = ( i & 1 ) ? color1 : color2;\n \n       const r = radius - ( radius / circles * i );\n \n       for ( let j = 0; j < divisions; j ++ ) {\n \n         // first vertex\n \n         let v = ( j / divisions ) * ( Math.PI * 2 );\n \n         let x = Math.sin( v ) * r;\n         let z = Math.cos( v ) * r;\n \n         vertices.push( x, 0, z );\n         colors.push( color.r, color.g, color.b );\n \n         // second vertex\n \n         v = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n \n         x = Math.sin( v ) * r;\n         z = Math.cos( v ) * r;\n \n         vertices.push( x, 0, z );\n         colors.push( color.r, color.g, color.b );\n \n       }\n \n     }\n \n     const geometry = new BufferGeometry();\n     geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n     geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n \n     const material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n \n     super( geometry, material );\n \n     this.type = 'PolarGridHelper';\n \n   }\n \n }\n \n const _v1 = /*@__PURE__*/ new Vector3();\n const _v2 = /*@__PURE__*/ new Vector3();\n const _v3 = /*@__PURE__*/ new Vector3();\n \n class DirectionalLightHelper extends Object3D {\n \n   constructor( light, size, color ) {\n \n     super();\n     this.light = light;\n     this.light.updateMatrixWorld();\n \n     this.matrix = light.matrixWorld;\n     this.matrixAutoUpdate = false;\n \n     this.color = color;\n \n     if ( size === undefined ) size = 1;\n \n     let geometry = new BufferGeometry();\n     geometry.setAttribute( 'position', new Float32BufferAttribute( [\n       - size, size, 0,\n       size, size, 0,\n       size, - size, 0,\n       - size, - size, 0,\n       - size, size, 0\n     ], 3 ) );\n \n     const material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n \n     this.lightPlane = new Line( geometry, material );\n     this.add( this.lightPlane );\n \n     geometry = new BufferGeometry();\n     geometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n \n     this.targetLine = new Line( geometry, material );\n     this.add( this.targetLine );\n \n     this.update();\n \n   }\n \n   dispose() {\n \n     this.lightPlane.geometry.dispose();\n     this.lightPlane.material.dispose();\n     this.targetLine.geometry.dispose();\n     this.targetLine.material.dispose();\n \n   }\n \n   update() {\n \n     _v1.setFromMatrixPosition( this.light.matrixWorld );\n     _v2.setFromMatrixPosition( this.light.target.matrixWorld );\n     _v3.subVectors( _v2, _v1 );\n \n     this.lightPlane.lookAt( _v2 );\n \n     if ( this.color !== undefined ) {\n \n       this.lightPlane.material.color.set( this.color );\n       this.targetLine.material.color.set( this.color );\n \n     } else {\n \n       this.lightPlane.material.color.copy( this.light.color );\n       this.targetLine.material.color.copy( this.light.color );\n \n     }\n \n     this.targetLine.lookAt( _v2 );\n     this.targetLine.scale.z = _v3.length();\n \n   }\n \n }\n \n const _vector = /*@__PURE__*/ new Vector3();\n const _camera = /*@__PURE__*/ new Camera();\n \n /**\n  *\t- shows frustum, line of sight and up of the camera\n  *\t- suitable for fast updates\n  * \t- based on frustum visualization in lightgl.js shadowmap example\n  *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n  */\n \n class CameraHelper extends LineSegments {\n \n   constructor( camera ) {\n \n     const geometry = new BufferGeometry();\n     const material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );\n \n     const vertices = [];\n     const colors = [];\n \n     const pointMap = {};\n \n     // colors\n \n     const colorFrustum = new Color( 0xffaa00 );\n     const colorCone = new Color( 0xff0000 );\n     const colorUp = new Color( 0x00aaff );\n     const colorTarget = new Color( 0xffffff );\n     const colorCross = new Color( 0x333333 );\n \n     // near\n \n     addLine( 'n1', 'n2', colorFrustum );\n     addLine( 'n2', 'n4', colorFrustum );\n     addLine( 'n4', 'n3', colorFrustum );\n     addLine( 'n3', 'n1', colorFrustum );\n \n     // far\n \n     addLine( 'f1', 'f2', colorFrustum );\n     addLine( 'f2', 'f4', colorFrustum );\n     addLine( 'f4', 'f3', colorFrustum );\n     addLine( 'f3', 'f1', colorFrustum );\n \n     // sides\n \n     addLine( 'n1', 'f1', colorFrustum );\n     addLine( 'n2', 'f2', colorFrustum );\n     addLine( 'n3', 'f3', colorFrustum );\n     addLine( 'n4', 'f4', colorFrustum );\n \n     // cone\n \n     addLine( 'p', 'n1', colorCone );\n     addLine( 'p', 'n2', colorCone );\n     addLine( 'p', 'n3', colorCone );\n     addLine( 'p', 'n4', colorCone );\n \n     // up\n \n     addLine( 'u1', 'u2', colorUp );\n     addLine( 'u2', 'u3', colorUp );\n     addLine( 'u3', 'u1', colorUp );\n \n     // target\n \n     addLine( 'c', 't', colorTarget );\n     addLine( 'p', 'c', colorCross );\n \n     // cross\n \n     addLine( 'cn1', 'cn2', colorCross );\n     addLine( 'cn3', 'cn4', colorCross );\n \n     addLine( 'cf1', 'cf2', colorCross );\n     addLine( 'cf3', 'cf4', colorCross );\n \n     function addLine( a, b, color ) {\n \n       addPoint( a, color );\n       addPoint( b, color );\n \n     }\n \n     function addPoint( id, color ) {\n \n       vertices.push( 0, 0, 0 );\n       colors.push( color.r, color.g, color.b );\n \n       if ( pointMap[ id ] === undefined ) {\n \n         pointMap[ id ] = [];\n \n       }\n \n       pointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n \n     }\n \n     geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n     geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n \n     super( geometry, material );\n \n     this.type = 'CameraHelper';\n \n     this.camera = camera;\n     if ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n \n     this.matrix = camera.matrixWorld;\n     this.matrixAutoUpdate = false;\n \n     this.pointMap = pointMap;\n \n     this.update();\n \n   }\n \n   update() {\n \n     const geometry = this.geometry;\n     const pointMap = this.pointMap;\n \n     const w = 1, h = 1;\n \n     // we need just camera projection matrix inverse\n     // world matrix must be identity\n \n     _camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\n \n     // center / target\n \n     setPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\n     setPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\n \n     // near\n \n     setPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\n     setPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\n     setPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\n     setPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\n \n     // far\n \n     setPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\n     setPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\n     setPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\n     setPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\n \n     // up\n \n     setPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\n     setPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\n     setPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\n \n     // cross\n \n     setPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\n     setPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\n     setPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\n     setPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\n \n     setPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\n     setPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\n     setPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\n     setPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\n \n     geometry.getAttribute( 'position' ).needsUpdate = true;\n \n   }\n \n   dispose() {\n \n     this.geometry.dispose();\n     this.material.dispose();\n \n   }\n \n }\n \n \n function setPoint( point, pointMap, geometry, camera, x, y, z ) {\n \n   _vector.set( x, y, z ).unproject( camera );\n \n   const points = pointMap[ point ];\n \n   if ( points !== undefined ) {\n \n     const position = geometry.getAttribute( 'position' );\n \n     for ( let i = 0, l = points.length; i < l; i ++ ) {\n \n       position.setXYZ( points[ i ], _vector.x, _vector.y, _vector.z );\n \n     }\n \n   }\n \n }\n \n const _box = /*@__PURE__*/ new Box3();\n \n class BoxHelper extends LineSegments {\n \n   constructor( object, color = 0xffff00 ) {\n \n     const indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n     const positions = new Float32Array( 8 * 3 );\n \n     const geometry = new BufferGeometry();\n     geometry.setIndex( new BufferAttribute( indices, 1 ) );\n     geometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n \n     super( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n \n     this.object = object;\n     this.type = 'BoxHelper';\n \n     this.matrixAutoUpdate = false;\n \n     this.update();\n \n   }\n \n   update( object ) {\n \n     if ( object !== undefined ) {\n \n       console.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n \n     }\n \n     if ( this.object !== undefined ) {\n \n       _box.setFromObject( this.object );\n \n     }\n \n     if ( _box.isEmpty() ) return;\n \n     const min = _box.min;\n     const max = _box.max;\n \n     /*\n       5____4\n     1/___0/|\n     | 6__|_7\n     2/___3/\n \n     0: max.x, max.y, max.z\n     1: min.x, max.y, max.z\n     2: min.x, min.y, max.z\n     3: max.x, min.y, max.z\n     4: max.x, max.y, min.z\n     5: min.x, max.y, min.z\n     6: min.x, min.y, min.z\n     7: max.x, min.y, min.z\n     */\n \n     const position = this.geometry.attributes.position;\n     const array = position.array;\n \n     array[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n     array[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n     array[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n     array[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n     array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n     array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n     array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n     array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n \n     position.needsUpdate = true;\n \n     this.geometry.computeBoundingSphere();\n \n \n   }\n \n   setFromObject( object ) {\n \n     this.object = object;\n     this.update();\n \n     return this;\n \n   }\n \n   copy( source ) {\n \n     LineSegments.prototype.copy.call( this, source );\n \n     this.object = source.object;\n \n     return this;\n \n   }\n \n }\n \n class Box3Helper extends LineSegments {\n \n   constructor( box, color = 0xffff00 ) {\n \n     const indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n \n     const positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n \n     const geometry = new BufferGeometry();\n \n     geometry.setIndex( new BufferAttribute( indices, 1 ) );\n \n     geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n \n     super( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n \n     this.box = box;\n \n     this.type = 'Box3Helper';\n \n     this.geometry.computeBoundingSphere();\n \n   }\n \n   updateMatrixWorld( force ) {\n \n     const box = this.box;\n \n     if ( box.isEmpty() ) return;\n \n     box.getCenter( this.position );\n \n     box.getSize( this.scale );\n \n     this.scale.multiplyScalar( 0.5 );\n \n     super.updateMatrixWorld( force );\n \n   }\n \n }\n \n class PlaneHelper extends Line {\n \n   constructor( plane, size = 1, hex = 0xffff00 ) {\n \n     const color = hex;\n \n     const positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\n \n     const geometry = new BufferGeometry();\n     geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n     geometry.computeBoundingSphere();\n \n     super( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n \n     this.type = 'PlaneHelper';\n \n     this.plane = plane;\n \n     this.size = size;\n \n     const positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\n \n     const geometry2 = new BufferGeometry();\n     geometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n     geometry2.computeBoundingSphere();\n \n     this.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );\n \n   }\n \n   updateMatrixWorld( force ) {\n \n     let scale = - this.plane.constant;\n \n     if ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter\n \n     this.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\n \n     this.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n \n     this.lookAt( this.plane.normal );\n \n     super.updateMatrixWorld( force );\n \n   }\n \n }\n \n const _axis = /*@__PURE__*/ new Vector3();\n let _lineGeometry, _coneGeometry;\n \n class ArrowHelper extends Object3D {\n \n   // dir is assumed to be normalized\n \n   constructor( dir = new Vector3( 0, 0, 1 ), origin = new Vector3( 0, 0, 0 ), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\n \n     super();\n \n     this.type = 'ArrowHelper';\n \n     if ( _lineGeometry === undefined ) {\n \n       _lineGeometry = new BufferGeometry();\n       _lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n \n       _coneGeometry = new CylinderGeometry( 0, 0.5, 1, 5, 1 );\n       _coneGeometry.translate( 0, - 0.5, 0 );\n \n     }\n \n     this.position.copy( origin );\n \n     this.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n     this.line.matrixAutoUpdate = false;\n     this.add( this.line );\n \n     this.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );\n     this.cone.matrixAutoUpdate = false;\n     this.add( this.cone );\n \n     this.setDirection( dir );\n     this.setLength( length, headLength, headWidth );\n \n   }\n \n   setDirection( dir ) {\n \n     // dir is assumed to be normalized\n \n     if ( dir.y > 0.99999 ) {\n \n       this.quaternion.set( 0, 0, 0, 1 );\n \n     } else if ( dir.y < - 0.99999 ) {\n \n       this.quaternion.set( 1, 0, 0, 0 );\n \n     } else {\n \n       _axis.set( dir.z, 0, - dir.x ).normalize();\n \n       const radians = Math.acos( dir.y );\n \n       this.quaternion.setFromAxisAngle( _axis, radians );\n \n     }\n \n   }\n \n   setLength( length, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\n \n     this.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n     this.line.updateMatrix();\n \n     this.cone.scale.set( headWidth, headLength, headWidth );\n     this.cone.position.y = length;\n     this.cone.updateMatrix();\n \n   }\n \n   setColor( color ) {\n \n     this.line.material.color.set( color );\n     this.cone.material.color.set( color );\n \n   }\n \n   copy( source ) {\n \n     super.copy( source, false );\n \n     this.line.copy( source.line );\n     this.cone.copy( source.cone );\n \n     return this;\n \n   }\n \n }\n \n class AxesHelper extends LineSegments {\n \n   constructor( size = 1 ) {\n \n     const vertices = [\n       0, 0, 0,\tsize, 0, 0,\n       0, 0, 0,\t0, size, 0,\n       0, 0, 0,\t0, 0, size\n     ];\n \n     const colors = [\n       1, 0, 0,\t1, 0.6, 0,\n       0, 1, 0,\t0.6, 1, 0,\n       0, 0, 1,\t0, 0.6, 1\n     ];\n \n     const geometry = new BufferGeometry();\n     geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n     geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n \n     const material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n \n     super( geometry, material );\n \n     this.type = 'AxesHelper';\n \n   }\n \n   setColors( xAxisColor, yAxisColor, zAxisColor ) {\n \n     const color = new Color();\n     const array = this.geometry.attributes.color.array;\n \n     color.set( xAxisColor );\n     color.toArray( array, 0 );\n     color.toArray( array, 3 );\n \n     color.set( yAxisColor );\n     color.toArray( array, 6 );\n     color.toArray( array, 9 );\n \n     color.set( zAxisColor );\n     color.toArray( array, 12 );\n     color.toArray( array, 15 );\n \n     this.geometry.attributes.color.needsUpdate = true;\n \n     return this;\n \n   }\n \n   dispose() {\n \n     this.geometry.dispose();\n     this.material.dispose();\n \n   }\n \n }\n \n class ShapePath {\n \n   constructor() {\n \n     this.type = 'ShapePath';\n \n     this.color = new Color();\n \n     this.subPaths = [];\n     this.currentPath = null;\n \n   }\n \n   moveTo( x, y ) {\n \n     this.currentPath = new Path();\n     this.subPaths.push( this.currentPath );\n     this.currentPath.moveTo( x, y );\n \n     return this;\n \n   }\n \n   lineTo( x, y ) {\n \n     this.currentPath.lineTo( x, y );\n \n     return this;\n \n   }\n \n   quadraticCurveTo( aCPx, aCPy, aX, aY ) {\n \n     this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n \n     return this;\n \n   }\n \n   bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n \n     this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n \n     return this;\n \n   }\n \n   splineThru( pts ) {\n \n     this.currentPath.splineThru( pts );\n \n     return this;\n \n   }\n \n   toShapes( isCCW, noHoles ) {\n \n     function toShapesNoHoles( inSubpaths ) {\n \n       const shapes = [];\n \n       for ( let i = 0, l = inSubpaths.length; i < l; i ++ ) {\n \n         const tmpPath = inSubpaths[ i ];\n \n         const tmpShape = new Shape();\n         tmpShape.curves = tmpPath.curves;\n \n         shapes.push( tmpShape );\n \n       }\n \n       return shapes;\n \n     }\n \n     function isPointInsidePolygon( inPt, inPolygon ) {\n \n       const polyLen = inPolygon.length;\n \n       // inPt on polygon contour => immediate success    or\n       // toggling of inside/outside at every single! intersection point of an edge\n       //  with the horizontal line through inPt, left of inPt\n       //  not counting lowerY endpoints of edges and whole edges on that line\n       let inside = false;\n       for ( let p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n \n         let edgeLowPt = inPolygon[ p ];\n         let edgeHighPt = inPolygon[ q ];\n \n         let edgeDx = edgeHighPt.x - edgeLowPt.x;\n         let edgeDy = edgeHighPt.y - edgeLowPt.y;\n \n         if ( Math.abs( edgeDy ) > Number.EPSILON ) {\n \n           // not parallel\n           if ( edgeDy < 0 ) {\n \n             edgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n             edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n \n           }\n \n           if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n \n           if ( inPt.y === edgeLowPt.y ) {\n \n             if ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n             // continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n \n           } else {\n \n             const perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n             if ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n             if ( perpEdge < 0 ) \t\t\t\tcontinue;\n             inside = ! inside;\t\t// true intersection left of inPt\n \n           }\n \n         } else {\n \n           // parallel or collinear\n           if ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n           // edge lies on the same horizontal line as inPt\n           if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n              ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n           // continue;\n \n         }\n \n       }\n \n       return\tinside;\n \n     }\n \n     const isClockWise = ShapeUtils.isClockWise;\n \n     const subPaths = this.subPaths;\n     if ( subPaths.length === 0 ) return [];\n \n     if ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n \n \n     let solid, tmpPath, tmpShape;\n     const shapes = [];\n \n     if ( subPaths.length === 1 ) {\n \n       tmpPath = subPaths[ 0 ];\n       tmpShape = new Shape();\n       tmpShape.curves = tmpPath.curves;\n       shapes.push( tmpShape );\n       return shapes;\n \n     }\n \n     let holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n     holesFirst = isCCW ? ! holesFirst : holesFirst;\n \n     // console.log(\"Holes first\", holesFirst);\n \n     const betterShapeHoles = [];\n     const newShapes = [];\n     let newShapeHoles = [];\n     let mainIdx = 0;\n     let tmpPoints;\n \n     newShapes[ mainIdx ] = undefined;\n     newShapeHoles[ mainIdx ] = [];\n \n     for ( let i = 0, l = subPaths.length; i < l; i ++ ) {\n \n       tmpPath = subPaths[ i ];\n       tmpPoints = tmpPath.getPoints();\n       solid = isClockWise( tmpPoints );\n       solid = isCCW ? ! solid : solid;\n \n       if ( solid ) {\n \n         if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n \n         newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n         newShapes[ mainIdx ].s.curves = tmpPath.curves;\n \n         if ( holesFirst )\tmainIdx ++;\n         newShapeHoles[ mainIdx ] = [];\n \n         //console.log('cw', i);\n \n       } else {\n \n         newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n \n         //console.log('ccw', i);\n \n       }\n \n     }\n \n     // only Holes? -> probably all Shapes with wrong orientation\n     if ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n \n \n     if ( newShapes.length > 1 ) {\n \n       let ambiguous = false;\n       const toChange = [];\n \n       for ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n \n         betterShapeHoles[ sIdx ] = [];\n \n       }\n \n       for ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n \n         const sho = newShapeHoles[ sIdx ];\n \n         for ( let hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n \n           const ho = sho[ hIdx ];\n           let hole_unassigned = true;\n \n           for ( let s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n \n             if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n \n               if ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n               if ( hole_unassigned ) {\n \n                 hole_unassigned = false;\n                 betterShapeHoles[ s2Idx ].push( ho );\n \n               } else {\n \n                 ambiguous = true;\n \n               }\n \n             }\n \n           }\n \n           if ( hole_unassigned ) {\n \n             betterShapeHoles[ sIdx ].push( ho );\n \n           }\n \n         }\n \n       }\n       // console.log(\"ambiguous: \", ambiguous);\n \n       if ( toChange.length > 0 ) {\n \n         // console.log(\"to change: \", toChange);\n         if ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n \n       }\n \n     }\n \n     let tmpHoles;\n \n     for ( let i = 0, il = newShapes.length; i < il; i ++ ) {\n \n       tmpShape = newShapes[ i ].s;\n       shapes.push( tmpShape );\n       tmpHoles = newShapeHoles[ i ];\n \n       for ( let j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n \n         tmpShape.holes.push( tmpHoles[ j ].h );\n \n       }\n \n     }\n \n     //console.log(\"shape\", shapes);\n \n     return shapes;\n \n   }\n \n }\n \n const _floatView = new Float32Array( 1 );\n const _int32View = new Int32Array( _floatView.buffer );\n \n class DataUtils {\n \n   // Converts float32 to float16 (stored as uint16 value).\n \n   static toHalfFloat( val ) {\n \n     if ( val > 65504 ) {\n \n       console.warn( 'THREE.DataUtils.toHalfFloat(): value exceeds 65504.' );\n \n       val = 65504; // maximum representable value in float16\n \n     }\n \n     // Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n \n     /* This method is faster than the OpenEXR implementation (very often\n     * used, eg. in Ogre), with the additional benefit of rounding, inspired\n     * by James Tursa?s half-precision code. */\n \n     _floatView[ 0 ] = val;\n     const x = _int32View[ 0 ];\n \n     let bits = ( x >> 16 ) & 0x8000; /* Get the sign */\n     let m = ( x >> 12 ) & 0x07ff; /* Keep one extra bit for rounding */\n     const e = ( x >> 23 ) & 0xff; /* Using int is faster here */\n \n     /* If zero, or denormal, or exponent underflows too much for a denormal\n       * half, return signed zero. */\n     if ( e < 103 ) return bits;\n \n     /* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n     if ( e > 142 ) {\n \n       bits |= 0x7c00;\n       /* If exponent was 0xff and one mantissa bit was set, it means NaN,\n             * not Inf, so make sure we set one mantissa bit too. */\n       bits |= ( ( e == 255 ) ? 0 : 1 ) && ( x & 0x007fffff );\n       return bits;\n \n     }\n \n     /* If exponent underflows but not too much, return a denormal */\n     if ( e < 113 ) {\n \n       m |= 0x0800;\n       /* Extra rounding may overflow and set mantissa to 0 and exponent\n         * to 1, which is OK. */\n       bits |= ( m >> ( 114 - e ) ) + ( ( m >> ( 113 - e ) ) & 1 );\n       return bits;\n \n     }\n \n     bits |= ( ( e - 112 ) << 10 ) | ( m >> 1 );\n     /* Extra rounding. An overflow will set mantissa to 0 and increment\n       * the exponent, which is OK. */\n     bits += m & 1;\n     return bits;\n \n   }\n \n }\n \n const LineStrip = 0;\n const LinePieces = 1;\n const NoColors = 0;\n const FaceColors = 1;\n const VertexColors = 2;\n \n function MeshFaceMaterial( materials ) {\n \n   console.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n   return materials;\n \n }\n \n function MultiMaterial( materials = [] ) {\n \n   console.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n   materials.isMultiMaterial = true;\n   materials.materials = materials;\n   materials.clone = function () {\n \n     return materials.slice();\n \n   };\n \n   return materials;\n \n }\n \n function PointCloud( geometry, material ) {\n \n   console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n   return new Points( geometry, material );\n \n }\n \n function Particle( material ) {\n \n   console.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n   return new Sprite( material );\n \n }\n \n function ParticleSystem( geometry, material ) {\n \n   console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n   return new Points( geometry, material );\n \n }\n \n function PointCloudMaterial( parameters ) {\n \n   console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n   return new PointsMaterial( parameters );\n \n }\n \n function ParticleBasicMaterial( parameters ) {\n \n   console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n   return new PointsMaterial( parameters );\n \n }\n \n function ParticleSystemMaterial( parameters ) {\n \n   console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n   return new PointsMaterial( parameters );\n \n }\n \n function Vertex( x, y, z ) {\n \n   console.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n   return new Vector3( x, y, z );\n \n }\n \n //\n \n function DynamicBufferAttribute( array, itemSize ) {\n \n   console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.' );\n   return new BufferAttribute( array, itemSize ).setUsage( DynamicDrawUsage );\n \n }\n \n function Int8Attribute( array, itemSize ) {\n \n   console.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n   return new Int8BufferAttribute( array, itemSize );\n \n }\n \n function Uint8Attribute( array, itemSize ) {\n \n   console.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n   return new Uint8BufferAttribute( array, itemSize );\n \n }\n \n function Uint8ClampedAttribute( array, itemSize ) {\n \n   console.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n   return new Uint8ClampedBufferAttribute( array, itemSize );\n \n }\n \n function Int16Attribute( array, itemSize ) {\n \n   console.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n   return new Int16BufferAttribute( array, itemSize );\n \n }\n \n function Uint16Attribute( array, itemSize ) {\n \n   console.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n   return new Uint16BufferAttribute( array, itemSize );\n \n }\n \n function Int32Attribute( array, itemSize ) {\n \n   console.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n   return new Int32BufferAttribute( array, itemSize );\n \n }\n \n function Uint32Attribute( array, itemSize ) {\n \n   console.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n   return new Uint32BufferAttribute( array, itemSize );\n \n }\n \n function Float32Attribute( array, itemSize ) {\n \n   console.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n   return new Float32BufferAttribute( array, itemSize );\n \n }\n \n function Float64Attribute( array, itemSize ) {\n \n   console.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n   return new Float64BufferAttribute( array, itemSize );\n \n }\n \n //\n \n Curve.create = function ( construct, getPoint ) {\n \n   console.log( 'THREE.Curve.create() has been deprecated' );\n \n   construct.prototype = Object.create( Curve.prototype );\n   construct.prototype.constructor = construct;\n   construct.prototype.getPoint = getPoint;\n \n   return construct;\n \n };\n \n //\n \n Path.prototype.fromPoints = function ( points ) {\n \n   console.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\n   return this.setFromPoints( points );\n \n };\n \n //\n \n function AxisHelper( size ) {\n \n   console.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\n   return new AxesHelper( size );\n \n }\n \n function BoundingBoxHelper( object, color ) {\n \n   console.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n   return new BoxHelper( object, color );\n \n }\n \n function EdgesHelper( object, hex ) {\n \n   console.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n   return new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n \n }\n \n GridHelper.prototype.setColors = function () {\n \n   console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n \n };\n \n SkeletonHelper.prototype.update = function () {\n \n   console.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n \n };\n \n function WireframeHelper( object, hex ) {\n \n   console.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n   return new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n \n }\n \n //\n \n Loader.prototype.extractUrlBase = function ( url ) {\n \n   console.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\n   return LoaderUtils.extractUrlBase( url );\n \n };\n \n Loader.Handlers = {\n \n   add: function ( /* regex, loader */ ) {\n \n     console.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );\n \n   },\n \n   get: function ( /* file */ ) {\n \n     console.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );\n \n   }\n \n };\n \n function XHRLoader( manager ) {\n \n   console.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n   return new FileLoader( manager );\n \n }\n \n function BinaryTextureLoader( manager ) {\n \n   console.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n   return new DataTextureLoader( manager );\n \n }\n \n //\n \n Box2.prototype.center = function ( optionalTarget ) {\n \n   console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n   return this.getCenter( optionalTarget );\n \n };\n \n Box2.prototype.empty = function () {\n \n   console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n   return this.isEmpty();\n \n };\n \n Box2.prototype.isIntersectionBox = function ( box ) {\n \n   console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n   return this.intersectsBox( box );\n \n };\n \n Box2.prototype.size = function ( optionalTarget ) {\n \n   console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n   return this.getSize( optionalTarget );\n \n };\n \n //\n \n Box3.prototype.center = function ( optionalTarget ) {\n \n   console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n   return this.getCenter( optionalTarget );\n \n };\n \n Box3.prototype.empty = function () {\n \n   console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n   return this.isEmpty();\n \n };\n \n Box3.prototype.isIntersectionBox = function ( box ) {\n \n   console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n   return this.intersectsBox( box );\n \n };\n \n Box3.prototype.isIntersectionSphere = function ( sphere ) {\n \n   console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n   return this.intersectsSphere( sphere );\n \n };\n \n Box3.prototype.size = function ( optionalTarget ) {\n \n   console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n   return this.getSize( optionalTarget );\n \n };\n \n //\n \n Sphere.prototype.empty = function () {\n \n   console.warn( 'THREE.Sphere: .empty() has been renamed to .isEmpty().' );\n   return this.isEmpty();\n \n };\n \n //\n \n Frustum.prototype.setFromMatrix = function ( m ) {\n \n   console.warn( 'THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().' );\n   return this.setFromProjectionMatrix( m );\n \n };\n \n //\n \n Line3.prototype.center = function ( optionalTarget ) {\n \n   console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n   return this.getCenter( optionalTarget );\n \n };\n \n //\n \n Matrix3.prototype.flattenToArrayOffset = function ( array, offset ) {\n \n   console.warn( 'THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.' );\n   return this.toArray( array, offset );\n \n };\n \n Matrix3.prototype.multiplyVector3 = function ( vector ) {\n \n   console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n   return vector.applyMatrix3( this );\n \n };\n \n Matrix3.prototype.multiplyVector3Array = function ( /* a */ ) {\n \n   console.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\n \n };\n \n Matrix3.prototype.applyToBufferAttribute = function ( attribute ) {\n \n   console.warn( 'THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.' );\n   return attribute.applyMatrix3( this );\n \n };\n \n Matrix3.prototype.applyToVector3Array = function ( /* array, offset, length */ ) {\n \n   console.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n \n };\n \n Matrix3.prototype.getInverse = function ( matrix ) {\n \n   console.warn( 'THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.' );\n   return this.copy( matrix ).invert();\n \n };\n \n //\n \n Matrix4.prototype.extractPosition = function ( m ) {\n \n   console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n   return this.copyPosition( m );\n \n };\n \n Matrix4.prototype.flattenToArrayOffset = function ( array, offset ) {\n \n   console.warn( 'THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.' );\n   return this.toArray( array, offset );\n \n };\n \n Matrix4.prototype.getPosition = function () {\n \n   console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n   return new Vector3().setFromMatrixColumn( this, 3 );\n \n };\n \n Matrix4.prototype.setRotationFromQuaternion = function ( q ) {\n \n   console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n   return this.makeRotationFromQuaternion( q );\n \n };\n \n Matrix4.prototype.multiplyToArray = function () {\n \n   console.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n \n };\n \n Matrix4.prototype.multiplyVector3 = function ( vector ) {\n \n   console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n   return vector.applyMatrix4( this );\n \n };\n \n Matrix4.prototype.multiplyVector4 = function ( vector ) {\n \n   console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n   return vector.applyMatrix4( this );\n \n };\n \n Matrix4.prototype.multiplyVector3Array = function ( /* a */ ) {\n \n   console.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\n \n };\n \n Matrix4.prototype.rotateAxis = function ( v ) {\n \n   console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n   v.transformDirection( this );\n \n };\n \n Matrix4.prototype.crossVector = function ( vector ) {\n \n   console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n   return vector.applyMatrix4( this );\n \n };\n \n Matrix4.prototype.translate = function () {\n \n   console.error( 'THREE.Matrix4: .translate() has been removed.' );\n \n };\n \n Matrix4.prototype.rotateX = function () {\n \n   console.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n \n };\n \n Matrix4.prototype.rotateY = function () {\n \n   console.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n \n };\n \n Matrix4.prototype.rotateZ = function () {\n \n   console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n \n };\n \n Matrix4.prototype.rotateByAxis = function () {\n \n   console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n \n };\n \n Matrix4.prototype.applyToBufferAttribute = function ( attribute ) {\n \n   console.warn( 'THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.' );\n   return attribute.applyMatrix4( this );\n \n };\n \n Matrix4.prototype.applyToVector3Array = function ( /* array, offset, length */ ) {\n \n   console.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n \n };\n \n Matrix4.prototype.makeFrustum = function ( left, right, bottom, top, near, far ) {\n \n   console.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n   return this.makePerspective( left, right, top, bottom, near, far );\n \n };\n \n Matrix4.prototype.getInverse = function ( matrix ) {\n \n   console.warn( 'THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.' );\n   return this.copy( matrix ).invert();\n \n };\n \n //\n \n Plane.prototype.isIntersectionLine = function ( line ) {\n \n   console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n   return this.intersectsLine( line );\n \n };\n \n //\n \n Quaternion.prototype.multiplyVector3 = function ( vector ) {\n \n   console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n   return vector.applyQuaternion( this );\n \n };\n \n Quaternion.prototype.inverse = function ( ) {\n \n   console.warn( 'THREE.Quaternion: .inverse() has been renamed to invert().' );\n   return this.invert();\n \n };\n \n //\n \n Ray.prototype.isIntersectionBox = function ( box ) {\n \n   console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n   return this.intersectsBox( box );\n \n };\n \n Ray.prototype.isIntersectionPlane = function ( plane ) {\n \n   console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n   return this.intersectsPlane( plane );\n \n };\n \n Ray.prototype.isIntersectionSphere = function ( sphere ) {\n \n   console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n   return this.intersectsSphere( sphere );\n \n };\n \n //\n \n Triangle.prototype.area = function () {\n \n   console.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\n   return this.getArea();\n \n };\n \n Triangle.prototype.barycoordFromPoint = function ( point, target ) {\n \n   console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n   return this.getBarycoord( point, target );\n \n };\n \n Triangle.prototype.midpoint = function ( target ) {\n \n   console.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\n   return this.getMidpoint( target );\n \n };\n \n Triangle.prototypenormal = function ( target ) {\n \n   console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n   return this.getNormal( target );\n \n };\n \n Triangle.prototype.plane = function ( target ) {\n \n   console.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\n   return this.getPlane( target );\n \n };\n \n Triangle.barycoordFromPoint = function ( point, a, b, c, target ) {\n \n   console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n   return Triangle.getBarycoord( point, a, b, c, target );\n \n };\n \n Triangle.normal = function ( a, b, c, target ) {\n \n   console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n   return Triangle.getNormal( a, b, c, target );\n \n };\n \n //\n \n Shape.prototype.extractAllPoints = function ( divisions ) {\n \n   console.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\n   return this.extractPoints( divisions );\n \n };\n \n Shape.prototype.extrude = function ( options ) {\n \n   console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n   return new ExtrudeGeometry( this, options );\n \n };\n \n Shape.prototype.makeGeometry = function ( options ) {\n \n   console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n   return new ShapeGeometry( this, options );\n \n };\n \n //\n \n Vector2.prototype.fromAttribute = function ( attribute, index, offset ) {\n \n   console.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n   return this.fromBufferAttribute( attribute, index, offset );\n \n };\n \n Vector2.prototype.distanceToManhattan = function ( v ) {\n \n   console.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n   return this.manhattanDistanceTo( v );\n \n };\n \n Vector2.prototype.lengthManhattan = function () {\n \n   console.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\n   return this.manhattanLength();\n \n };\n \n //\n \n Vector3.prototype.setEulerFromRotationMatrix = function () {\n \n   console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n \n };\n \n Vector3.prototype.setEulerFromQuaternion = function () {\n \n   console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n \n };\n \n Vector3.prototype.getPositionFromMatrix = function ( m ) {\n \n   console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n   return this.setFromMatrixPosition( m );\n \n };\n \n Vector3.prototype.getScaleFromMatrix = function ( m ) {\n \n   console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n   return this.setFromMatrixScale( m );\n \n };\n \n Vector3.prototype.getColumnFromMatrix = function ( index, matrix ) {\n \n   console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n   return this.setFromMatrixColumn( matrix, index );\n \n };\n \n Vector3.prototype.applyProjection = function ( m ) {\n \n   console.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n   return this.applyMatrix4( m );\n \n };\n \n Vector3.prototype.fromAttribute = function ( attribute, index, offset ) {\n \n   console.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n   return this.fromBufferAttribute( attribute, index, offset );\n \n };\n \n Vector3.prototype.distanceToManhattan = function ( v ) {\n \n   console.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n   return this.manhattanDistanceTo( v );\n \n };\n \n Vector3.prototype.lengthManhattan = function () {\n \n   console.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\n   return this.manhattanLength();\n \n };\n \n //\n \n Vector4.prototype.fromAttribute = function ( attribute, index, offset ) {\n \n   console.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n   return this.fromBufferAttribute( attribute, index, offset );\n \n };\n \n Vector4.prototype.lengthManhattan = function () {\n \n   console.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\n   return this.manhattanLength();\n \n };\n \n //\n \n Object3D.prototype.getChildByName = function ( name ) {\n \n   console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n   return this.getObjectByName( name );\n \n };\n \n Object3D.prototype.renderDepth = function () {\n \n   console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n \n };\n \n Object3D.prototype.translate = function ( distance, axis ) {\n \n   console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n   return this.translateOnAxis( axis, distance );\n \n };\n \n Object3D.prototype.getWorldRotation = function () {\n \n   console.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\n \n };\n \n Object3D.prototype.applyMatrix = function ( matrix ) {\n \n   console.warn( 'THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().' );\n   return this.applyMatrix4( matrix );\n \n };\n \n Object.defineProperties( Object3D.prototype, {\n \n   eulerOrder: {\n     get: function () {\n \n       console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n       return this.rotation.order;\n \n     },\n     set: function ( value ) {\n \n       console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n       this.rotation.order = value;\n \n     }\n   },\n   useQuaternion: {\n     get: function () {\n \n       console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n \n     },\n     set: function () {\n \n       console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n \n     }\n   }\n \n } );\n \n Mesh.prototype.setDrawMode = function () {\n \n   console.error( 'THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n \n };\n \n Object.defineProperties( Mesh.prototype, {\n \n   drawMode: {\n     get: function () {\n \n       console.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.' );\n       return TrianglesDrawMode;\n \n     },\n     set: function () {\n \n       console.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n \n     }\n   }\n \n } );\n \n SkinnedMesh.prototype.initBones = function () {\n \n   console.error( 'THREE.SkinnedMesh: initBones() has been removed.' );\n \n };\n \n //\n \n PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n \n   console.warn( 'THREE.PerspectiveCamera.setLens is deprecated. ' +\n       'Use .setFocalLength and .filmGauge for a photographic setup.' );\n \n   if ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n   this.setFocalLength( focalLength );\n \n };\n \n //\n \n Object.defineProperties( Light.prototype, {\n   onlyShadow: {\n     set: function () {\n \n       console.warn( 'THREE.Light: .onlyShadow has been removed.' );\n \n     }\n   },\n   shadowCameraFov: {\n     set: function ( value ) {\n \n       console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n       this.shadow.camera.fov = value;\n \n     }\n   },\n   shadowCameraLeft: {\n     set: function ( value ) {\n \n       console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n       this.shadow.camera.left = value;\n \n     }\n   },\n   shadowCameraRight: {\n     set: function ( value ) {\n \n       console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n       this.shadow.camera.right = value;\n \n     }\n   },\n   shadowCameraTop: {\n     set: function ( value ) {\n \n       console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n       this.shadow.camera.top = value;\n \n     }\n   },\n   shadowCameraBottom: {\n     set: function ( value ) {\n \n       console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n       this.shadow.camera.bottom = value;\n \n     }\n   },\n   shadowCameraNear: {\n     set: function ( value ) {\n \n       console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n       this.shadow.camera.near = value;\n \n     }\n   },\n   shadowCameraFar: {\n     set: function ( value ) {\n \n       console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n       this.shadow.camera.far = value;\n \n     }\n   },\n   shadowCameraVisible: {\n     set: function () {\n \n       console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n \n     }\n   },\n   shadowBias: {\n     set: function ( value ) {\n \n       console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n       this.shadow.bias = value;\n \n     }\n   },\n   shadowDarkness: {\n     set: function () {\n \n       console.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n \n     }\n   },\n   shadowMapWidth: {\n     set: function ( value ) {\n \n       console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n       this.shadow.mapSize.width = value;\n \n     }\n   },\n   shadowMapHeight: {\n     set: function ( value ) {\n \n       console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n       this.shadow.mapSize.height = value;\n \n     }\n   }\n } );\n \n //\n \n Object.defineProperties( BufferAttribute.prototype, {\n \n   length: {\n     get: function () {\n \n       console.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n       return this.array.length;\n \n     }\n   },\n   dynamic: {\n     get: function () {\n \n       console.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n       return this.usage === DynamicDrawUsage;\n \n     },\n     set: function ( /* value */ ) {\n \n       console.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n       this.setUsage( DynamicDrawUsage );\n \n     }\n   }\n \n } );\n \n BufferAttribute.prototype.setDynamic = function ( value ) {\n \n   console.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n   this.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n   return this;\n \n };\n \n BufferAttribute.prototype.copyIndicesArray = function ( /* indices */ ) {\n \n   console.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\n \n },\n \n BufferAttribute.prototype.setArray = function ( /* array */ ) {\n \n   console.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n \n };\n \n //\n \n BufferGeometry.prototype.addIndex = function ( index ) {\n \n   console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n   this.setIndex( index );\n \n };\n \n BufferGeometry.prototype.addAttribute = function ( name, attribute ) {\n \n   console.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );\n \n   if ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n \n     console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n \n     return this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n \n   }\n \n   if ( name === 'index' ) {\n \n     console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n     this.setIndex( attribute );\n \n     return this;\n \n   }\n \n   return this.setAttribute( name, attribute );\n \n };\n \n BufferGeometry.prototype.addDrawCall = function ( start, count, indexOffset ) {\n \n   if ( indexOffset !== undefined ) {\n \n     console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n \n   }\n \n   console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n   this.addGroup( start, count );\n \n };\n \n BufferGeometry.prototype.clearDrawCalls = function () {\n \n   console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n   this.clearGroups();\n \n };\n \n BufferGeometry.prototype.computeOffsets = function () {\n \n   console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n \n };\n \n BufferGeometry.prototype.removeAttribute = function ( name ) {\n \n   console.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );\n \n   return this.deleteAttribute( name );\n \n };\n \n BufferGeometry.prototype.applyMatrix = function ( matrix ) {\n \n   console.warn( 'THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().' );\n   return this.applyMatrix4( matrix );\n \n };\n \n Object.defineProperties( BufferGeometry.prototype, {\n \n   drawcalls: {\n     get: function () {\n \n       console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n       return this.groups;\n \n     }\n   },\n   offsets: {\n     get: function () {\n \n       console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n       return this.groups;\n \n     }\n   }\n \n } );\n \n InterleavedBuffer.prototype.setDynamic = function ( value ) {\n \n   console.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n   this.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n   return this;\n \n };\n \n InterleavedBuffer.prototype.setArray = function ( /* array */ ) {\n \n   console.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n \n };\n \n //\n \n ExtrudeGeometry.prototype.getArrays = function () {\n \n   console.error( 'THREE.ExtrudeGeometry: .getArrays() has been removed.' );\n \n };\n \n ExtrudeGeometry.prototype.addShapeList = function () {\n \n   console.error( 'THREE.ExtrudeGeometry: .addShapeList() has been removed.' );\n \n };\n \n ExtrudeGeometry.prototype.addShape = function () {\n \n   console.error( 'THREE.ExtrudeGeometry: .addShape() has been removed.' );\n \n };\n \n //\n \n Scene.prototype.dispose = function () {\n \n   console.error( 'THREE.Scene: .dispose() has been removed.' );\n \n };\n \n //\n \n Uniform.prototype.onUpdate = function () {\n \n   console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n   return this;\n \n };\n \n //\n \n Object.defineProperties( Material.prototype, {\n \n   wrapAround: {\n     get: function () {\n \n       console.warn( 'THREE.Material: .wrapAround has been removed.' );\n \n     },\n     set: function () {\n \n       console.warn( 'THREE.Material: .wrapAround has been removed.' );\n \n     }\n   },\n \n   overdraw: {\n     get: function () {\n \n       console.warn( 'THREE.Material: .overdraw has been removed.' );\n \n     },\n     set: function () {\n \n       console.warn( 'THREE.Material: .overdraw has been removed.' );\n \n     }\n   },\n \n   wrapRGB: {\n     get: function () {\n \n       console.warn( 'THREE.Material: .wrapRGB has been removed.' );\n       return new Color();\n \n     }\n   },\n \n   shading: {\n     get: function () {\n \n       console.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n \n     },\n     set: function ( value ) {\n \n       console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n       this.flatShading = ( value === FlatShading );\n \n     }\n   },\n \n   stencilMask: {\n     get: function () {\n \n       console.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n       return this.stencilFuncMask;\n \n     },\n     set: function ( value ) {\n \n       console.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n       this.stencilFuncMask = value;\n \n     }\n   },\n \n   vertexTangents: {\n     get: function () {\n \n       console.warn( 'THREE.' + this.type + ': .vertexTangents has been removed.' );\n \n     },\n     set: function () {\n \n       console.warn( 'THREE.' + this.type + ': .vertexTangents has been removed.' );\n \n     }\n   },\n \n } );\n \n Object.defineProperties( ShaderMaterial.prototype, {\n \n   derivatives: {\n     get: function () {\n \n       console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n       return this.extensions.derivatives;\n \n     },\n     set: function ( value ) {\n \n       console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n       this.extensions.derivatives = value;\n \n     }\n   }\n \n } );\n \n //\n \n WebGLRenderer.prototype.clearTarget = function ( renderTarget, color, depth, stencil ) {\n \n   console.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );\n   this.setRenderTarget( renderTarget );\n   this.clear( color, depth, stencil );\n \n };\n \n WebGLRenderer.prototype.animate = function ( callback ) {\n \n   console.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\n   this.setAnimationLoop( callback );\n \n };\n \n WebGLRenderer.prototype.getCurrentRenderTarget = function () {\n \n   console.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n   return this.getRenderTarget();\n \n };\n \n WebGLRenderer.prototype.getMaxAnisotropy = function () {\n \n   console.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\n   return this.capabilities.getMaxAnisotropy();\n \n };\n \n WebGLRenderer.prototype.getPrecision = function () {\n \n   console.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\n   return this.capabilities.precision;\n \n };\n \n WebGLRenderer.prototype.resetGLState = function () {\n \n   console.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\n   return this.state.reset();\n \n };\n \n WebGLRenderer.prototype.supportsFloatTextures = function () {\n \n   console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n   return this.extensions.get( 'OES_texture_float' );\n \n };\n \n WebGLRenderer.prototype.supportsHalfFloatTextures = function () {\n \n   console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n   return this.extensions.get( 'OES_texture_half_float' );\n \n };\n \n WebGLRenderer.prototype.supportsStandardDerivatives = function () {\n \n   console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n   return this.extensions.get( 'OES_standard_derivatives' );\n \n };\n \n WebGLRenderer.prototype.supportsCompressedTextureS3TC = function () {\n \n   console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n   return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n \n };\n \n WebGLRenderer.prototype.supportsCompressedTexturePVRTC = function () {\n \n   console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n   return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n \n };\n \n WebGLRenderer.prototype.supportsBlendMinMax = function () {\n \n   console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n   return this.extensions.get( 'EXT_blend_minmax' );\n \n };\n \n WebGLRenderer.prototype.supportsVertexTextures = function () {\n \n   console.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n   return this.capabilities.vertexTextures;\n \n };\n \n WebGLRenderer.prototype.supportsInstancedArrays = function () {\n \n   console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n   return this.extensions.get( 'ANGLE_instanced_arrays' );\n \n };\n \n WebGLRenderer.prototype.enableScissorTest = function ( boolean ) {\n \n   console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n   this.setScissorTest( boolean );\n \n };\n \n WebGLRenderer.prototype.initMaterial = function () {\n \n   console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n \n };\n \n WebGLRenderer.prototype.addPrePlugin = function () {\n \n   console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n \n };\n \n WebGLRenderer.prototype.addPostPlugin = function () {\n \n   console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n \n };\n \n WebGLRenderer.prototype.updateShadowMap = function () {\n \n   console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n \n };\n \n WebGLRenderer.prototype.setFaceCulling = function () {\n \n   console.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\n \n };\n \n WebGLRenderer.prototype.allocTextureUnit = function () {\n \n   console.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );\n \n };\n \n WebGLRenderer.prototype.setTexture = function () {\n \n   console.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );\n \n };\n \n WebGLRenderer.prototype.setTexture2D = function () {\n \n   console.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );\n \n };\n \n WebGLRenderer.prototype.setTextureCube = function () {\n \n   console.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );\n \n };\n \n WebGLRenderer.prototype.getActiveMipMapLevel = function () {\n \n   console.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );\n   return this.getActiveMipmapLevel();\n \n };\n \n Object.defineProperties( WebGLRenderer.prototype, {\n \n   shadowMapEnabled: {\n     get: function () {\n \n       return this.shadowMap.enabled;\n \n     },\n     set: function ( value ) {\n \n       console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n       this.shadowMap.enabled = value;\n \n     }\n   },\n   shadowMapType: {\n     get: function () {\n \n       return this.shadowMap.type;\n \n     },\n     set: function ( value ) {\n \n       console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n       this.shadowMap.type = value;\n \n     }\n   },\n   shadowMapCullFace: {\n     get: function () {\n \n       console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n       return undefined;\n \n     },\n     set: function ( /* value */ ) {\n \n       console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n \n     }\n   },\n   context: {\n     get: function () {\n \n       console.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );\n       return this.getContext();\n \n     }\n   },\n   vr: {\n     get: function () {\n \n       console.warn( 'THREE.WebGLRenderer: .vr has been renamed to .xr' );\n       return this.xr;\n \n     }\n   },\n   gammaInput: {\n     get: function () {\n \n       console.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n       return false;\n \n     },\n     set: function () {\n \n       console.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n \n     }\n   },\n   gammaOutput: {\n     get: function () {\n \n       console.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n       return false;\n \n     },\n     set: function ( value ) {\n \n       console.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n       this.outputEncoding = ( value === true ) ? sRGBEncoding : LinearEncoding;\n \n     }\n   },\n   toneMappingWhitePoint: {\n     get: function () {\n \n       console.warn( 'THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.' );\n       return 1.0;\n \n     },\n     set: function () {\n \n       console.warn( 'THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.' );\n \n     }\n   },\n \n } );\n \n Object.defineProperties( WebGLShadowMap.prototype, {\n \n   cullFace: {\n     get: function () {\n \n       console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n       return undefined;\n \n     },\n     set: function ( /* cullFace */ ) {\n \n       console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n \n     }\n   },\n   renderReverseSided: {\n     get: function () {\n \n       console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n       return undefined;\n \n     },\n     set: function () {\n \n       console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n \n     }\n   },\n   renderSingleSided: {\n     get: function () {\n \n       console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n       return undefined;\n \n     },\n     set: function () {\n \n       console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n \n     }\n   }\n \n } );\n \n function WebGLRenderTargetCube( width, height, options ) {\n \n   console.warn( 'THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).' );\n   return new WebGLCubeRenderTarget( width, options );\n \n }\n \n //\n \n Object.defineProperties( WebGLRenderTarget.prototype, {\n \n   wrapS: {\n     get: function () {\n \n       console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n       return this.texture.wrapS;\n \n     },\n     set: function ( value ) {\n \n       console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n       this.texture.wrapS = value;\n \n     }\n   },\n   wrapT: {\n     get: function () {\n \n       console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n       return this.texture.wrapT;\n \n     },\n     set: function ( value ) {\n \n       console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n       this.texture.wrapT = value;\n \n     }\n   },\n   magFilter: {\n     get: function () {\n \n       console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n       return this.texture.magFilter;\n \n     },\n     set: function ( value ) {\n \n       console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n       this.texture.magFilter = value;\n \n     }\n   },\n   minFilter: {\n     get: function () {\n \n       console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n       return this.texture.minFilter;\n \n     },\n     set: function ( value ) {\n \n       console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n       this.texture.minFilter = value;\n \n     }\n   },\n   anisotropy: {\n     get: function () {\n \n       console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n       return this.texture.anisotropy;\n \n     },\n     set: function ( value ) {\n \n       console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n       this.texture.anisotropy = value;\n \n     }\n   },\n   offset: {\n     get: function () {\n \n       console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n       return this.texture.offset;\n \n     },\n     set: function ( value ) {\n \n       console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n       this.texture.offset = value;\n \n     }\n   },\n   repeat: {\n     get: function () {\n \n       console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n       return this.texture.repeat;\n \n     },\n     set: function ( value ) {\n \n       console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n       this.texture.repeat = value;\n \n     }\n   },\n   format: {\n     get: function () {\n \n       console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n       return this.texture.format;\n \n     },\n     set: function ( value ) {\n \n       console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n       this.texture.format = value;\n \n     }\n   },\n   type: {\n     get: function () {\n \n       console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n       return this.texture.type;\n \n     },\n     set: function ( value ) {\n \n       console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n       this.texture.type = value;\n \n     }\n   },\n   generateMipmaps: {\n     get: function () {\n \n       console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n       return this.texture.generateMipmaps;\n \n     },\n     set: function ( value ) {\n \n       console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n       this.texture.generateMipmaps = value;\n \n     }\n   }\n \n } );\n \n //\n \n Audio.prototype.load = function ( file ) {\n \n   console.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n   const scope = this;\n   const audioLoader = new AudioLoader();\n   audioLoader.load( file, function ( buffer ) {\n \n     scope.setBuffer( buffer );\n \n   } );\n   return this;\n \n };\n \n \n AudioAnalyser.prototype.getData = function () {\n \n   console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n   return this.getFrequencyData();\n \n };\n \n //\n \n CubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\n \n   console.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\n   return this.update( renderer, scene );\n \n };\n \n CubeCamera.prototype.clear = function ( renderer, color, depth, stencil ) {\n \n   console.warn( 'THREE.CubeCamera: .clear() is now .renderTarget.clear().' );\n   return this.renderTarget.clear( renderer, color, depth, stencil );\n \n };\n \n ImageUtils.crossOrigin = undefined;\n \n ImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\n \n   console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n \n   const loader = new TextureLoader();\n   loader.setCrossOrigin( this.crossOrigin );\n \n   const texture = loader.load( url, onLoad, undefined, onError );\n \n   if ( mapping ) texture.mapping = mapping;\n \n   return texture;\n \n };\n \n ImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\n \n   console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n \n   const loader = new CubeTextureLoader();\n   loader.setCrossOrigin( this.crossOrigin );\n \n   const texture = loader.load( urls, onLoad, undefined, onError );\n \n   if ( mapping ) texture.mapping = mapping;\n \n   return texture;\n \n };\n \n ImageUtils.loadCompressedTexture = function () {\n \n   console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n \n };\n \n ImageUtils.loadCompressedTextureCube = function () {\n \n   console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n \n };\n \n //\n \n function CanvasRenderer() {\n \n   console.error( 'THREE.CanvasRenderer has been removed' );\n \n }\n \n //\n \n function JSONLoader() {\n \n   console.error( 'THREE.JSONLoader has been removed.' );\n \n }\n \n //\n \n const SceneUtils = {\n \n   createMultiMaterialObject: function ( /* geometry, materials */ ) {\n \n     console.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n \n   },\n \n   detach: function ( /* child, parent, scene */ ) {\n \n     console.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n \n   },\n \n   attach: function ( /* child, scene, parent */ ) {\n \n     console.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n \n   }\n \n };\n \n //\n \n function LensFlare() {\n \n   console.error( 'THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js' );\n \n }\n \n //\n \n function ParametricGeometry() {\n \n   console.error( 'THREE.ParametricGeometry has been moved to /examples/jsm/geometries/ParametricGeometry.js' );\n   return new BufferGeometry();\n \n }\n \n function TextGeometry() {\n \n   console.error( 'THREE.TextGeometry has been moved to /examples/jsm/geometries/TextGeometry.js' );\n   return new BufferGeometry();\n \n }\n \n function FontLoader() {\n \n   console.error( 'THREE.FontLoader has been moved to /examples/jsm/loaders/FontLoader.js' );\n \n }\n \n function Font() {\n \n   console.error( 'THREE.Font has been moved to /examples/jsm/loaders/FontLoader.js' );\n \n }\n \n function ImmediateRenderObject() {\n \n   console.error( 'THREE.ImmediateRenderObject has been removed.' );\n \n }\n \n if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n \n   /* eslint-disable no-undef */\n   __THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n     revision: REVISION,\n   } } ) );\n   /* eslint-enable no-undef */\n \n }\n \n if ( typeof window !== 'undefined' ) {\n \n   if ( window.__THREE__ ) {\n \n     console.warn( 'WARNING: Multiple instances of Three.js being imported.' );\n \n   } else {\n \n     window.__THREE__ = REVISION;\n \n   }\n \n }\n \n \n\n//# sourceURL=webpack://starter-kit/./app/components/animation/src/three.module.js?");

/***/ }),

/***/ "./app/components/header/header.js":
/*!*****************************************!*\
  !*** ./app/components/header/header.js ***!
  \*****************************************/
/***/ (() => {

eval("let burderElements = document.querySelectorAll('.js-burger');\nlet headerElement = document.querySelector('.js-header');\nlet navItemElements = document.querySelectorAll('.js-nav-item');\n\nif (burderElements.length) {\n    burderElements.forEach((el) => {\n        el.addEventListener('click', () => {\n            headerElement.classList.toggle('is-active');\n        });\n    });\n}\n\nif (navItemElements.length) {\n  navItemElements.forEach((el) => {\n      el.addEventListener('click', () => {\n          headerElement.classList.remove('is-active');\n      });\n  });\n}\n\n//# sourceURL=webpack://starter-kit/./app/components/header/header.js?");

/***/ }),

/***/ "./app/src/app.js":
/*!************************!*\
  !*** ./app/src/app.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _styles_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles.scss */ \"./app/src/styles.scss\");\n/* harmony import */ var _components_header_header__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/header/header */ \"./app/components/header/header.js\");\n/* harmony import */ var _components_header_header__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_components_header_header__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _components_animation_animation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/animation/animation */ \"./app/components/animation/animation.js\");\n\n\n\n\n\n//# sourceURL=webpack://starter-kit/./app/src/app.js?");

/***/ }),

/***/ "./app/src/styles.scss":
/*!*****************************!*\
  !*** ./app/src/styles.scss ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"../dist/styles.css\");\n\n//# sourceURL=webpack://starter-kit/./app/src/styles.scss?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./app/src/app.js");
/******/ 	
/******/ })()
;